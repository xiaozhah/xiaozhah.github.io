<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++ and VS</title>
    <url>/2018/07/29/C++%20and%20VS/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc -->
<h1 id="VS知识"><a href="#VS知识" class="headerlink" title="VS知识"></a>VS知识</h1><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p><kbd>Ctrl-K</kbd> + <kbd>Ctrl-C</kbd> 注释一段选择代码<br><kbd>Ctrl-K</kbd> + <kbd>Ctrl-U</kbd> 取消一段选择代码的注释<br><kbd>Ctrl-K</kbd> + <kbd>Ctrl-D</kbd> 格式化整篇代码</p>
<a id="more"></a>
<p>为解决方案创建目录后那么根目录包含</p>
<ul>
<li>.sln</li>
<li>.db</li>
<li>git文件夹</li>
<li><p>solution文件夹: 与工程同名, 放源代码.</p>
</li>
<li><p>以及x64文件夹，用于放编译出来的项目.</p>
</li>
</ul>
<p>在solution文件夹中, 比如项目名是test, 那么源代码就在./test/test/里面, 第一个test指的是解决方案目录, 第二个就是项目名. 包含</p>
<ul>
<li>所有的源代码, .cpp和.h等等</li>
<li>.vcxproj</li>
<li>.vcxproj.filters</li>
<li><p>.vcxproj.user</p>
</li>
<li><p>这也是默认的输入输出的根目录，也就是说，如果程序中打开或新建一个文件，只给文件名的话，就从这个目录打开.</p>
</li>
</ul>
<h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><h3 id="为什么项目总是让我们编译"><a href="#为什么项目总是让我们编译" class="headerlink" title="为什么项目总是让我们编译"></a>为什么项目总是让我们编译</h3><p>查看工具-&gt;选项-&gt;项目和解决方案-&gt;MSBuild项目生成输出详细级别<br><img src="/2018/07/29/C++%20and%20VS/1.png" class=""><br>再把 视图-&gt;输出 中的内容复制到txt中 寻找类似语句<br>“项目不是最新的，因为缺少…”<br><img src="/2018/07/29/C++%20and%20VS/2.png" class=""><br>修复后对解决方案或项目选择全部生成。之后运行就正常了</p>
<p>Note:</p>
<ul>
<li><p>不是“MSBuild项目生成日志文件详细级别”，那个内容不够丰富，会遗漏一些</p>
</li>
<li><p>修复后不是立即运行，而是对解决方案或项目选择全部生成</p>
</li>
</ul>
<h3 id="如何查看导入到系统库lib路径"><a href="#如何查看导入到系统库lib路径" class="headerlink" title="如何查看导入到系统库lib路径"></a>如何查看导入到系统库lib路径</h3><p>工程项目属性页-&gt;配置属性-&gt;VC++目录的库目录可以看到所调用的系统文件夹路径<br>某台电脑缺乏一些库（因为之前使用了卸载VS的专门工具）导致不能编译，因此在可以编译的计算机上使用Everything找到相应的lib，再拷贝到那个电脑</p>
<h3 id="如何在VS里添加头文件包含路径"><a href="#如何在VS里添加头文件包含路径" class="headerlink" title="如何在VS里添加头文件包含路径"></a>如何在VS里添加头文件包含路径</h3><p>项目-&gt;属性-&gt;C++-&gt;附加包路径</p>
<h1 id="C-知识"><a href="#C-知识" class="headerlink" title="C++知识"></a>C++知识</h1><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>C++内部变量连续存储，意味着先定义了a数组a[100]后定义了b，那么如果a[105]原先是未定义的 但是当把b置0后，a[105]的值也会跟着改变，因为a[105]地址可能就是b的地址</p>
<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>初始化a指向整型数组<br><code>int* a = new int[5];</code></p>
<p>初始化a指向5这个整型<br><code>int* a = new int(5);</code></p>
<h3 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h3><h4 id="拷贝数组至另一个数组-数组元素为N个"><a href="#拷贝数组至另一个数组-数组元素为N个" class="headerlink" title="拷贝数组至另一个数组(数组元素为N个)"></a>拷贝数组至另一个数组(数组元素为N个)</h4><p>拷贝数组a至数组b：<code>memcpy(b, a, sizeof(float)*N);</code><br>拷贝数组a至向量b：<code>memcpy(&amp;b[0], a, sizeof(float)*N);</code><br>拷贝向量a至向量b：<code>memcpy(&amp;b[0], &amp;a[0], sizeof(float)*N);</code></p>
<h4 id="拷贝二维数组的一部分（N列）至向量b（N个元素）"><a href="#拷贝二维数组的一部分（N列）至向量b（N个元素）" class="headerlink" title="拷贝二维数组的一部分（N列）至向量b（N个元素）"></a>拷贝二维数组的一部分（N列）至向量b（N个元素）</h4><p>拷贝二维数组的第一行至向量b：<code>memcpy(&amp;b[0], a, sizeof(float)*N);</code><br>拷贝二维数组的第二行至向量b：<code>memcpy(&amp;b[0], a+1 sizeof(float)*N);</code><br>拷贝二维数组的第二行第三个元素开始的N个元素至向量b：<br><code>memcpy(&amp;b[0], *(a+1)+2,sizeof(float)*N);</code><br>或者<code>memcpy(&amp;b[0], &amp;a[1][2],sizeof(float)*N);</code><br>因为<code>&amp;a[i]=a+i</code>，<code>&amp;a[i][j]=*(a+i)+j</code>,在指向行的指针前加 * ,转换为指向列的指针；在指向列的指针前加 &amp; ,转换为指向行的指针；</p>
<h3 id="测量时间"><a href="#测量时间" class="headerlink" title="测量时间"></a>测量时间</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"time.h"</span></span></span><br><span class="line"><span class="keyword">clock_t</span> start, end;</span><br><span class="line">start = clock();</span><br><span class="line"><span class="comment">//code here</span></span><br><span class="line">end = clock();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Elapsed time:%f secs.\n"</span>, (<span class="keyword">double</span>)(end - start) / CLOCKS_PER_SEC);</span><br></pre></td></tr></table></figure>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul>
<li>sprintf</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sprintf</span><span class="params">( <span class="keyword">char</span> *buffer, <span class="keyword">const</span> <span class="keyword">char</span> *format, [ argument] … )</span><span class="comment">//把格式化的数据写入某个字符串缓冲区buffer中</span></span></span><br><span class="line"><span class="function"><span class="title">sprintf</span><span class="params">(szLstFile,<span class="string">"%s\\lists\\phoneme.lst"</span>,g_LibCfg.szPrjDir)</span></span>;<span class="comment">//把 g_LibCfg.szPrjDir 按照 "%s\\lists\\phoneme.lst"格式转化，并存在 szLstFile 中</span></span><br></pre></td></tr></table></figure>
<ul>
<li>sscanf<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sscanf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *buffer,<span class="keyword">const</span> <span class="keyword">char</span> *format,[argument ]...)</span></span>;  <span class="comment">//sscanf会从buffer里读进数据，依照format的格式将数据写入到argument里。</span></span><br></pre></td></tr></table></figure></li>
<li>fgets<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">fgets</span><span class="params">(<span class="keyword">char</span> *buf, <span class="keyword">int</span> bufsize, FILE *stream)</span></span>;<span class="comment">//从文件结构体指针stream中读取数据，每次读取一行。读取的数据保存在buf指向的字符数组中，每次最多读取bufsize-1个字符（第bufsize个字符赋'\0'）</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>fgets返回值</li>
</ul>
<ol>
<li>成功，则返回第一个参数buf</li>
<li>在读字符时遇到end-of-file，则eof指示器被设置，如果还没读入任何字符就遇到这种情况，则buf保持原来的内容，返回NULL</li>
<li>如果发生读入错误，error指示器被设置，返回NULL，buf的值可能被改变</li>
</ol>
<ul>
<li>fscanf<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fscanf</span><span class="params">(FILE*stream, constchar*format, [argument...])</span></span>; <span class="comment">//其功能为根据数据格式(format)从输入流(stream)中写入数据(argument)；与fgets的差别在于：fscanf遇到空格和换行时结束，注意空格时也结束，fgets遇到空格不结束。</span></span><br><span class="line"><span class="built_in">fscanf</span>(fpPhone,<span class="string">" %s %s"</span>,szTmpStr,szTmpStr);<span class="comment">//只会将第二个字符串赋值给szTmpStr</span></span><br></pre></td></tr></table></figure></li>
<li>fread<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">fread</span> <span class="params">( <span class="keyword">void</span> * ptr, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> count, FILE * stream )</span></span>;<span class="comment">//从文件流指针stream处读count个数据，每个数据大小size个字节，放到ptr中存储。</span></span><br></pre></td></tr></table></figure></li>
<li>fwrite<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">fwrite</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">void</span> * ptr, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> count, FILE * stream )</span><span class="comment">//fwrite()用来将数据写入文件流中,将ptr指向的数据地址的内容输出至stream文件指针指向的文件</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>memset<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">memset</span><span class="params">(<span class="keyword">void</span> *s, <span class="keyword">int</span> ch, <span class="keyword">size_t</span> n)</span></span>;<span class="comment">//函数解释：将s中当前位置后面的n个字节（typedef unsigned int size_t ）用 ch 替换并返回 s</span></span><br><span class="line"><span class="comment">//memset：作用是在一段内存块中填充某个给定的值，它是对较大的结构体或数组进行清零操作的一种最快方法</span></span><br></pre></td></tr></table></figure></li>
<li>strstr<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">char</span> *<span class="title">strstr</span><span class="params">(<span class="keyword">char</span> *str1, <span class="keyword">const</span> <span class="keyword">char</span> *str2)</span></span>;<span class="comment">//返回值；若str2是str1的子串，则返回str2在str1的首次出现的地址；如果str2不是str1的子串，则返回NULL。</span></span><br></pre></td></tr></table></figure></li>
<li>strncpy<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">strncpy</span><span class="params">(<span class="keyword">char</span> *dest, <span class="keyword">const</span> <span class="keyword">char</span> *src, <span class="keyword">int</span> n)</span><span class="comment">//把src所指向的字符串中以src地址开始的前n个字节复制到dest所指的数组中，并返回dest。</span></span></span><br></pre></td></tr></table></figure></li>
<li>strcpy<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">strcpy</span><span class="params">(<span class="keyword">char</span> *dest, <span class="keyword">const</span> <span class="keyword">char</span> *src)</span></span>;<span class="comment">//strcpy()会将参数src 字符串拷贝至参数dest 所指的地址。</span></span><br></pre></td></tr></table></figure></li>
<li>strcmp<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">strcmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s1,<span class="keyword">const</span> <span class="keyword">char</span> *s2)</span></span>;</span><br><span class="line"><span class="comment">//当s1&lt;s2时，返回为负数</span></span><br><span class="line"><span class="comment">//当s1=s2时，返回值= 0</span></span><br><span class="line"><span class="comment">//当s1&gt;s2时，返回正数</span></span><br></pre></td></tr></table></figure></li>
<li>memcpy<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">memcpy</span> <span class="params">( <span class="keyword">void</span> * destination, <span class="keyword">const</span> <span class="keyword">void</span> * source, <span class="keyword">size_t</span> num )</span></span>;<span class="comment">//从source处读num个字节放到destination指向的内存中去。</span></span><br></pre></td></tr></table></figure></li>
<li>assert<br>assert宏能测试传入表达式的真假值，当表达式为真(true)，则不会有任何反应；当表达式为假(false)，则函数将输出错误信息，并中断程序的执行。</li>
</ul>
<h2 id="疑问-1"><a href="#疑问-1" class="headerlink" title="疑问"></a>疑问</h2><h3 id="如何在sprintf函数中使用string？"><a href="#如何在sprintf函数中使用string？" class="headerlink" title="如何在sprintf函数中使用string？"></a>如何在sprintf函数中使用string？</h3><p>sprintf是C++继承自C语言的函数，无法直接支持string类型，所以要先把string类型转为基础类型，也就是char*。<br>这里需要使用string类的成员函数c_str();该成员函数功能为，将string的内容转为C语言的字符数组表达形式。<br>所以用sprintf将string对象str，输出的char[]数组array中的代码可以写作： <code>sprintf(array, &quot;%s&quot;, str.c_str());</code><br>除此外，还可以用strcpy函数，使代码更简单：<code>strcpy(array, str.c_str());</code></p>
<h2 id="实际例子"><a href="#实际例子" class="headerlink" title="实际例子"></a>实际例子</h2><h3 id="建立二维数组"><a href="#建立二维数组" class="headerlink" title="建立二维数组"></a>建立二维数组</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开辟内存</span></span><br><span class="line"><span class="keyword">float</span> **ppTrgAnswer_Data = <span class="keyword">new</span> <span class="keyword">float</span>*[nTrgPhoneNum];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nTrgPhoneNum; i++)</span><br><span class="line">&#123;</span><br><span class="line">    ppTrgAnswer_Data[i] = <span class="keyword">new</span> <span class="keyword">float</span>[MAX_QUES_NUM];</span><br><span class="line">    <span class="built_in">memset</span>(ppTrgAnswer_Data[i], <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">float</span>)*MAX_QUES_NUM);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放内存</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nTrgPhoneNum; i++)</span><br><span class="line">    <span class="keyword">delete</span>[] ppTrgAnswer_Data[i];</span><br><span class="line"><span class="keyword">delete</span>[] ppTrgAnswer_Data;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Visual Studio</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS</title>
    <url>/2018/08/08/MacOS/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc -->
<p>我以前舍友叫我机器杀手，我也没有白白浪费这个称号。以前用实验室电脑(windows)的时候，一个月重装过四次，每次都能把电脑给弄成蓝屏，无法开机。之后装在戴尔xps13上的Ubuntu一次插拔U盘把笔记本的主板给烧了。。。<br>后来就有了这台 Mac pro（13寸带Touchbar的版本），看看这个系统能不能经过能不能经过我的摧残还能保持完好😅</p>
<p>目前来看，自从6月中旬入手以来，Mac使用良好。</p>
<a id="more"></a>
<p>不过首先就会遇到软件问题，好在MaxOS继承Unix,Linux也继承于Unix。它们很多工具是一样的。所以好用的Linux工具都有Mac版本。Ubuntu用apt-get包管理器，Mac就用brew，一模一样。感觉就是Mac拥有Windows易用的图形化操作系统，界面美观，笔记本轻盈，超级超级静音，又有Linux强大的命令行做后盾。所以使用起来很舒服</p>
<p>使用Linux的过程见<a href="https://xiaozhah.github.io/2018/07/26/Linux/" target="_blank" rel="noopener">Linux</a>。</p>
<h2 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h2><p>Linux用axel, Mac本来想使用winebottler或Crossover来用迅雷，但是初试体验一般，IE7都有问题<br>后来试了Mac版本迅雷，网友说很差没下载，出乎意料的很好用呀！<br>可惜的是没windows的IDMan下载神器。。。</p>
<h2 id="办公软件"><a href="#办公软件" class="headerlink" title="办公软件"></a>办公软件</h2><p>有微软的Office,兼容性没问题，比苹果自带的Pages兼容性肯定强。因为文章一般Latex写，word等用的简单，目前没问题。</p>
<h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><p>当然是Chrome，各种插件<br>油猴插件配合百度云就是快</p>
<h2 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h2><p>防止访问远程服务器的SMB服务时在产生.DStore文件，终端输入<code>defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE</code>,见<a href="https://support.apple.com/zh-cn/HT208209" target="_blank" rel="noopener">官网</a><br>可以用screen后台执行终端任务<br>另外<kbd>⌘</kbd>+<kbd>D</kbd>是终端分屏，<kbd>⇧</kbd>+<kbd>⌘</kbd>+<kbd>D</kbd>关闭<br>不过现在发现更好的软件既可以后台执行终端任务也可以终端分屏等，那就是tmux</p>
<h3 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h3><p>使用bash终端时拷贝代码至~/.bash_profile然后<code>source ~/.bash_profile</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#export PS1&#x3D;&#39;\[\e[32m\][\u@\w#]\$\[\e[m\]&#39;</span><br><span class="line"></span><br><span class="line">#Make Terminal more beautiful</span><br><span class="line">export CLICOLOR&#x3D;1</span><br><span class="line">export LSCOLORS&#x3D;ExFxCxDxBxegedabagacad</span><br><span class="line"></span><br><span class="line">#Network</span><br><span class="line">alias proxy&#x3D;&quot;export http_proxy&#x3D;http:&#x2F;&#x2F;192.168.2.102:41493;export https_proxy&#x3D;http:&#x2F;&#x2F;192.168.2.102:41493&quot;</span><br><span class="line">alias unproxy&#x3D;&quot;unset proxy&quot;</span><br><span class="line">alias ip&#x3D;&quot;curl http:&#x2F;&#x2F;ip.cn&quot;</span><br><span class="line"></span><br><span class="line">#iCloud</span><br><span class="line">alias icloud&#x3D;&quot;cd ~&#x2F;Library&#x2F;Mobile\ Documents&#x2F;com~apple~CloudDocs&quot;</span><br><span class="line"></span><br><span class="line">#RepairAu</span><br><span class="line">alias repairAu&#x3D;&quot;cd &#x2F;private&#x2F;var&#x2F;folders&#x2F;jj&#x2F;bg7147vx1cqgzdzft1sn25sm0000gn&#x2F;T&#x2F;TemporaryItems&#x2F;;mkdir -p Adobe&#x2F;Audition&#x2F;10.0;cd -&quot;</span><br><span class="line"></span><br><span class="line">#Run tf environment</span><br><span class="line">alias tf&#x3D;&quot;source activate tensorflow&quot;</span><br><span class="line">alias mx&#x3D;&quot;source activate gluon&quot;</span><br><span class="line"></span><br><span class="line"># added by Anaconda2 installer</span><br><span class="line">export PATH&#x3D;&quot;&#x2F;Users&#x2F;xzhou&#x2F;anaconda2&#x2F;bin:$PATH&quot;</span><br></pre></td></tr></table></figure><br>安装zsh后，以上代码拷贝到~/.zshrc文件然后<code>source ~/.zshrc</code></p>
]]></content>
      <categories>
        <category>常见指令以及用法备忘录</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Mac</tag>
        <tag>Unix</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Mathematica</title>
    <url>/2018/07/27/Mathematica/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc -->
<h1 id="设置问题"><a href="#设置问题" class="headerlink" title="设置问题"></a>设置问题</h1><h2 id="没有图形化界面的机器导出图像"><a href="#没有图形化界面的机器导出图像" class="headerlink" title="没有图形化界面的机器导出图像"></a>没有图形化界面的机器导出图像</h2><p>计算机是Linux服务器, 无图形化界面<br>链接<a href="https://mathematica.stackexchange.com/questions/157842/how-to-save-image-or-graphics-in-terminal" target="_blank" rel="noopener">How to save Image or Graphics in Terminal?</a></p>
<p><code>sudo apt-get install xvfb
xvfb-run wolfram</code><br>此时运行这个代码就正常了</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">p=<span class="keyword">Graphics</span>@<span class="keyword">Circle</span>[];</span><br><span class="line"><span class="keyword">Export</span>[<span class="string">"test.jpg"</span>,p];</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="状态栏显示时间"><a href="#状态栏显示时间" class="headerlink" title="状态栏显示时间"></a>状态栏显示时间</h2><p>格式-&gt;选项设置（快捷键Ctrl+Shift+O），显示选项值选择全局偏好，搜索 EvaluationCompletionAction，将其设置为“ShowTiming”,笔记本下方的状态栏就会显示每次运行代码的消耗时间了。</p>
<p>当用到GPU并且执行wolframscript的语法是：<br><code>CUDA_VISIBLE_DEVICES=1 xvfb-run wolframscript -file test.wl</code></p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="原子表达式不能替换头部"><a href="#原子表达式不能替换头部" class="headerlink" title="原子表达式不能替换头部"></a>原子表达式不能替换头部</h2><p>因为1是原子表达式，所以f不能替换掉它的头部<br><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Apply</span>[f, &#123;&#123;g[<span class="number">1</span>], g[a]&#125;, &#123;g[<span class="number">2</span>], g[b]&#125;, &#123;g[<span class="number">3</span>], g[c]&#125;&#125;, &#123;<span class="number">2</span>&#125;]</span><br><span class="line"><span class="comment">(* &#123;&#123;f[1], f[a]&#125;, &#123;f[2], f[b]&#125;, &#123;f[3], f[c]&#125;&#125; *)</span></span><br><span class="line"><span class="keyword">Apply</span>[f, &#123;&#123;<span class="number">1</span>, g[a]&#125;, &#123;<span class="number">2</span>, g[b]&#125;, &#123;<span class="number">3</span>, g[c]&#125;&#125;, &#123;<span class="number">2</span>&#125;]</span><br><span class="line"><span class="comment">(* &#123;&#123;1, f[a]&#125;, &#123;2, f[b]&#125;, &#123;3, f[c]&#125;&#125; *)</span></span><br></pre></td></tr></table></figure></p>
<h2 id="函数式指令"><a href="#函数式指令" class="headerlink" title="函数式指令"></a>函数式指令</h2><p>Gather将相同元素收集在一起<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Gather[&#123;&#123;a, 1&#125;, &#123;b, 1&#125;, &#123;a, 2&#125;, &#123;d, 1&#125;, &#123;b, 3&#125;&#125;, First[#1] &#x3D;&#x3D; First[#2] &amp;]</span><br><span class="line">(*or*)</span><br><span class="line">GatherBy[&#123;&#123;a, 1&#125;, &#123;b, 1&#125;, &#123;a, 2&#125;, &#123;d, 1&#125;, &#123;b, 3&#125;&#125;, First]</span><br><span class="line"></span><br><span class="line">(*&#123;&#123;&#123;a, 1&#125;, &#123;a, 2&#125;&#125;, &#123;&#123;b, 1&#125;, &#123;b, 3&#125;&#125;, &#123;&#123;d, 1&#125;&#125;&#125;*)</span><br></pre></td></tr></table></figure></p>
<h2 id="表格排版"><a href="#表格排版" class="headerlink" title="表格排版"></a>表格排版</h2><img src="/2018/07/27/Mathematica/5.png" class="">
<h3 id="新版"><a href="#新版" class="headerlink" title="新版"></a>新版</h3><p>可以不用设置Partition,Grid组合起来用那么麻烦，因为Partition要考虑是怎么划分的<br><code>Multicolumn[Range[50], 6]</code></p>
<h3 id="旧版"><a href="#旧版" class="headerlink" title="旧版"></a>旧版</h3><p><code>Grid@Partition[Range[50], 6, 6, 1, &quot;&quot;]</code></p>
<h3 id="尽量用Grid排版，而不是Row-Column"><a href="#尽量用Grid排版，而不是Row-Column" class="headerlink" title="尽量用Grid排版，而不是Row+Column"></a>尽量用Grid排版，而不是Row+Column</h3><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Column</span>[<span class="keyword">Row</span>[#, <span class="string">"    "</span>] &amp; /@ &#123;&#123;asa, b, c&#125;, &#123;x, y, z&#125;, &#123;adaasd, <span class="number">1</span>, <span class="number">2</span>&#125;&#125;]</span><br></pre></td></tr></table></figure>
<img src="/2018/07/27/Mathematica/azgTQRCe.jpg" class="">
<p>显得非常的不整齐<br>但是Grid就没问题 可以对齐<br><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Grid</span>[&#123;&#123;asa, b, c&#125;, &#123;x, y, z&#125;, &#123;adaasd, <span class="number">1</span>, <span class="number">2</span>&#125;&#125;]</span><br></pre></td></tr></table></figure></p>
<img src="/2018/07/27/Mathematica/8gmZedoG.jpg" class="">
<h2 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h2><h3 id="求出最大-小元素的位置"><a href="#求出最大-小元素的位置" class="headerlink" title="求出最大/小元素的位置"></a>求出最大/小元素的位置</h3><p>求出最小元素的位置用<code>Ordering[lis, 1]</code>;求出最大元素的位置用<code>Ordering[lis, -1]</code></p>
<h3 id="矩阵重复再拼接-类似numpy的tail函数"><a href="#矩阵重复再拼接-类似numpy的tail函数" class="headerlink" title="矩阵重复再拼接 类似numpy的tail函数"></a>矩阵重复再拼接 类似numpy的tail函数</h3><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ArrayFlatten</span>[&#123;<span class="keyword">ReplicateLayer</span>[<span class="number">4</span>]@mat&#125;] // <span class="keyword">TraditionalForm</span></span><br></pre></td></tr></table></figure>
<img src="/2018/07/27/Mathematica/10.png" class="">
<h2 id="数学证明"><a href="#数学证明" class="headerlink" title="数学证明"></a>数学证明</h2><img src="/2018/07/27/Mathematica/8.png" class="">
<h2 id="学习四元数"><a href="#学习四元数" class="headerlink" title="学习四元数"></a>学习四元数</h2><p>定义运算<br><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">quaternion[r_, x_, y_, </span><br><span class="line">  z_] := &#123;&#123;r, x, y, z&#125;, &#123;-x, r, -z, y&#125;, &#123;-y, z, r, -x&#125;, &#123;-z, -y, x, </span><br><span class="line">   r&#125;&#125;;</span><br><span class="line">quaternionQ[mat_?<span class="keyword">MatrixQ</span>] := </span><br><span class="line"> <span class="keyword">Simplify</span>[<span class="keyword">Transpose</span>[mat] + mat == <span class="number">2</span> <span class="keyword">DiagonalMatrix</span>[<span class="keyword">Diagonal</span>@mat]];</span><br><span class="line">fromquaternion[mat_?<span class="keyword">MatrixQ</span>] := </span><br><span class="line"> <span class="keyword">If</span>[quaternionQ[mat], &#123;<span class="number">1</span>, i, j, k&#125;.mat[[<span class="number">1</span>]]];</span><br></pre></td></tr></table></figure><br>这里使用的是矩阵形式定义四元数，来源于论文：<br><img src="/2018/07/27/Mathematica/JIvA7qEc.png" class=""><br>可以基于这个矩阵形式做如下运算：<br><code>m=quaternion[3, 1, 0, 0].quaternion[0, 5, 1, -2];</code><br>得到新的四元数m（矩阵形式<code>MatrixForm[m]</code>）,<code>quaternionQ[m]</code>输出真。<br>若得到普通形式需<code>fromquaternion[m]</code></p>
<p>一般情况下两个四元数相乘是<code>fromquaternion[
 quaternion[Subscript[r, 1], Subscript[x, 1], Subscript[y, 1], 
   Subscript[z, 1]].quaternion[Subscript[r, 2], Subscript[x, 2], 
   Subscript[y, 2], Subscript[z, 2]]]</code><br>四元数的转置是fromquaternion@Transpose@quaternion[r, x, y, z]<br>四元数的乘法表：<br><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TableForm</span>[</span><br><span class="line"> <span class="keyword">Table</span>[fromquaternion[</span><br><span class="line">   quaternion @@ <span class="keyword">UnitVector</span>[<span class="number">4</span>, a].quaternion @@ <span class="keyword">UnitVector</span>[<span class="number">4</span>, b]], &#123;a,</span><br><span class="line">    <span class="number">4</span>&#125;, &#123;b, <span class="number">4</span>&#125;], <span class="keyword">TableHeadings</span> -&gt; &#123;&#123;<span class="number">1</span>, i, j, k&#125;, &#123;<span class="number">1</span>, i, j, k&#125;&#125;]</span><br></pre></td></tr></table></figure><br><img src="/2018/07/27/Mathematica/AVTefr3w.png" class=""></p>
<h1 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h1><h2 id="列出文件夹下的文件"><a href="#列出文件夹下的文件" class="headerlink" title="列出文件夹下的文件"></a>列出文件夹下的文件</h2><p>列出当前目录和子目录下所有后缀为nb的文件<br><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FileNames</span>[<span class="string">"*.nb"</span>,<span class="string">"*"</span>,<span class="keyword">Infinity</span>]</span><br></pre></td></tr></table></figure></p>
<h2 id="得到BaseName"><a href="#得到BaseName" class="headerlink" title="得到BaseName"></a>得到BaseName</h2><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FileBaseName</span>[<span class="string">"C:\\Users\\xzhou\\Desktop\\test.gif"</span>]</span><br><span class="line"><span class="comment">(*test*)</span></span><br></pre></td></tr></table></figure>
<h2 id="保存mma表达式"><a href="#保存mma表达式" class="headerlink" title="保存mma表达式"></a>保存mma表达式</h2><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FilePrint</span> @ <span class="keyword">Export</span>[<span class="string">"test.wl"</span>, <span class="keyword">Solve</span>[x^<span class="number">2</span> + a x + <span class="number">1</span> == <span class="number">0</span>, x]]</span><br><span class="line"><span class="comment">(*Or*)</span></span><br><span class="line">file = <span class="string">"test.wl"</span></span><br><span class="line"><span class="keyword">If</span>[<span class="keyword">FileExistsQ</span>[#], <span class="keyword">DeleteFile</span>[#]]&amp; @ file;</span><br><span class="line"><span class="keyword">FilePrint</span> @ <span class="keyword">Save</span>[file, <span class="keyword">Solve</span>[x^<span class="number">2</span> + a x + <span class="number">1</span> == <span class="number">0</span>, x]];</span><br><span class="line"><span class="comment">(*Or*)</span></span><br><span class="line"><span class="comment">(*Compress is very nice for expression can't directly saved to file*)</span></span><br><span class="line"><span class="keyword">Export</span>[file, <span class="keyword">Compress</span>@<span class="keyword">Encrypt</span>[<span class="string">"my pass"</span>, <span class="string">"short text"</span>], <span class="string">"Text"</span>]</span><br></pre></td></tr></table></figure>
<h1 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h1><h2 id="CoordinateBoundingBoxArray"><a href="#CoordinateBoundingBoxArray" class="headerlink" title="CoordinateBoundingBoxArray"></a>CoordinateBoundingBoxArray</h2><p>输入边界坐标，自动均匀填充边界内的点坐标<br><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CoordinateBoundingBoxArray</span>[&#123;&#123;<span class="number">3</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">8</span>, <span class="number">2</span>&#125;&#125;];</span><br><span class="line"><span class="keyword">Graphics</span>[<span class="keyword">Point</span>[<span class="keyword">Flatten</span>[%, <span class="number">1</span>]], <span class="keyword">Frame</span> -&gt; <span class="keyword">True</span>]</span><br></pre></td></tr></table></figure></p>
<h2 id="在MatrixPlot和Graphics中插入文字"><a href="#在MatrixPlot和Graphics中插入文字" class="headerlink" title="在MatrixPlot和Graphics中插入文字"></a>在MatrixPlot和Graphics中插入文字</h2><p>考虑Epilog选项和Inset图元</p>
<h2 id="自动给曲线图打标签"><a href="#自动给曲线图打标签" class="headerlink" title="自动给曲线图打标签"></a>自动给曲线图打标签</h2><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ListLinePlot</span>[<span class="keyword">RandomReal</span>[<span class="number">1</span>, <span class="number">26</span>] -&gt; <span class="keyword">CharacterRange</span>[<span class="string">"a"</span>, <span class="string">"z"</span>]]</span><br></pre></td></tr></table></figure>
<img src="/2018/07/27/Mathematica/1.png" class="">
<h2 id="给特定点上标记信息"><a href="#给特定点上标记信息" class="headerlink" title="给特定点上标记信息"></a>给特定点上标记信息</h2><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">color = &#123;<span class="keyword">Red</span>, <span class="keyword">Green</span>, <span class="keyword">Blue</span>&#125;;</span><br><span class="line">&#123;<span class="keyword">ListPlot</span>[&lt;|<span class="keyword">Red</span> -&gt; <span class="number">1</span>, <span class="keyword">Green</span> -&gt; <span class="number">2</span>, <span class="keyword">Blue</span> -&gt; <span class="number">3</span>|&gt;],</span><br><span class="line"> <span class="comment">(*Or*)</span></span><br><span class="line"> <span class="keyword">ListPlot</span>[<span class="keyword">Table</span>[<span class="keyword">Callout</span>[i, color[[i]]], &#123;i, <span class="number">1</span>, <span class="number">3</span>&#125;]],</span><br><span class="line"> <span class="comment">(*Or*)</span></span><br><span class="line"> <span class="keyword">ListPlot</span>[<span class="keyword">Labeled</span>[#, color[[#]]] &amp; /@ &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, </span><br><span class="line">  <span class="keyword">PlotStyle</span> -&gt; <span class="keyword">PointSize</span>[<span class="keyword">Medium</span>]]&#125;</span><br></pre></td></tr></table></figure>
<img src="/2018/07/27/Mathematica/rOqVsL2X.jpg" class="">
<h2 id="给特定点上特定颜色"><a href="#给特定点上特定颜色" class="headerlink" title="给特定点上特定颜色"></a>给特定点上特定颜色</h2><h2 id="ColorFunction"><a href="#ColorFunction" class="headerlink" title="ColorFunction"></a>ColorFunction</h2><p>比如<code>BarChart[{1, 2, 3}]</code>是没颜色的<br><code>BarChart[{1, 2, 3}, ColorFunction -&gt; &quot;Rainbow&quot;]</code>是有颜色的，颜色根据数值决定<br>大部分函数都可以用ColorFunction来指定颜色，不过ListPlot需要使用Joined选项才有效果</p>
<h2 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h2><p>但是注意到刚才的上色是根据数值计算得到的，那能不能根据数值在列表中的索引来上色呢？<br>默认选项是不能办到的，只能用Style<br><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ListPlot</span>[&#123;<span class="keyword">Style</span>[<span class="number">1</span>, <span class="keyword">Red</span>], <span class="keyword">Style</span>[<span class="number">2</span>, <span class="keyword">Green</span>], <span class="keyword">Style</span>[<span class="number">3</span>, <span class="keyword">Blue</span>]&#125;]</span><br><span class="line"><span class="keyword">BarChart</span>[&#123;<span class="keyword">Style</span>[<span class="number">1</span>, <span class="keyword">Red</span>], <span class="keyword">Style</span>[<span class="number">2</span>, <span class="keyword">Green</span>], <span class="keyword">Style</span>[<span class="number">3</span>, <span class="keyword">Blue</span>]&#125;]</span><br></pre></td></tr></table></figure></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>不过对于<code>Raster</code>可以另辟蹊径，因为它可以这么做<br><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">b = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">Graphics</span>[<span class="keyword">Raster</span>[b, </span><br><span class="line">  <span class="keyword">ColorFunction</span> -&gt; (<span class="keyword">ColorData</span>[<span class="string">"Rainbow"</span>, <span class="keyword">Rescale</span>[#, <span class="keyword">MinMax</span>[b]]] &amp;)]]</span><br></pre></td></tr></table></figure><br>当然它支持Association，不过只能画出对应label而不是颜色<br><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ListPlot</span>[&lt;|<span class="keyword">Red</span> -&gt; <span class="number">1</span>, <span class="keyword">Green</span> -&gt; <span class="number">2</span>, <span class="keyword">Blue</span> -&gt; <span class="number">3</span>|&gt;]</span><br></pre></td></tr></table></figure></p>
<h1 id="音频函数"><a href="#音频函数" class="headerlink" title="音频函数"></a>音频函数</h1><h2 id="语音合成"><a href="#语音合成" class="headerlink" title="语音合成"></a>语音合成</h2><p>Speak可以让Mma说话，SpokenString可以显示说话的内容</p>
<h2 id="让Audio自动播放声音："><a href="#让Audio自动播放声音：" class="headerlink" title="让Audio自动播放声音："></a>让Audio自动播放声音：</h2><p>最后的参数”Play”可以换成Pause Stop之类的<br><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">au = <span class="keyword">ExampleData</span>[&#123;<span class="string">"Sound"</span>, <span class="string">"Violin"</span>&#125;];</span><br><span class="line"><span class="keyword">Audio</span>`Internals`Execute[ <span class="keyword">Audio</span>`Internals`GetAudioManager[ <span class="keyword">Audio</span>`AudioInformation[au, <span class="string">"AudioID"</span>]], <span class="string">"Play"</span>]</span><br></pre></td></tr></table></figure></p>
<h2 id="得到Audio文件此时的播放位置"><a href="#得到Audio文件此时的播放位置" class="headerlink" title="得到Audio文件此时的播放位置"></a>得到Audio文件此时的播放位置</h2><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">id =<span class="keyword">Audio</span>`AudioInformation[song, <span class="string">"AudioID"</span>];mngr = <span class="keyword">Audio</span>`Internals`GetAudioManager[id];<span class="keyword">Dynamic</span>@<span class="keyword">Audio</span>`AudioDump`getGUIInfo[mngr, <span class="string">"AudioPosition"</span>]</span><br></pre></td></tr></table></figure>
<h2 id="计算音频的能量"><a href="#计算音频的能量" class="headerlink" title="计算音频的能量"></a>计算音频的能量</h2><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">a = <span class="keyword">ExampleData</span>[&#123;<span class="string">"Sound"</span>, <span class="string">"Violin"</span>&#125;]; <span class="keyword">AudioMeasurements</span>[a, <span class="string">"RMSAmplitude"</span>]</span><br><span class="line"><span class="comment">(*实际上度量的是均方误差a // AudioData // #^2 &amp; // Mean // Sqrt*)</span></span><br><span class="line">a = <span class="keyword">ExampleData</span>[&#123;<span class="string">"Sound"</span>, <span class="string">"Violin"</span>&#125;]; <span class="keyword">AudioMeasurements</span>[a, <span class="string">"Power"</span>]</span><br><span class="line"><span class="comment">(*实际上度量的是 a // AudioData // #^2 &amp; // Mean*)</span></span><br><span class="line">a = <span class="keyword">ExampleData</span>[&#123;<span class="string">"Sound"</span>, <span class="string">"Violin"</span>&#125;]; <span class="keyword">AudioMeasurements</span>[a, <span class="string">"Loudness"</span>]</span><br><span class="line"><span class="comment">(*实际上度量的是 a // AudioData // #^2 &amp; // Mean // #^0.67 &amp;*)</span></span><br></pre></td></tr></table></figure>
<h2 id="常用替换"><a href="#常用替换" class="headerlink" title="常用替换"></a>常用替换</h2><h3 id="Audio-Sound"><a href="#Audio-Sound" class="headerlink" title="Audio Sound"></a>Audio Sound</h3><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="comment">(*Audio-&gt;Sound*)</span></span><br><span class="line"><span class="keyword">Audio</span>@s</span><br><span class="line"><span class="comment">(*Sound-&gt;Audio*)</span></span><br><span class="line"><span class="keyword">Sound</span>[<span class="keyword">SampledSoundList</span>[<span class="keyword">First</span>@<span class="keyword">AudioData</span>[#], <span class="keyword">QuantityMagnitude</span>@<span class="keyword">AudioSampleRate</span>@#]]@a</span><br></pre></td></tr></table></figure>
<h3 id="List-Association"><a href="#List-Association" class="headerlink" title="List Association"></a>List Association</h3><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="comment">(*List-&gt;Association*)</span></span><br><span class="line"><span class="keyword">Association</span>[&#123;<span class="number">1</span> -&gt; <span class="number">2</span>, <span class="number">2</span> -&gt; <span class="number">3</span>&#125;]</span><br><span class="line"><span class="comment">(*Association-&gt;List*)</span></span><br><span class="line"><span class="keyword">Normal</span>@&lt;|<span class="number">1</span> -&gt; <span class="number">2</span>, <span class="number">2</span> -&gt; <span class="number">3</span>|&gt;</span><br></pre></td></tr></table></figure>
<h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="comment">(*函数式 &#123;1-&gt;2,2-&gt;3&#125;  -&gt;  &#123;&#123;1,2&#125;,&#123;2,3&#125;&#125;*)</span></span><br><span class="line"><span class="keyword">List</span>@@@&#123;<span class="number">1</span>-&gt;<span class="number">2</span>,<span class="number">2</span>-&gt;<span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">(*规则式 谢谢xzcyr和Alexander0620提供的解法*)</span></span><br><span class="line">&#123;<span class="number">1</span> -&gt; <span class="number">2</span>, <span class="number">2</span> -&gt; <span class="number">3</span>&#125; /. <span class="keyword">Sequence</span>[x_ -&gt; y_] -&gt; &#123;x, y&#125;</span><br><span class="line"><span class="comment">(*或者*)</span></span><br><span class="line">&#123;<span class="number">1</span> -&gt; <span class="number">2</span>, <span class="number">2</span> -&gt; <span class="number">3</span>&#125; /. <span class="keyword">Rule</span> -&gt; <span class="keyword">List</span></span><br></pre></td></tr></table></figure>
<h1 id="Dataset"><a href="#Dataset" class="headerlink" title="Dataset"></a>Dataset</h1><h2 id="深入、退出运算符"><a href="#深入、退出运算符" class="headerlink" title="深入、退出运算符"></a>深入、退出运算符</h2><p>值得注意的是TakeLargestBy是深入运算符，TakeLargest是退出运算符。</p>
<ul>
<li>在后面的运算符应用到更深一层之前，“深入”运算符被应用到原始数据集相应的部分. 深入运算符的特点是在作用于某一层时，<strong>它们不会改变数据更深层次的结构</strong>. 这确保后面的运算符操作时，子表达式的结构和原始数据集的相应层次是一样的. 最简单的深入运算符是 All，它选取某个给定层的所有部分，因此不会改变该层数据的结构</li>
<li>在所有随后的运算符完成对深层数据的操作后，“退出”运算符被应用.因此<code>dataset[f,g]</code>是<code>Query[f, g] // Normal</code>,也就是<code>Map[g] /* f</code> .深入运算符对应于原始数据的层，而退出运算符对应于结果的层. 和深入运算符不同，<strong>退出运算符不必保持所操作数据的结构</strong>. <em>如果一个运算符没有被明确指定为深入运算符，假定其为退出运算符</em></li>
</ul>
<p><code>data[SortBy[#x - #y &amp;], Total, #^2 &amp;]</code>是深入、退出1、退出2运算符，因此先应用深入运算符，再应用<code>#^2 &amp;</code>，再应用<code>Total</code></p>
<h2 id="数据分析或处理"><a href="#数据分析或处理" class="headerlink" title="数据分析或处理"></a>数据分析或处理</h2><h3 id="利用SQL语法查询数据"><a href="#利用SQL语法查询数据" class="headerlink" title="利用SQL语法查询数据"></a>利用SQL语法查询数据</h3><p><code>sales = SemanticImport[&quot;ExampleData/RetailSales.tsv&quot;]</code><br><img src="/2018/07/27/Mathematica/2.png" class=""><br><code>sales[All, &quot;Sales&quot;]</code>得到Sales列的所有数据<br><img src="/2018/07/27/Mathematica/3.png" class=""><br>因为All是深入运算符，可以安全的更换为其他深入运算符，如<code>sales[Mean, &quot;Sales&quot;] // N</code><br>这时候如果想再针对月份和星期几排序可以这样：<br><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">sales[<span class="keyword">GroupBy</span>[<span class="keyword">DateValue</span>[#<span class="keyword">Date</span>, <span class="string">"Month"</span>] &amp;], </span><br><span class="line"> <span class="keyword">GroupBy</span>[<span class="keyword">DateValue</span>[#<span class="keyword">Date</span>, <span class="string">"DayName"</span>] &amp;], <span class="keyword">Mean</span>, <span class="string">"Sales"</span>]</span><br></pre></td></tr></table></figure><br><img src="/2018/07/27/Mathematica/4.png" class=""></p>
<h3 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h3><img src="/2018/07/27/Mathematica/9.png" class="">
<p>ClusteringComponents的第二个参数意思是聚类个数为3类，第三个参数将第一层数据视为一个样本</p>
<h3 id="归一化数据"><a href="#归一化数据" class="headerlink" title="归一化数据"></a>归一化数据</h3><p>对数据（矩阵）做归一化，数据每行是一个样本，每一列是一个特征<br>均值文件存储的也是矩阵。第一行是最小值，第二行是最大值<br>若只对矩阵第一维归一化<br><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">data1[[<span class="keyword">All</span>,  <span class="number">1</span>]] = (data1[[<span class="keyword">All</span>, <span class="number">1</span>]] - meanInput[[<span class="number">1</span>, <span class="number">1</span>]])/(meanInput[[<span class="number">2</span>, <span class="number">1</span>]] -  meanInput[[<span class="number">1</span>, <span class="number">1</span>]]);</span><br></pre></td></tr></table></figure><br>若对矩阵的每一维做归一化<br><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">mat = (# - meanOutput[[<span class="number">1</span>]])/meanOutput[[<span class="number">2</span>]] &amp; /@ mat;</span><br></pre></td></tr></table></figure></p>
<h1 id="实用小功能"><a href="#实用小功能" class="headerlink" title="实用小功能"></a>实用小功能</h1><h2 id="美化输出"><a href="#美化输出" class="headerlink" title="美化输出"></a>美化输出</h2><p>GeneralUtilities`PrettyForm可以美化输出</p>
<h2 id="导出矢量图"><a href="#导出矢量图" class="headerlink" title="导出矢量图"></a>导出矢量图</h2><p>SVG和wmf文件可以输出矢量图，wmf适合visio</p>
<h2 id="将PDF中的段落变成一行，方便谷歌翻译使用"><a href="#将PDF中的段落变成一行，方便谷歌翻译使用" class="headerlink" title="将PDF中的段落变成一行，方便谷歌翻译使用"></a>将PDF中的段落变成一行，方便谷歌翻译使用</h2><p>先复制段落再粘贴进mma执行以下代码<br><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="keyword">StringDelete</span>[text, <span class="string">"\n"</span>] // <span class="keyword">CopyToClipboard</span></span><br></pre></td></tr></table></figure><br>当然CopyToClipboard可以直接拷贝数据至剪贴板，也对复制图片是极好的</p>
<h2 id="导出数学公式至Stack-Exchange"><a href="#导出数学公式至Stack-Exchange" class="headerlink" title="导出数学公式至Stack Exchange"></a>导出数学公式至Stack Exchange</h2><p>例如<a href="http://math.stackexchange.com" target="_blank" rel="noopener">http://math.stackexchange.com</a><br>公式选择复制为Latex格式 然后在前后加上$就行了<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$c&#x3D;\sqrt&#123;a^2-2 a b \cos (\theta )+b^2&#125;$</span><br></pre></td></tr></table></figure></p>
<h2 id="导出含有Alpha通道的图片"><a href="#导出含有Alpha通道的图片" class="headerlink" title="导出含有Alpha通道的图片"></a>导出含有Alpha通道的图片</h2><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">img//<span class="keyword">Binarize</span>//<span class="keyword">ColorReplace</span>[#,<span class="keyword">Black</span>-&gt;<span class="keyword">Red</span>]&amp;</span><br><span class="line"><span class="keyword">Export</span>[<span class="string">"img.gif"</span>,%,<span class="string">"TranspararentColor"</span>-&gt;<span class="keyword">White</span>]</span><br></pre></td></tr></table></figure>
<h2 id="快速显示📂各种文件后缀的总大小"><a href="#快速显示📂各种文件后缀的总大小" class="headerlink" title="快速显示📂各种文件后缀的总大小"></a>快速显示📂各种文件后缀的总大小</h2><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">fs=<span class="keyword">Select</span>[<span class="keyword">FileNames</span>[<span class="string">"*"</span>,<span class="string">"F:\\source"</span>,<span class="keyword">Infinity</span>],<span class="keyword">FileType</span>@#==<span class="keyword">File</span>&amp;];</span><br><span class="line"><span class="keyword">PieChart</span>[<span class="keyword">Total</span>/@<span class="keyword">GroupBy</span>[<span class="keyword">Thread</span>[fs-&gt;<span class="keyword">FileSize</span>/@fs],<span class="keyword">FileExtension</span>[#[[<span class="number">1</span>]]]&amp;-&gt;<span class="keyword">Last</span>],<span class="keyword">ChartLabels</span>-&gt;<span class="keyword">Automatic</span>]</span><br></pre></td></tr></table></figure>
<img src="/2018/07/27/Mathematica/hqvjpHWi.jpg" class="">
<h2 id="加密📂所有文件"><a href="#加密📂所有文件" class="headerlink" title="加密📂所有文件"></a>加密📂所有文件</h2><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">files = <span class="keyword">Select</span>[</span><br><span class="line">   <span class="keyword">FileNames</span>[<span class="string">"*"</span>, </span><br><span class="line">    <span class="string">"C:\\Users\\Administrator\\Desktop\\Yanping_13k_code"</span>, </span><br><span class="line">    <span class="keyword">Infinity</span>], ! <span class="keyword">DirectoryQ</span>[#] &amp;];</span><br><span class="line"></span><br><span class="line">mypass = <span class="keyword">DialogInput</span>[&#123;name = <span class="string">""</span>&#125;, </span><br><span class="line">   <span class="keyword">Column</span>[&#123;<span class="string">"Type a name"</span>, <span class="keyword">InputField</span>[<span class="keyword">Dynamic</span>[name], <span class="keyword">String</span>], </span><br><span class="line">     <span class="keyword">Button</span>[<span class="string">"Proceed"</span>, <span class="keyword">DialogReturn</span>[name], <span class="keyword">ImageSize</span> -&gt; <span class="keyword">Automatic</span>]&#125;]];</span><br><span class="line"></span><br><span class="line">myentropyfile[file_, pass_] := </span><br><span class="line">  <span class="keyword">Export</span>[file, <span class="keyword">Compress</span>@<span class="keyword">Encrypt</span>[pass, <span class="keyword">Import</span>[file, <span class="string">"Text"</span>]], <span class="string">"Text"</span>];</span><br><span class="line">mydecryptfile[file_, pass_] := </span><br><span class="line">  <span class="keyword">Export</span>[file, <span class="keyword">Decrypt</span>[pass, <span class="keyword">Uncompress</span>@<span class="keyword">Import</span>[file, <span class="string">"Text"</span>]], <span class="string">"Text"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">(*加密*)</span></span><br><span class="line"><span class="keyword">Monitor</span>[<span class="keyword">Do</span>[myentropyfile[files[[i]], mypass], &#123;i, <span class="keyword">Length</span>@files&#125;], </span><br><span class="line"> <span class="keyword">Row</span>[&#123;<span class="keyword">ProgressIndicator</span>[i, &#123;<span class="number">1</span>, <span class="keyword">Length</span>@files&#125;], i&#125;, <span class="string">" "</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">(*解密*)</span></span><br><span class="line"><span class="keyword">Monitor</span>[<span class="keyword">Do</span>[mydecryptfile[files[[i]], mypass], &#123;i, <span class="keyword">Length</span>@files&#125;], </span><br><span class="line"> <span class="keyword">Row</span>[&#123;<span class="keyword">ProgressIndicator</span>[i, &#123;<span class="number">1</span>, <span class="keyword">Length</span>@files&#125;], i&#125;, <span class="string">" "</span>]]</span><br></pre></td></tr></table></figure>
<h1 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h1><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>导入lst文件（每行均为数字构成）<code>Import[filename,&quot;List&quot;]</code><br>导入lst文件（每行均为字符串构成）<code>Import[filename,&quot;Lines&quot;]</code><br>导入纯文本构成的矩阵 <code>Import[filename,&quot;Table&quot;]</code><br>导入浮点数二进制文件 <code>BinaryReadList[filename,&quot;Real32&quot;]</code></p>
<p>如果一些tsv文件导入乱码比如使用<code>Import[filename,&quot;Table&quot;</code>可以尝试<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Import[&quot;&#x2F;Users&#x2F;xzhou&#x2F;python&#x2F;nvshens&#x2F;Girls.lst&quot;, &quot;TSV&quot;]</span><br><span class="line">(*Or*)</span><br><span class="line">StringSplit[StringSplit[#, &quot;\n&quot;], &quot;\t&quot;] &amp; @ Import[filename,&quot;Text&quot;,Character-&gt;&quot;UTF8&quot;]</span><br></pre></td></tr></table></figure></p>
<h2 id="文件流控制"><a href="#文件流控制" class="headerlink" title="文件流控制"></a>文件流控制</h2><h3 id="以二进制文件形式导入"><a href="#以二进制文件形式导入" class="headerlink" title="以二进制文件形式导入"></a>以二进制文件形式导入</h3><p>Import不会引入新的流，简单但是灵活性低<br><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Import</span>[<span class="string">"test.exe"</span>, <span class="string">"Byte"</span>] // <span class="keyword">Length</span></span><br><span class="line"><span class="keyword">Streams</span>[] // <span class="keyword">Length</span> <span class="comment">(*2，证明只有输出流stdout和错误流stderr*)</span></span><br></pre></td></tr></table></figure></p>
<p>OpenRead 如果用完关闭流也不会引入新的流，稍复杂但是灵活性高<br><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">file = <span class="keyword">OpenRead</span>[<span class="string">"test.exe"</span>, </span><br><span class="line">   <span class="keyword">BinaryFormat</span> -&gt; <span class="keyword">True</span>];</span><br><span class="line"><span class="keyword">Length</span>@<span class="keyword">Reap</span>[</span><br><span class="line">   <span class="keyword">While</span>[(tempRecord = <span class="keyword">BinaryRead</span>[file]) =!= <span class="keyword">EndOfFile</span>, </span><br><span class="line">    <span class="keyword">Sow</span>@tempRecord]][[<span class="number">2</span>, <span class="number">1</span>]]</span><br><span class="line"><span class="keyword">Close</span>[file];</span><br><span class="line"><span class="keyword">Streams</span>[] // <span class="keyword">Length</span> <span class="comment">(*2，证明只有输出流stdout和错误流stderr*)</span></span><br></pre></td></tr></table></figure></p>
<p>不管是BinaryReadList还是BinaryRead都会改变流指针的位置：<br><img src="/2018/07/27/Mathematica/6.png" class=""><br></p>
<h2 id="Mathemtica向文件追加二进制数据"><a href="#Mathemtica向文件追加二进制数据" class="headerlink" title="Mathemtica向文件追加二进制数据"></a>Mathemtica向文件追加二进制数据</h2><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">file = <span class="string">"test.dat"</span>;</span><br><span class="line">str = <span class="keyword">OpenAppend</span>[file, <span class="keyword">BinaryFormat</span> -&gt; <span class="keyword">True</span>];</span><br><span class="line"><span class="keyword">BinaryWrite</span>[str, <span class="keyword">Range</span>[<span class="number">12</span>], <span class="string">"Real32"</span>];</span><br><span class="line"><span class="keyword">BinaryWrite</span>[str, <span class="keyword">Range</span>[<span class="number">15</span>,<span class="number">30</span>], <span class="string">"Real32"</span>];</span><br><span class="line"><span class="keyword">Close</span>[str]; </span><br><span class="line"><span class="keyword">BinaryReadList</span>[file, <span class="string">"Real32"</span>]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, \<br>22, 23, 24, 25, 26, 27, 28, 29, 30}</p>
</blockquote>
<p>继续追加<br><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">str = <span class="keyword">OpenAppend</span>[file, <span class="keyword">BinaryFormat</span> -&gt; <span class="keyword">True</span>];</span><br><span class="line"><span class="keyword">BinaryWrite</span>[str, <span class="keyword">Range</span>[<span class="number">5</span>], <span class="string">"Real32"</span>];</span><br><span class="line"><span class="keyword">BinaryWrite</span>[str, <span class="keyword">Range</span>[<span class="number">10</span>, <span class="number">15</span>], <span class="string">"Real32"</span>];</span><br><span class="line"><span class="keyword">Close</span>[str];</span><br><span class="line"><span class="keyword">BinaryReadList</span>[file, <span class="string">"Real32"</span>]</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, \<br>22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 2, 3, 4, 5, 10, 11, 12, 13, \<br>14, 15}</p>
</blockquote>
<h2 id="不导出也查看导出的效果"><a href="#不导出也查看导出的效果" class="headerlink" title="不导出也查看导出的效果"></a>不导出也查看导出的效果</h2><p>比如<code>ExportString[{1, {1, 2, 3}}, &quot;Table&quot;]</code>输出的效果就是<code>Export[&quot;test.txt&quot;,{1, {1, 2, 3}}, &quot;Table&quot;]</code>打开后的效果</p>
<h2 id="单元-笔记本"><a href="#单元-笔记本" class="headerlink" title="单元 笔记本"></a>单元 笔记本</h2><p>在单元中启用动态<br><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TextCell</span>[<span class="keyword">Dynamic</span>[ <span class="keyword">Refresh</span>[<span class="keyword">DateString</span>[], <span class="keyword">UpdateInterval</span> -&gt; <span class="number">1</span>]], <span class="string">"Subsection"</span>]</span><br></pre></td></tr></table></figure></p>
<h2 id="时序数据"><a href="#时序数据" class="headerlink" title="时序数据"></a>时序数据</h2><p>TimeSeries的头部依然是TemporalData<br><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">v = &#123;<span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>&#125;; </span><br><span class="line">t = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">15</span>&#125;; </span><br><span class="line">ts = <span class="keyword">TimeSeries</span>[v, &#123;t&#125;]</span><br><span class="line"><span class="keyword">Head</span>[ts]<span class="comment">(* TemporalData *)</span></span><br></pre></td></tr></table></figure><br>两条路径使用 TemporalData而不是TimeSeries<br><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>&#125;; </span><br><span class="line">s2 = &#123;<span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>&#125;; </span><br><span class="line">t = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">15</span>&#125;; </span><br><span class="line">td = <span class="keyword">TemporalData</span>[&#123;s1, s2&#125;, &#123;t&#125;]</span><br></pre></td></tr></table></figure><br>Differences和Accumulate可以用于 TemporalData，但是要注意采样是否均匀的问题</p>
<h2 id="打开数据库文件（SQLite）"><a href="#打开数据库文件（SQLite）" class="headerlink" title="打开数据库文件（SQLite）"></a>打开数据库文件（SQLite）</h2><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Needs</span>[<span class="string">"DatabaseLink`"</span>];</span><br><span class="line">JDBCDrivers[<span class="string">"SQLite"</span>];</span><br><span class="line">conn = OpenSQLConnection[JDBC[<span class="string">"SQLite"</span>], <span class="string">"log.db"</span>];</span><br><span class="line">data = SQLExecute[conn, <span class="string">"SELECT * FROM log"</span>];</span><br><span class="line">SQLColumnInformation[conn] // <span class="keyword">TableForm</span></span><br><span class="line">SQLExecute[conn,<span class="string">"select detail from log where name=\"群组消息\" and detail like \"群：123456789\""</span>]</span><br><span class="line">CloseSQLConnection[conn];</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Mathematica</tag>
        <tag>可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>MXNet</title>
    <url>/2018/07/27/MXNet/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc -->
<h1 id="MXNet基本指南"><a href="#MXNet基本指南" class="headerlink" title="MXNet基本指南"></a>MXNet基本指南</h1><ol>
<li><p>打开mxnet <code>source activate gluon # 注意Windows下不需要 source</code><br>退出环境 <code>source deactivate</code></p>
</li>
<li><p>GPU版本进入环境后如果用指定的卡可以 <code>CUDA_VISIBLE_DEVICES=2 python</code>，这样数据只能分配在一个GPU上</p>
</li>
<li>可以尝试将数据全部放进内存，如果是不规则数据集，numpy处理不了可以用python自带的数组处理</li>
</ol>
<a id="more"></a>
<ol start="3">
<li><code>CUDA_VISIBLE_DEVICES=2 jupyter notebook</code> ，进入jupyter后再导入mxnet，如果使用GPU训练，也只训练在一块卡上</li>
<li>升级 <code>pip install mxnet --upgrade</code>,安装每日更新版本可以加上<code>--pre</code>参数。<code>pip search mxnet</code>可以看到还有许多mxnet版本，比如mxnet-cu75、mxnet-cu80、mxnet-cu90等</li>
<li>可以不让MXNet占用过多显存，设置保留的百分数   <code>export MXNET_GPU_MEM_POOL_RESERVE=5</code></li>
</ol>
<h1 id="MXNet如何处理训练模式和测试模式"><a href="#MXNet如何处理训练模式和测试模式" class="headerlink" title="MXNet如何处理训练模式和测试模式"></a>MXNet如何处理训练模式和测试模式</h1><p>Gluon：若在调研网络时被<code>with autograd.record()</code>包裹，那么这时Gluon是训练模式。如果没有则是测试模式。可以参见在论坛的<a href="https://discuss.gluon.ai/t/topic/2032" target="_blank" rel="noopener">帖子</a>得到一些证明<br>MNNet的Module加载模型并运算默认是训练模式，测试模式需要指明mod.forward(Batch([x]),is_train=False)，MNNet的新版加载函数(v1.2.1以上)加载模型方式(<code>mx.gluon.nn.SymbolBlock.imports</code>)并运算默认是测试模式<br>C++：默认是测试模式 </p>
<h1 id="模型的导入导出"><a href="#模型的导入导出" class="headerlink" title="模型的导入导出"></a>模型的导入导出</h1><p>在1.3.0版本之前，我对于Hybrid模型采用export导出,LSTM这种无法Hybrid化的模型采用save_params的方式。<br>但是save_params方式一方面无法载入C++，一方面每次Python导入模型都要重新定义网络结构，很麻烦</p>
<p>今天才知道一个v1.2.1之后引入了有趣的导入函数<code>mx.gluon.nn.SymbolBlock.imports</code>，模型采用export导出后（1.3.0版本之后rnn、lstm等也可以顺利导出了），就有params和json两个文件，分别存储权重和网络结构，即可预测了</p>
<p>下面这个例子显示的结果一样，但是更简单便捷。<br>DNN的输入： (batch, 535) 输出：(batch, 43)<br>LSTM的输入：(duration, batch, 535) 输出：(duration, batch, 43)<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx </span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">data= mx.random.uniform(shape=(<span class="number">3</span>,<span class="number">535</span>))</span><br><span class="line"><span class="comment">##### New way #####</span></span><br><span class="line"><span class="comment"># import LSTM model</span></span><br><span class="line">net = gluon.nn.SymbolBlock.imports(<span class="string">'LSTM-symbol.json'</span>, [<span class="string">'data'</span>], param_file=<span class="string">'LSTM-0000.params'</span>, ctx=mx.cpu()) </span><br><span class="line"><span class="keyword">print</span> net(mx.nd.zeros(shape=(<span class="number">3</span>,<span class="number">1</span>,<span class="number">535</span>)))  <span class="comment">#100 can be other number</span></span><br><span class="line"><span class="comment"># import DNN model</span></span><br><span class="line">net = gluon.nn.SymbolBlock.imports(<span class="string">'DNN-symbol.json'</span>, [<span class="string">'data'</span>], param_file=<span class="string">'DNN-0000.params'</span>, ctx=mx.cpu()) </span><br><span class="line"><span class="keyword">print</span> net(data)  <span class="comment">#100 can be other number</span></span><br><span class="line"><span class="comment">##### Old way #####</span></span><br><span class="line"><span class="comment"># import DNN model</span></span><br><span class="line">sym = mx.symbol.load(<span class="string">'DNN-symbol.json'</span>) </span><br><span class="line">mod=mx.mod.Module(symbol=sym)</span><br><span class="line">mod.bind(data_shapes=[(<span class="string">'data'</span>,(<span class="number">1</span>,<span class="number">535</span>))])</span><br><span class="line">mod.load_params(<span class="string">'DNN-0000.params'</span>)</span><br><span class="line">Batch=namedtuple(<span class="string">'Batch'</span>,[<span class="string">'data'</span>])</span><br><span class="line">mod.forward(Batch([data]),is_train=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">print</span> mod.get_outputs()[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></p>
<h1 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h1><h2 id="expand-dims和flatten"><a href="#expand-dims和flatten" class="headerlink" title="expand_dims和flatten"></a>expand_dims和flatten</h2><p>data是(3,4)的形状，如果想变成(3,1,4),可以reshape，但是更好的办法是<code>.expand_dims(axis=1)</code>，再变回去也只要<code>.flatten()</code>就行，因为flatten函数会将输入的(d1,d2,d3…)维度变为(d1,d2<em>d3</em>…)</p>
<h2 id="nd-concatenate（被弃用-改为nd-concat）"><a href="#nd-concatenate（被弃用-改为nd-concat）" class="headerlink" title="nd.concatenate（被弃用,改为nd.concat）"></a>nd.concatenate（<strong>被弃用</strong>,改为nd.concat）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> img_list[<span class="number">0</span>].shape <span class="comment">#(1L, 3L, 64L, 64L) 每个都是这样的形状</span></span><br><span class="line"><span class="keyword">print</span> len(img_list) <span class="comment">#13233</span></span><br><span class="line">nd.concatenate(img_list).shape <span class="comment">#(13233L, 3L, 64L, 64L)</span></span><br><span class="line"></span><br><span class="line">train_data = mx.io.NDArrayIter(data=nd.concatenate(img_list),</span><br><span class="line">batch_size=<span class="number">64</span>)</span><br><span class="line">train_data.reset()</span><br><span class="line"><span class="keyword">for</span> batch <span class="keyword">in</span> train_data:</span><br><span class="line">    <span class="keyword">print</span> batch</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"><span class="comment">#输出DataBatch: data shapes: [(64L, 3L, 64L, 64L)] label shapes: []</span></span><br><span class="line"><span class="comment">#即每个batch是64张图</span></span><br></pre></td></tr></table></figure>
<p><code>nd.concatenate([history,temp],axis=1)</code>或者<code>nd.concat(history,temp,dim=1)</code>对应<code>F.concat(history, temp, dim=1)</code></p>
<h2 id="计算L2Loss"><a href="#计算L2Loss" class="headerlink" title="计算L2Loss"></a>计算L2Loss</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">loss1=gluon.loss.L2Loss(batch_axis=<span class="number">1</span>)</span><br><span class="line">a=mx.nd.random.uniform(<span class="number">0</span>, <span class="number">10</span>,shape=(<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>))</span><br><span class="line">b=mx.nd.random.uniform(<span class="number">0</span>, <span class="number">10</span>,shape=(<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>))</span><br><span class="line"><span class="keyword">print</span> loss1(a,b)</span><br><span class="line"><span class="keyword">print</span> np.mean(np.square((a[:,<span class="number">0</span>,:]-b[:,<span class="number">0</span>,:]).asnumpy()))/<span class="number">2</span></span><br><span class="line"><span class="keyword">print</span> np.mean(np.square((a[:,<span class="number">1</span>,:]-b[:,<span class="number">1</span>,:]).asnumpy()))/<span class="number">2</span></span><br></pre></td></tr></table></figure>
<img src="/2018/07/27/MXNet/1.png" class="">
<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="RNN"><a href="#RNN" class="headerlink" title="RNN"></a>RNN</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">layer = mx.gluon.rnn.RNN(<span class="number">100</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">#只知道每个time-steps的输出维度是100，有三个隐层，具体几个time-steps当前未知</span></span><br><span class="line">layer.initialize()</span><br><span class="line">input = mx.nd.random_uniform(shape=(<span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>))</span><br><span class="line"><span class="comment"># 默认TNC模式，方便取到跨batch的数据</span></span><br><span class="line"><span class="comment"># 代表time-steps是6，每个time-steps对应的输入维度是10，batch_size为8</span></span><br><span class="line"><span class="comment"># 6*10-&gt;6*100</span></span><br><span class="line"><span class="comment"># by default zeros are used as begin state</span></span><br><span class="line">output = layer(input)</span><br><span class="line"><span class="keyword">print</span> output.shape</span><br></pre></td></tr></table></figure>
<h2 id="Embedding"><a href="#Embedding" class="headerlink" title="Embedding"></a>Embedding</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">net.weight.data().asnumpy()</span><br></pre></td></tr></table></figure>
<h2 id="mask-RNN"><a href="#mask-RNN" class="headerlink" title="mask-RNN"></a>mask-RNN</h2><h3 id="重要的SequenceMask函数"><a href="#重要的SequenceMask函数" class="headerlink" title="重要的SequenceMask函数"></a>重要的SequenceMask函数</h3><p>第二个参数表示这个mini-batch内几个样本是真实的，这里代表两个真实<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = mx.nd.array([[[  <span class="number">1.</span>,   <span class="number">2.</span>,   <span class="number">3.</span>],</span><br><span class="line">                  [  <span class="number">4.</span>,   <span class="number">5.</span>,   <span class="number">6.</span>]],</span><br><span class="line">                 [[  <span class="number">7.</span>,   <span class="number">8.</span>,   <span class="number">9.</span>],</span><br><span class="line">                  [ <span class="number">10.</span>,  <span class="number">11.</span>,  <span class="number">12.</span>]],</span><br><span class="line">                 [[ <span class="number">13.</span>,  <span class="number">14.</span>,   <span class="number">15.</span>],</span><br><span class="line">                  [ <span class="number">16.</span>,  <span class="number">17.</span>,   <span class="number">18.</span>]]])</span><br><span class="line"><span class="comment">#x.shape=(3L,2L,3L)</span></span><br><span class="line">res=mx.nd.SequenceMask(x,mx.nd.array([<span class="number">2</span>,<span class="number">1</span>]), use_sequence_length=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">print</span> res</span><br><span class="line"><span class="comment">#表明第一个batch保留两个time-stseps，第二个batch保留1个time-stsep</span></span><br><span class="line"><span class="comment">#         得到</span></span><br><span class="line"><span class="comment">#   [[ 1.  2.  3.]</span></span><br><span class="line"><span class="comment">#    [ 4.  5.  6.]]</span></span><br><span class="line"><span class="comment">#   [[ 7.  8.  9.]</span></span><br><span class="line"><span class="comment">#    [ 0.  0.  0.]]</span></span><br><span class="line"><span class="comment">#   [[ 0.  0.  0.]</span></span><br><span class="line"><span class="comment">#    [ 0.  0.  0.]]]</span></span><br><span class="line"><span class="comment">#这样的话 res[:,0,:]取出的就是第一个batch加了mask的结果</span></span><br><span class="line"><span class="comment">#   [[ 1.  2.  3.]</span></span><br><span class="line"><span class="comment">#    [ 7.  8.  9.]</span></span><br><span class="line"><span class="comment">#    [ 0.  0.  0.]]</span></span><br><span class="line"><span class="comment">#        res[:,1,:]取出的就是第2个batch加了mask的结果</span></span><br><span class="line"><span class="comment">#   [[ 4.  5.  6.]</span></span><br><span class="line"><span class="comment">#    [ 0.  0.  0.]</span></span><br><span class="line"><span class="comment">#    [ 0.  0.  0.]]</span></span><br></pre></td></tr></table></figure></p>
<h3 id="首先解决带mask的loss"><a href="#首先解决带mask的loss" class="headerlink" title="首先解决带mask的loss"></a>首先解决带mask的loss</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"></span><br><span class="line">a=mx.random.normal(<span class="number">0</span>,<span class="number">1</span>,shape=(<span class="number">50</span>,<span class="number">128</span>,<span class="number">43</span>))</span><br><span class="line">b=mx.random.normal(<span class="number">0</span>,<span class="number">1</span>,shape=(<span class="number">50</span>,<span class="number">128</span>,<span class="number">43</span>))</span><br><span class="line">mask = mx.nd.array([<span class="number">10</span>]*<span class="number">128</span>) <span class="comment">#如果这里是[50]*128那么这两个loss的结果一样</span></span><br><span class="line"></span><br><span class="line">loss = mx.gluon.loss.L2Loss(batch_axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">L2LossMask</span><span class="params">(a,b,mask)</span>:</span></span><br><span class="line">    <span class="comment">#类似于gluon.loss.L2Loss(batch_axis=1)，但是可以用mask方式计算</span></span><br><span class="line">    maskloss=[]</span><br><span class="line">    maska = mx.nd.SequenceMask(a, mask, use_sequence_length=<span class="literal">True</span>)</span><br><span class="line">    maskb = mx.nd.SequenceMask(b, mask, use_sequence_length=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(a.shape[<span class="number">1</span>]):</span><br><span class="line">        index = int(mask[i].asscalar())</span><br><span class="line">        maskloss.append(mx.nd.sum((maska[:index,i,:]-maskb[:index,i,:])**<span class="number">2</span>)/(<span class="number">2</span>*index*a.shape[<span class="number">2</span>]))</span><br><span class="line">    <span class="keyword">return</span> mx.nd.concat(*maskloss, dim=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> L2LossMask(a,b,mask) <span class="comment"># right</span></span><br><span class="line"><span class="keyword">print</span> loss(a,b)            <span class="comment"># wrong</span></span><br></pre></td></tr></table></figure>
<h1 id="网络可视化"><a href="#网络可视化" class="headerlink" title="网络可视化"></a>网络可视化</h1><p>sym.list_outputs()<br>列出一个模型输出端口的名字</p>
<p>sym.list_arguments()<br>列出一个模型的输入端口的名字以及权重和偏置的名字</p>
<p>sym.tojson()<br>可以打印出网络结构</p>
<p>mod.get_outputs()<br>列出前馈的输出</p>
<p>显示网络结构 viz.plot_network<br>直接显示网络结构<code>mx.viz.plot_network(symbol=sym)</code></p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">graph = <span class="keyword">Import</span>[<span class="string">"ExampleData/mxnet_example2.json"</span>, &#123;<span class="string">"MXNet"</span>, <span class="string">"NodeGraphPlot"</span>&#125;]</span><br></pre></td></tr></table></figure>
<img src="/2018/07/27/MXNet/2.png" class="">
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">graph = <span class="keyword">Import</span>[<span class="string">"ExampleData/mxnet_example2.json"</span>, &#123;<span class="string">"MXNet"</span>, <span class="string">"NodeGraph"</span>&#125;]</span><br></pre></td></tr></table></figure>
<img src="/2018/07/27/MXNet/3.png" class="">
<h1 id="MXNet高阶应用"><a href="#MXNet高阶应用" class="headerlink" title="MXNet高阶应用"></a>MXNet高阶应用</h1><h2 id="MXNet与C-联动"><a href="#MXNet与C-联动" class="headerlink" title="MXNet与C++联动"></a>MXNet与C++联动</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>在python中训练MXNet模型</li>
<li>在python中导入模型，并进行预测</li>
<li>在C++中导入模型（在小例子上进行验证两个接口结果一致）</li>
<li>在C++项目中使用模型</li>
</ol>
<h3 id="配置C-平台"><a href="#配置C-平台" class="headerlink" title="配置C++平台"></a>配置C++平台</h3><ol>
<li>在C++/常规中添加“附加包含目录”，即<strong>工作目录</strong>，方便定位c_predict_api.h的位置。如果能成功#include的话，不设置也行<img src="/2018/07/27/MXNet/4.png" class=""></li>
<li>在链接器/输入中增加“附加依赖项”，即libmxnet.lib<img src="/2018/07/27/MXNet/5.png" class=""></li>
<li>修改“活动解决方案平台”为x64<img src="/2018/07/27/MXNet/6.png" class="">
<ol start="4">
<li>拷贝libmxnet.dll和libmxnet.lib和c_predict_api.h到工作目录<img src="/2018/07/27/MXNet/7.png" class=""></li>
<li>cpp文件加入#include &lt;c_predict_api.h&gt;</li>
</ol>
</li>
</ol>
<h3 id="C-使用指南"><a href="#C-使用指南" class="headerlink" title="C++使用指南"></a>C++使用指南</h3><ul>
<li>可运行单输入单输出 默认采用预测方式</li>
<li>可运行多输入多输出 默认采用预测方式</li>
<li>可运行多输入多输出 但是在输出端口可以只输出一个端口的数据</li>
<li>修改预测支持一个mini-batch只需要修改input_shape_data中的batch_size，并且将一个mini-batch的输入数据压平送进网络。在设置输入输出端口的vector的大小时候都要把它设置为一个batch数据长度的batch_size倍</li>
</ul>
<h2 id="利用HDF5文件做迭代器用于训练"><a href="#利用HDF5文件做迭代器用于训练" class="headerlink" title="利用HDF5文件做迭代器用于训练"></a>利用HDF5文件做迭代器用于训练</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd,gluon,autograd</span><br><span class="line"><span class="keyword">from</span> mxnet.gluon <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line"></span><br><span class="line">net = nn.Sequential()</span><br><span class="line"><span class="keyword">with</span> net.name_scope():</span><br><span class="line">    net.add(nn.Dense(<span class="number">32</span>,in_units=<span class="number">2</span>,activation=<span class="string">"tanh"</span>))</span><br><span class="line">    net.add(nn.Dense(<span class="number">1</span>))</span><br><span class="line">net.initialize()</span><br><span class="line"></span><br><span class="line"><span class="comment"># load data from file</span></span><br><span class="line"><span class="keyword">with</span> h5py.File(<span class="string">'test_data_SE.h5'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> h5file:</span><br><span class="line">    X_h5 = h5file[<span class="string">"Input"</span>]</span><br><span class="line">    y_h5 = h5file[<span class="string">"Output"</span>]</span><br><span class="line">    num_examples=X_h5.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    batch_size = <span class="number">512</span></span><br><span class="line">    epochs=<span class="number">10</span></span><br><span class="line">    dataiter = mx.io.NDArrayIter(X_h5, y_h5, batch_size=batch_size)</span><br><span class="line">    square_loss = gluon.loss.L2Loss()</span><br><span class="line">    trainer = gluon.Trainer(net.collect_params(), <span class="string">'adam'</span>, &#123;<span class="string">'learning_rate'</span>: <span class="number">0.3</span>&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(epochs):</span><br><span class="line">        total_loss = <span class="number">0</span></span><br><span class="line">        dataiter.reset()</span><br><span class="line">        <span class="keyword">for</span> iBatch, batch <span class="keyword">in</span> enumerate(dataiter):</span><br><span class="line">            <span class="keyword">with</span> autograd.record():</span><br><span class="line">                output = net(batch.data[<span class="number">0</span>])</span><br><span class="line">                loss = square_loss(output, batch.label[<span class="number">0</span>])</span><br><span class="line">            loss.backward()</span><br><span class="line">            trainer.step(batch_size)</span><br><span class="line">            total_loss += nd.sum(loss).asscalar()</span><br><span class="line">        print(<span class="string">"Epoch %d, average loss: %f"</span> % (epoch, total_loss/num_examples))</span><br><span class="line">        </span><br><span class="line">print(net(nd.array([[<span class="number">-1</span>,<span class="number">-0.9</span>]]))[<span class="number">0</span>].asnumpy())</span><br></pre></td></tr></table></figure>
<h2 id="单输入单输出Seq2Seq模型"><a href="#单输入单输出Seq2Seq模型" class="headerlink" title="单输入单输出Seq2Seq模型"></a>单输入单输出Seq2Seq模型</h2><h3 id="Python代码（HybridBlock版本）"><a href="#Python代码（HybridBlock版本）" class="headerlink" title="Python代码（HybridBlock版本）"></a>Python代码（HybridBlock版本）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"><span class="keyword">from</span> mxnet.gluon <span class="keyword">import</span> nn</span><br><span class="line">print(<span class="string">"mxnet version: "</span>+mx.__version__)</span><br><span class="line"></span><br><span class="line">mx.random.seed(<span class="number">1234</span>)  <span class="comment">#Getting the same result everytime</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_net</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># construct a MLP</span></span><br><span class="line">    net = nn.HybridSequential()</span><br><span class="line">    <span class="keyword">with</span> net.name_scope():</span><br><span class="line">        net.add(nn.Dense(<span class="number">5</span>, activation=<span class="string">"relu"</span>))</span><br><span class="line">        net.add(nn.Dense(<span class="number">2</span>))</span><br><span class="line">    <span class="comment"># initialize the parameters</span></span><br><span class="line">    net.collect_params().initialize()</span><br><span class="line">    <span class="keyword">return</span> net</span><br><span class="line"></span><br><span class="line"><span class="comment"># forward</span></span><br><span class="line">x = mx.nd.array([[<span class="number">0.1</span>,<span class="number">0.2</span>,<span class="number">0.3</span>]])</span><br><span class="line">net = get_net()</span><br><span class="line">net.hybridize()</span><br><span class="line">print(<span class="string">'=== net(x) ===&#123;&#125;'</span>.format(net(x)))</span><br><span class="line"></span><br><span class="line">net.export(<span class="string">'model'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##############   Re-importing the net  ##############</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line">sym = mx.symbol.load(<span class="string">'model-symbol.json'</span>) </span><br><span class="line">mod=mx.mod.Module(symbol=sym)</span><br><span class="line">mod.bind(data_shapes=[(<span class="string">'data'</span>,(<span class="number">1</span>,<span class="number">3</span>))])</span><br><span class="line">mod.load_params(<span class="string">'model-0000.params'</span>)</span><br><span class="line">Batch=namedtuple(<span class="string">'Batch'</span>,[<span class="string">'data'</span>])</span><br><span class="line">data=mx.nd.array([[<span class="number">0.1</span>,<span class="number">0.2</span>,<span class="number">0.3</span>]])</span><br><span class="line">mod.forward(Batch([data]),is_train=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">print</span> mod.get_outputs()</span><br></pre></td></tr></table></figure>
<h3 id="C-导入模型再预测-代码"><a href="#C-导入模型再预测-代码" class="headerlink" title="C++导入模型再预测 代码"></a>C++导入模型再预测 代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Path for c_predict_api</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mxnet/c_predict_api.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Read file to buffer</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BufferFile</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> file_path_;</span><br><span class="line">    <span class="keyword">int</span> length_;</span><br><span class="line">    <span class="keyword">char</span>* buffer_;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">BufferFile</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> file_path)</span></span></span><br><span class="line"><span class="function">        :<span class="title">file_path_</span><span class="params">(file_path)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="built_in">std</span>::ifstream <span class="title">ifs</span><span class="params">(file_path.c_str(), <span class="built_in">std</span>::ios::in | <span class="built_in">std</span>::ios::binary)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (!ifs) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Can't open the file. Please check "</span> &lt;&lt; file_path &lt;&lt; <span class="string">". \n"</span>;</span><br><span class="line">            length_ = <span class="number">0</span>;</span><br><span class="line">            buffer_ = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ifs.seekg(<span class="number">0</span>, <span class="built_in">std</span>::ios::end);</span><br><span class="line">        length_ = ifs.tellg();</span><br><span class="line">        ifs.seekg(<span class="number">0</span>, <span class="built_in">std</span>::ios::beg);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; file_path.c_str() &lt;&lt; <span class="string">" ... "</span> &lt;&lt; length_ &lt;&lt; <span class="string">" bytes\n"</span>;</span><br><span class="line"></span><br><span class="line">        buffer_ = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * length_];</span><br><span class="line">        ifs.read(buffer_, length_);</span><br><span class="line">        ifs.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GetLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">char</span>* <span class="title">GetBuffer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buffer_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~BufferFile() &#123;</span><br><span class="line">        <span class="keyword">if</span> (buffer_) &#123;</span><br><span class="line">            <span class="keyword">delete</span>[] buffer_;</span><br><span class="line">            buffer_ = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintOutputResult</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&amp; data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(data.size()); i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.8f\n"</span>, data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Models path for your model, you have to modify it</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> json_file = <span class="string">"./simple prediction model/model-symbol.json"</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> param_file = <span class="string">"./simple prediction model/model-0000.params"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">BufferFile <span class="title">json_data</span><span class="params">(json_file)</span></span>;</span><br><span class="line">    <span class="function">BufferFile <span class="title">param_data</span><span class="params">(param_file)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parameters</span></span><br><span class="line">    <span class="keyword">int</span> dev_type = <span class="number">1</span>;  <span class="comment">// 1: cpu, 2: gpu</span></span><br><span class="line">    <span class="keyword">int</span> dev_id = <span class="number">1</span>;  <span class="comment">// arbitrary.</span></span><br><span class="line">    mx_uint num_input_nodes = <span class="number">1</span>;  <span class="comment">// 1 for feedforward</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* input_key[<span class="number">1</span>] = &#123; <span class="string">"data"</span> &#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>** input_keys = input_key;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// input-dims</span></span><br><span class="line">    <span class="keyword">int</span> data_len = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> mx_uint input_shape_indptr[<span class="number">2</span>] = &#123; <span class="number">0</span>, <span class="number">2</span> &#125;;</span><br><span class="line">    <span class="keyword">const</span> mx_uint input_shape_data[<span class="number">2</span>] = &#123; <span class="number">1</span>,<span class="keyword">static_cast</span>&lt;mx_uint&gt;(data_len) &#125;;</span><br><span class="line">    PredictorHandle pred_hnd = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (json_data.GetLength() == <span class="number">0</span> || param_data.GetLength() == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create Predictor</span></span><br><span class="line">    assert(<span class="number">0</span>==MXPredCreate((<span class="keyword">const</span> <span class="keyword">char</span>*)json_data.GetBuffer(),</span><br><span class="line">        (<span class="keyword">const</span> <span class="keyword">char</span>*)param_data.GetBuffer(),</span><br><span class="line">        <span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(param_data.GetLength()),</span><br><span class="line">        dev_type,</span><br><span class="line">        dev_id,</span><br><span class="line">        num_input_nodes,</span><br><span class="line">        input_keys,</span><br><span class="line">        input_shape_indptr,</span><br><span class="line">        input_shape_data,</span><br><span class="line">        &amp;pred_hnd));</span><br><span class="line">    assert(pred_hnd);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;mx_float&gt; vector_data = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;mx_float&gt;(data_len);</span><br><span class="line">    mx_float* p = vector_data.data();</span><br><span class="line">    p[<span class="number">0</span>] = <span class="number">.1</span>;</span><br><span class="line">    p[<span class="number">1</span>] = <span class="number">.2</span>;</span><br><span class="line">    p[<span class="number">2</span>] = <span class="number">.3</span>;</span><br><span class="line"></span><br><span class="line">    MXPredSetInput(pred_hnd, <span class="string">"data"</span>, vector_data.data(), data_len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do Predict Forward</span></span><br><span class="line">    MXPredForward(pred_hnd);</span><br><span class="line"></span><br><span class="line">    mx_uint output_index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    mx_uint *shape = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//shape相当于1*3的向量</span></span><br><span class="line">    mx_uint shape_len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get Output Result</span></span><br><span class="line">    MXPredGetOutputShape(pred_hnd, output_index, &amp;shape, &amp;shape_len);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">size_t</span> size = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (mx_uint i = <span class="number">0</span>; i &lt; shape_len; ++i) size *= shape[i];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; <span class="title">data</span><span class="params">(size)</span></span>;</span><br><span class="line"></span><br><span class="line">    assert(<span class="number">0</span>==MXPredGetOutput(pred_hnd, output_index, &amp;(data[<span class="number">0</span>]), size));</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// Release Predictor</span></span><br><span class="line">    MXPredFree(pred_hnd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Print Output Data</span></span><br><span class="line">    PrintOutputResult(data);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="简单的多输入多输出网络"><a href="#简单的多输入多输出网络" class="headerlink" title="简单的多输入多输出网络"></a>简单的多输入多输出网络</h2><h3 id="Python代码（普通版本）"><a href="#Python代码（普通版本）" class="headerlink" title="Python代码（普通版本）"></a>Python代码（普通版本）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd</span><br><span class="line"><span class="keyword">from</span> mxnet.gluon <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HybridNet</span><span class="params">(nn.Block)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        super(HybridNet, self).__init__(**kwargs)</span><br><span class="line">        <span class="keyword">with</span> self.name_scope():</span><br><span class="line">            self.dense0 = nn.Dense(<span class="number">3</span>)</span><br><span class="line">            self.dense1 = nn.Dense(<span class="number">3</span>)</span><br><span class="line">            self.dense2 = nn.Dense(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self,x,y)</span>:</span></span><br><span class="line">        result1 = nd.relu(self.dense0(x))+nd.relu(self.dense1(y))</span><br><span class="line">        result2 = nd.relu(self.dense2(result1))</span><br><span class="line">        <span class="keyword">return</span> [result1,result2]</span><br><span class="line"></span><br><span class="line">net = HybridNet()</span><br><span class="line">net.initialize()</span><br><span class="line">x = nd.random.normal(shape=(<span class="number">4</span>,<span class="number">3</span>))</span><br><span class="line">y = nd.random.normal(shape=(<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line">res=net(x,y)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"output1:"</span>,res[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"output2:"</span>,res[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<h3 id="Python代码（HybridBlock版本）-1"><a href="#Python代码（HybridBlock版本）-1" class="headerlink" title="Python代码（HybridBlock版本）"></a>Python代码（HybridBlock版本）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd</span><br><span class="line"><span class="keyword">from</span> mxnet.gluon <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HybridNet</span><span class="params">(nn.HybridBlock)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        super(HybridNet, self).__init__(**kwargs)</span><br><span class="line">        <span class="keyword">with</span> self.name_scope():</span><br><span class="line">            self.dense0 = nn.Dense(<span class="number">3</span>)</span><br><span class="line">            self.dense1 = nn.Dense(<span class="number">3</span>)</span><br><span class="line">            self.dense2 = nn.Dense(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hybrid_forward</span><span class="params">(self, F,x,y)</span>:</span></span><br><span class="line">        result1 = F.relu(self.dense0(x))+F.relu(self.dense1(y))</span><br><span class="line">        result2 = F.relu(self.dense2(result1))</span><br><span class="line">        <span class="keyword">return</span> [result1,result2]</span><br><span class="line"></span><br><span class="line">net = HybridNet()</span><br><span class="line">net.initialize()</span><br><span class="line">net.hybridize()</span><br><span class="line">x = nd.random.normal(shape=(<span class="number">4</span>,<span class="number">3</span>))</span><br><span class="line">y = nd.random.normal(shape=(<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line">res=net(x,y)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"output1:"</span>,res[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"output2:"</span>,res[<span class="number">1</span>]</span><br><span class="line">net.export(<span class="string">'model'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"##############   Re-importing the net  ##############"</span>)</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line">sym = mx.symbol.load(<span class="string">'model-symbol.json'</span>) </span><br><span class="line">mod=mx.mod.Module(symbol=sym,data_names=[<span class="string">'data0'</span>,<span class="string">'data1'</span>])</span><br><span class="line">mod.bind(data_shapes=[(<span class="string">'data0'</span>,(<span class="number">1</span>,<span class="number">3</span>)),(<span class="string">'data1'</span>,(<span class="number">1</span>,<span class="number">5</span>))])</span><br><span class="line">mod.load_params(<span class="string">'model-0000.params'</span>)</span><br><span class="line">Batch=namedtuple(<span class="string">'Batch'</span>,[<span class="string">'data'</span>])</span><br><span class="line">mod.forward(Batch(data=[x,y]))</span><br><span class="line"><span class="keyword">print</span> mod.get_outputs()</span><br></pre></td></tr></table></figure>
<h3 id="C-导入模型再预测-代码-1"><a href="#C-导入模型再预测-代码-1" class="headerlink" title="C++导入模型再预测 代码"></a>C++导入模型再预测 代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mxnet/c_predict_api.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Read file to buffer</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BufferFile</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> file_path_;</span><br><span class="line">    <span class="keyword">int</span> length_;</span><br><span class="line">    <span class="keyword">char</span>* buffer_;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">BufferFile</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> file_path)</span></span></span><br><span class="line"><span class="function">        :<span class="title">file_path_</span><span class="params">(file_path)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="built_in">std</span>::ifstream <span class="title">ifs</span><span class="params">(file_path.c_str(), <span class="built_in">std</span>::ios::in | <span class="built_in">std</span>::ios::binary)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (!ifs) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Can't open the file. Please check "</span> &lt;&lt; file_path &lt;&lt; <span class="string">". \n"</span>;</span><br><span class="line">            length_ = <span class="number">0</span>;</span><br><span class="line">            buffer_ = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ifs.seekg(<span class="number">0</span>, <span class="built_in">std</span>::ios::end);</span><br><span class="line">        length_ = ifs.tellg();</span><br><span class="line">        ifs.seekg(<span class="number">0</span>, <span class="built_in">std</span>::ios::beg);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; file_path.c_str() &lt;&lt; <span class="string">" ... "</span> &lt;&lt; length_ &lt;&lt; <span class="string">" bytes\n"</span>;</span><br><span class="line"></span><br><span class="line">        buffer_ = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * length_];</span><br><span class="line">        ifs.read(buffer_, length_);</span><br><span class="line">        ifs.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GetLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">char</span>* <span class="title">GetBuffer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buffer_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~BufferFile() &#123;</span><br><span class="line">        <span class="keyword">if</span> (buffer_) &#123;</span><br><span class="line">            <span class="keyword">delete</span>[] buffer_;</span><br><span class="line">            buffer_ = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintOutputResult</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&amp; data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(data.size()); i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.8f\n"</span>, data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Models path for your model, you have to modify it</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> json_file  = <span class="string">"./model-symbol.json"</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> param_file = <span class="string">"./model-0000.params"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">BufferFile <span class="title">json_data</span><span class="params">(json_file)</span></span>;</span><br><span class="line">    <span class="function">BufferFile <span class="title">param_data</span><span class="params">(param_file)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parameters</span></span><br><span class="line">    <span class="keyword">int</span> dev_type = <span class="number">1</span>;  <span class="comment">// 1: cpu, 2: gpu</span></span><br><span class="line">    <span class="keyword">int</span> dev_id = <span class="number">1</span>;  <span class="comment">// arbitrary.</span></span><br><span class="line">    mx_uint num_input_nodes = <span class="number">2</span>;</span><br><span class="line">    mx_uint num_output_nodes = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* input_key[<span class="number">2</span>] = &#123; <span class="string">"data0"</span> , <span class="string">"data1"</span> &#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>** input_keys = input_key;</span><br><span class="line">    <span class="comment">//output_key name maybe should modify</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* output_key[<span class="number">2</span>] = &#123; <span class="string">"hybridnet0__plus0"</span> , <span class="string">"hybridnet0_relu2"</span> &#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>** output_keys = output_key;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// input-dims</span></span><br><span class="line">    <span class="keyword">int</span> data0_len = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> data1_len = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">const</span> mx_uint input_shape_indptr[<span class="number">3</span>] = &#123; <span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span> &#125;;</span><br><span class="line">    <span class="keyword">const</span> mx_uint input_shape_data[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="keyword">static_cast</span>&lt;mx_uint&gt;(data0_len),<span class="number">1</span>,<span class="keyword">static_cast</span>&lt;mx_uint&gt;(data1_len) &#125;;</span><br><span class="line">    PredictorHandle pred_hnd = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (json_data.GetLength() == <span class="number">0</span> || param_data.GetLength() == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create Predictor</span></span><br><span class="line">    assert(<span class="number">0</span> == MXPredCreatePartialOut(</span><br><span class="line">        (<span class="keyword">const</span> <span class="keyword">char</span>*)json_data.GetBuffer(),</span><br><span class="line">        (<span class="keyword">const</span> <span class="keyword">char</span>*)param_data.GetBuffer(),</span><br><span class="line">        <span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(param_data.GetLength()),</span><br><span class="line">        dev_type,</span><br><span class="line">        dev_id,</span><br><span class="line">        num_input_nodes,</span><br><span class="line">        input_keys,</span><br><span class="line">        input_shape_indptr,</span><br><span class="line">        input_shape_data,</span><br><span class="line">        num_output_nodes,</span><br><span class="line">        output_keys,</span><br><span class="line">        &amp;pred_hnd));</span><br><span class="line">    assert(pred_hnd);    <span class="comment">//ERROR HERE</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;mx_float&gt; vector_data0 = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;mx_float&gt;(data0_len);</span><br><span class="line">    mx_float* p0 = vector_data0.data();</span><br><span class="line">    p0[<span class="number">0</span>] = <span class="number">1</span>;p0[<span class="number">1</span>] = <span class="number">2</span>;p0[<span class="number">2</span>] = <span class="number">5</span>;</span><br><span class="line">    MXPredSetInput(pred_hnd, <span class="string">"data0"</span>, vector_data0.data(), data0_len);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;mx_float&gt; vector_data1 = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;mx_float&gt;(data1_len);</span><br><span class="line">    mx_float* p1 = vector_data1.data();</span><br><span class="line">    p1[<span class="number">0</span>] = <span class="number">5</span>; p1[<span class="number">1</span>] = <span class="number">3</span>; p1[<span class="number">2</span>] = <span class="number">1</span>; p1[<span class="number">3</span>] = <span class="number">4</span>; p1[<span class="number">4</span>] = <span class="number">5</span>;</span><br><span class="line">    MXPredSetInput(pred_hnd, <span class="string">"data1"</span>, vector_data1.data(), data1_len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do Predict Forward</span></span><br><span class="line">    MXPredForward(pred_hnd);</span><br><span class="line"></span><br><span class="line">    mx_uint output0_index = <span class="number">0</span>;</span><br><span class="line">    mx_uint *shape0 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//shape相当于1*3的向量</span></span><br><span class="line">    mx_uint shape0_len;</span><br><span class="line">    <span class="comment">// Get Output Result</span></span><br><span class="line">    MXPredGetOutputShape(pred_hnd, output0_index, &amp;shape0, &amp;shape0_len);</span><br><span class="line">    <span class="keyword">size_t</span> size0 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (mx_uint i = <span class="number">0</span>; i &lt; shape0_len; ++i) size0 *= shape0[i];</span><br><span class="line"></span><br><span class="line">    mx_uint output1_index = <span class="number">1</span>;</span><br><span class="line">    mx_uint *shape1 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//shape相当于1*5的向量</span></span><br><span class="line">    mx_uint shape1_len;</span><br><span class="line">    <span class="comment">// Get Output Result</span></span><br><span class="line">    MXPredGetOutputShape(pred_hnd, output1_index, &amp;shape1, &amp;shape1_len);</span><br><span class="line">    <span class="keyword">size_t</span> size1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (mx_uint i = <span class="number">0</span>; i &lt; shape1_len; ++i) size1 *= shape1[i];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; <span class="title">data0</span><span class="params">(size0)</span></span>;</span><br><span class="line">    assert(<span class="number">0</span> == MXPredGetOutput(pred_hnd, output0_index, &amp;(data0[<span class="number">0</span>]), size0));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; <span class="title">data1</span><span class="params">(size1)</span></span>;</span><br><span class="line">    assert(<span class="number">0</span> == MXPredGetOutput(pred_hnd, output1_index, &amp;(data1[<span class="number">0</span>]), size1));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Print Output Data</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"output0:\n"</span>);</span><br><span class="line">    PrintOutputResult(data0);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"output1:\n"</span>);</span><br><span class="line">    PrintOutputResult(data1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Release Predictor</span></span><br><span class="line">    MXPredFree(pred_hnd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2018/07/27/MXNet/C++.png" class="">
<h2 id="训练模板"><a href="#训练模板" class="headerlink" title="训练模板"></a>训练模板</h2><h3 id="单输入单输出"><a href="#单输入单输出" class="headerlink" title="单输入单输出"></a>单输入单输出</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"><span class="keyword">from</span> mxnet.gluon <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd,gluon,autograd,gpu</span><br><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">ctx = gpu()</span><br><span class="line">net = nn.HybridSequential()</span><br><span class="line"><span class="keyword">with</span> net.name_scope():</span><br><span class="line">    net.add(nn.Dense(<span class="number">128</span>, activation=<span class="string">"relu"</span>))</span><br><span class="line">    net.add(nn.Dropout(<span class="number">0.1</span>))</span><br><span class="line">    net.add(nn.Dense(<span class="number">128</span>, activation=<span class="string">"relu"</span>))</span><br><span class="line">    net.add(nn.Dropout(<span class="number">0.1</span>))</span><br><span class="line">    net.add(nn.Dense(<span class="number">128</span>, activation=<span class="string">"relu"</span>))</span><br><span class="line">    net.add(nn.Dropout(<span class="number">0.1</span>))</span><br><span class="line">    net.add(nn.Dense(<span class="number">32</span>))</span><br><span class="line">net.initialize(ctx=ctx)</span><br><span class="line">net.hybridize()</span><br><span class="line"></span><br><span class="line">val_file = h5py.File(<span class="string">'../data/TargetModel/validation_normalization_Target.h5'</span>, <span class="string">'r'</span>)</span><br><span class="line">X_val_h5 = nd.array(val_file[<span class="string">"Input"</span>][:]).as_in_context(ctx)</span><br><span class="line">y_val_h5 = nd.array(val_file[<span class="string">"Output"</span>][:]).as_in_context(ctx)</span><br><span class="line">val_file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># load data from file</span></span><br><span class="line"><span class="keyword">with</span> h5py.File(<span class="string">'../data/TargetModel/training_normalization_Target.h5'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> h5file:</span><br><span class="line">    X_h5 = h5file[<span class="string">"Input"</span>]</span><br><span class="line">    y_h5 = h5file[<span class="string">"Output"</span>]</span><br><span class="line">    </span><br><span class="line">    num_examples=X_h5.shape[<span class="number">0</span>]</span><br><span class="line">    min_val_loss=float(<span class="string">"inf"</span>) </span><br><span class="line">    </span><br><span class="line">    epochs=<span class="number">100</span></span><br><span class="line">    batch_size = <span class="number">128</span></span><br><span class="line">    dataiter = mx.io.NDArrayIter(X_h5, y_h5, batch_size=batch_size)</span><br><span class="line">    square_loss = gluon.loss.L2Loss()</span><br><span class="line">    trainer = gluon.Trainer(net.collect_params(), <span class="string">'sgd'</span>, &#123;<span class="string">'learning_rate'</span>: <span class="number">0.1</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(epochs):</span><br><span class="line">        total_loss = <span class="number">0</span></span><br><span class="line">        dataiter.reset()</span><br><span class="line">        <span class="keyword">for</span> iBatch, batch <span class="keyword">in</span> enumerate(dataiter):</span><br><span class="line">            <span class="keyword">with</span> autograd.record():</span><br><span class="line">                output = net(batch.data[<span class="number">0</span>].as_in_context(ctx))</span><br><span class="line">                loss = square_loss(output, batch.label[<span class="number">0</span>].as_in_context(ctx))</span><br><span class="line">            loss.backward()</span><br><span class="line">            trainer.step(batch_size)</span><br><span class="line">            total_loss += nd.sum(loss).asscalar()</span><br><span class="line">            <span class="keyword">if</span> iBatch%<span class="number">100</span>==<span class="number">0</span>:</span><br><span class="line">                print(<span class="string">"Epoch %d, Batch: %d/%d, average loss: %f"</span>%(epoch,iBatch,num_examples/batch_size,nd.mean(loss).asscalar()))</span><br><span class="line">        print(<span class="string">"Epoch %d finished, average loss of training set: %f"</span> % (epoch, total_loss/num_examples))</span><br><span class="line">        val_loss = nd.mean(square_loss(net(X_val_h5), y_val_h5)).asscalar()</span><br><span class="line">        print(<span class="string">"\n-----loss of validation set: %f-----\n"</span> % val_loss)</span><br><span class="line">        <span class="keyword">if</span>(val_loss &lt; min_val_loss):</span><br><span class="line">            min_val_loss=val_loss</span><br><span class="line">            net.export(<span class="string">'TargetModel'</span>)</span><br><span class="line">            print(<span class="string">"---validation set got a smaller loss---\n---------------Save net----------------\n"</span>)</span><br></pre></td></tr></table></figure>
<h4 id="导入测试"><a href="#导入测试" class="headerlink" title="导入测试"></a>导入测试</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"><span class="keyword">from</span> mxnet.gluon <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line">sym = mx.symbol.load(<span class="string">'TargetModel-symbol.json'</span>) </span><br><span class="line">mod=mx.mod.Module(symbol=sym)</span><br><span class="line">mod.bind(data_shapes=[(<span class="string">'data'</span>,(<span class="number">1</span>,<span class="number">1</span>+<span class="number">523</span>))])</span><br><span class="line">mod.load_params(<span class="string">'TargetModel-0000.params'</span>)</span><br><span class="line">Batch=namedtuple(<span class="string">'Batch'</span>,[<span class="string">'data'</span>])</span><br><span class="line">data=mx.nd.array([range(<span class="number">1</span>+<span class="number">523</span>)])</span><br><span class="line">mod.forward(Batch([data]),is_train=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">print</span> mod.get_outputs()</span><br></pre></td></tr></table></figure>
<h3 id="多输入多输出"><a href="#多输入多输出" class="headerlink" title="多输入多输出"></a>多输入多输出</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"><span class="keyword">from</span> mxnet.gluon <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd,gluon,autograd,gpu</span><br><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">ctx=gpu()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JoinModel</span><span class="params">(nn.HybridBlock)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        super(JoinModel, self).__init__(**kwargs)</span><br><span class="line">        self.encodeNet=nn.HybridSequential()</span><br><span class="line">        self.decodeNet=nn.HybridSequential()</span><br><span class="line">        self.fc=nn.HybridSequential()</span><br><span class="line">        <span class="keyword">with</span> self.name_scope():</span><br><span class="line">            self.encodeNet.add(nn.Dense(<span class="number">128</span>,activation=<span class="string">"relu"</span>))</span><br><span class="line">            self.encodeNet.add(nn.Dense(<span class="number">128</span>))</span><br><span class="line">            self.decodeNet.add(nn.Dense(<span class="number">128</span>,activation=<span class="string">"relu"</span>))</span><br><span class="line">            self.decodeNet.add(nn.Dense(<span class="number">32</span>))</span><br><span class="line">            self.fc.add(nn.Dense(<span class="number">256</span>,activation=<span class="string">"relu"</span>))</span><br><span class="line">            self.fc.add(nn.Dropout(<span class="number">0.1</span>))</span><br><span class="line">            self.fc.add(nn.Dense(<span class="number">256</span>,activation=<span class="string">"relu"</span>))</span><br><span class="line">            self.fc.add(nn.Dropout(<span class="number">0.1</span>))</span><br><span class="line">            self.fc.add(nn.Dense(<span class="number">256</span>,activation=<span class="string">"relu"</span>))</span><br><span class="line">            self.fc.add(nn.Dropout(<span class="number">0.1</span>))</span><br><span class="line">            self.fc.add(nn.Dense(<span class="number">32</span>))</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hybrid_forward</span><span class="params">(self,F,text,history)</span>:</span></span><br><span class="line">        temp = self.encodeNet(text)</span><br><span class="line">        result1 = self.decodeNet(temp)</span><br><span class="line">        result2 = self.fc(F.concat(history, temp, dim=<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> [result1,result2]</span><br><span class="line"></span><br><span class="line">net = JoinModel()</span><br><span class="line">net.initialize(ctx=ctx)</span><br><span class="line">net.hybridize()</span><br><span class="line"></span><br><span class="line">val_file = h5py.File(<span class="string">'../data/JoinModel/validation_normalization_Join.h5'</span>, <span class="string">'r'</span>)</span><br><span class="line">text_val_h5 = nd.array(val_file[<span class="string">"Input1"</span>][:]).as_in_context(ctx)</span><br><span class="line">history_val_h5 = nd.array(val_file[<span class="string">"Input2"</span>][:]).as_in_context(ctx)</span><br><span class="line">UnitVec_val_h5 = nd.array(val_file[<span class="string">"Output1"</span>][:]).as_in_context(ctx)</span><br><span class="line">val_file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># load data from file</span></span><br><span class="line"><span class="keyword">with</span> h5py.File(<span class="string">'../data/JoinModel/training_normalization_Join.h5'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> h5file:</span><br><span class="line">    text_h5 = h5file[<span class="string">"Input1"</span>]</span><br><span class="line">    history_h5 = h5file[<span class="string">"Input2"</span>]</span><br><span class="line">    UnitVec_h5 = h5file[<span class="string">"Output1"</span>]</span><br><span class="line">    </span><br><span class="line">    num_examples=text_h5.shape[<span class="number">0</span>]</span><br><span class="line">    min_val_loss=float(<span class="string">"inf"</span>) </span><br><span class="line">    </span><br><span class="line">    epochs=<span class="number">100</span></span><br><span class="line">    batch_size = <span class="number">128</span></span><br><span class="line">    dataiter = mx.io.NDArrayIter([text_h5,history_h5], UnitVec_h5, batch_size=batch_size)</span><br><span class="line">    square_loss = gluon.loss.L2Loss()</span><br><span class="line">    trainer = gluon.Trainer(net.collect_params(), <span class="string">'sgd'</span>, &#123;<span class="string">'learning_rate'</span>: <span class="number">0.1</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(epochs):</span><br><span class="line">        total_loss = <span class="number">0</span></span><br><span class="line">        dataiter.reset()</span><br><span class="line">        <span class="keyword">for</span> iBatch, batch <span class="keyword">in</span> enumerate(dataiter):</span><br><span class="line">            <span class="keyword">with</span> autograd.record():</span><br><span class="line">                output = net(batch.data[<span class="number">0</span>].as_in_context(ctx),batch.data[<span class="number">1</span>].as_in_context(ctx))</span><br><span class="line">                loss1 = square_loss(output[<span class="number">0</span>], batch.label[<span class="number">0</span>].as_in_context(ctx))</span><br><span class="line">                loss2 = square_loss(output[<span class="number">1</span>], batch.label[<span class="number">0</span>].as_in_context(ctx))</span><br><span class="line">                loss = loss1+loss2</span><br><span class="line">            loss.backward()</span><br><span class="line">            trainer.step(batch_size)</span><br><span class="line">            total_loss += nd.sum(loss).asscalar()</span><br><span class="line">            <span class="keyword">if</span> iBatch % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">"Epoch %d, Batch: %d/%d, average loss: %f"</span>%(epoch,iBatch,num_examples/batch_size,nd.mean(loss).asscalar()))</span><br><span class="line">        print(<span class="string">"Epoch %d finished, average loss of training set: %f"</span> % (epoch, total_loss/num_examples))</span><br><span class="line">        res = net(text_val_h5,history_val_h5)</span><br><span class="line">        val_loss = nd.mean(square_loss(res[<span class="number">0</span>],UnitVec_val_h5)+square_loss(res[<span class="number">1</span>],UnitVec_val_h5)).asscalar()</span><br><span class="line">        print(<span class="string">"\n-----loss of validation set: %f-----\n"</span> % val_loss)</span><br><span class="line">        <span class="keyword">if</span>(val_loss &lt; min_val_loss):</span><br><span class="line">            min_val_loss=val_loss</span><br><span class="line">            net.export(<span class="string">'JoinModel'</span>)</span><br><span class="line">            print(<span class="string">"---validation set got a smaller loss---\n---------------Save net----------------\n"</span>)</span><br></pre></td></tr></table></figure>
<h4 id="导入测试-1"><a href="#导入测试-1" class="headerlink" title="导入测试"></a>导入测试</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">##############   Re-importing the net  ##############</span></span><br><span class="line">print(<span class="string">"##############   Re-importing the net  ##############"</span>)</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line">sym = mx.symbol.load(<span class="string">'JoinModel-symbol.json'</span>) </span><br><span class="line">mod=mx.mod.Module(symbol=sym,data_names=[<span class="string">'data0'</span>,<span class="string">'data1'</span>])</span><br><span class="line">mod.bind(data_shapes=[(<span class="string">'data0'</span>,(<span class="number">1</span>,<span class="number">524</span>)),(<span class="string">'data1'</span>,(<span class="number">1</span>,<span class="number">128</span>))])</span><br><span class="line">mod.load_params(<span class="string">'JoinModel-0000.params'</span>)</span><br><span class="line">Batch=namedtuple(<span class="string">'Batch'</span>,[<span class="string">'data'</span>])</span><br><span class="line">x = nd.random.normal(shape=(<span class="number">1</span>,<span class="number">524</span>))</span><br><span class="line">y = nd.random.normal(shape=(<span class="number">1</span>,<span class="number">128</span>))</span><br><span class="line">mod.forward(Batch(data=[x,y]),is_train=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">print</span> mod.get_outputs()</span><br><span class="line"><span class="keyword">print</span> sym.list_outputs()</span><br></pre></td></tr></table></figure>
<h1 id="MXNet源码阅读"><a href="#MXNet源码阅读" class="headerlink" title="MXNet源码阅读"></a>MXNet源码阅读</h1><h2 id="io-py"><a href="#io-py" class="headerlink" title="io.py"></a>io.py</h2><p>位于E:\Anaconda\envs\gluon\Lib\site-packages\mxnet<br>阅读如何自定义迭代器</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Python</tag>
        <tag>MXNet</tag>
      </tags>
  </entry>
  <entry>
    <title>Python</title>
    <url>/2018/07/26/Python/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc -->
<h1 id="使用中文"><a href="#使用中文" class="headerlink" title="使用中文"></a>使用中文</h1><p><code># -*- coding: utf-8 -*-</code> 告诉Python解释器，用UTF-8编码读取源代码<br><code>print u&#39;中文&#39;</code>  u表示Unicode字符串</p>
<h1 id="Python说明"><a href="#Python说明" class="headerlink" title="Python说明"></a>Python说明</h1><p>Python代码的缩进规则说：最好使用4个空格<br><code>ipython --pylab</code> 导入了numpy(np) 和 matplotlib<br><a id="more"></a></p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="预备基础知识"><a href="#预备基础知识" class="headerlink" title="预备基础知识"></a>预备基础知识</h2><ol>
<li><p>若自定义函数没有return，函数执行完毕后返回None</p>
</li>
<li><p>保持字典顺序不变使用OrderedDict</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"><span class="keyword">print</span> dict([(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">2</span>), (<span class="string">'c'</span>, <span class="number">3</span>)]) <span class="comment">#Random</span></span><br><span class="line"><span class="keyword">print</span> OrderedDict([(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">2</span>), (<span class="string">'c'</span>, <span class="number">3</span>)]) <span class="comment">#Ordered</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>命令行参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>: </span><br><span class="line">    <span class="keyword">print</span> len(sys.argv) </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sys.argv: </span><br><span class="line">        <span class="keyword">print</span> i,</span><br><span class="line"><span class="comment">#save as test.py</span></span><br><span class="line"><span class="comment">#python test.py </span></span><br><span class="line"><span class="comment">#result: 1 2 3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>用r’…’来抑制转义<br>比如<code>path = r&#39;C:\xzhou\Desktop&#39;</code></p>
</li>
<li><p>关于布尔运算<br>Python把0、空字符串’’和None看成 False<br>其他数值和非空字符串都看成 True<br>不过不要完全依赖这一点</p>
</li>
<li><p>List</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L=[<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]  <span class="comment"># 创建List</span></span><br><span class="line"><span class="comment">#可用索引 L [0], L [2], L [-1], L [-3], L [0:3]</span></span><br><span class="line">L [<span class="number">-1</span>::<span class="number">-1</span>]   <span class="comment">#得到 L 的逆序['Tracy', 'Bob', 'Michael'] </span></span><br><span class="line">L [::<span class="number">-1</span>]     <span class="comment">#得到 L 的逆序['Tracy', 'Bob', 'Michael'] </span></span><br><span class="line">L [<span class="number">-1</span>:<span class="number">0</span>:<span class="number">-1</span>]  <span class="comment">#得到['Tracy', 'Bob']</span></span><br><span class="line">L .append(<span class="string">'Paul'</span>)  <span class="comment">#改变了L</span></span><br><span class="line">L .insert(<span class="number">0</span>, <span class="string">'Paul'</span>)  <span class="comment"># 改变了L  L 现在为['Paul', 'Michael', 'Bob', 'Tracy', 'Paul']</span></span><br><span class="line">L .pop()  <span class="comment">#返回'Paul' L 现在为['Paul', 'Michael', 'Bob', 'Tracy'] </span></span><br><span class="line">L .pop(<span class="number">0</span>) <span class="comment">#返回'Bob' L 现在为 ['Michael', 'Bob', 'Tracy']</span></span><br><span class="line">L [<span class="number">2</span>] = <span class="string">'Paul'</span> <span class="comment"># L 现在为['Michael', 'Bob', 'Paul']</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>迭代列表:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=range(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> iter(a): </span><br><span class="line">   <span class="keyword">print</span> i</span><br></pre></td></tr></table></figure></p>
<p>列表的拼接（str,tuple也可以这样,dict和set不行）:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = []</span><br><span class="line">b = [<span class="number">1</span>,]</span><br><span class="line">c = [<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">print</span> a+b+c <span class="comment">#[1,2,3]</span></span><br><span class="line"><span class="keyword">print</span> c * <span class="number">2</span> <span class="comment">#[2,3,2,3]</span></span><br><span class="line"><span class="keyword">print</span> []+[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]+[[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>]] <span class="comment">#[[1,2],[3,4],[5,6],[7,8]]</span></span><br></pre></td></tr></table></figure></p>
<ol start="7">
<li>Tuple<br>Tuple没有append()方法，也没有insert()和pop()方法。<br>获取Tuple元素的方式和List一样，可以使用 t[0]，t[-1]等索引方式访问元素，但是不能赋值成别的元素</li>
</ol>
<p>Tuple和List一样，可以包含 0 个、1个和任意多个元素<br>t = ()对应s=[]<br>t=(1,)对应s=[1], 为了防止歧义而不使用(1)</p>
<p>不过当Tuple包括非Tuple类型时可改变<br>如t = (‘a’, ‘b’, [‘A’, ‘B’])可改变[‘A’, ‘B’]内的元素<br>但t = (‘a’, ‘b’, (‘A’, ‘B’))不可以</p>
<ol start="8">
<li><p>dict<br>len(d)得到字典长度<br>d.get(‘Bart’)得到’Bart’对应的键，不存在返回None</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">'a'</span>:[<span class="number">1</span>,<span class="number">2</span>],<span class="string">'b'</span>:[<span class="string">'hello'</span>,<span class="string">'xiao'</span>,<span class="number">3</span>]&#125;</span><br><span class="line"><span class="keyword">print</span> d.items()</span><br><span class="line"><span class="comment"># 遍历键</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d:</span><br><span class="line">    <span class="keyword">print</span> key,</span><br><span class="line"><span class="comment"># 遍历键值</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> d.items(): <span class="comment">#创建迭代器，效率更高</span></span><br><span class="line">    <span class="keyword">print</span> key,value</span><br><span class="line"><span class="comment"># 更快的遍历键值，也省内存</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> d.iteritems(): <span class="comment">#创建迭代器，效率更高</span></span><br><span class="line">    <span class="keyword">print</span> key,value</span><br><span class="line"><span class="comment"># 遍历值</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> d.values():</span><br><span class="line">    <span class="keyword">print</span> v,</span><br><span class="line"><span class="comment"># 更快速的遍历值，也省内存</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> d.itervalues(): </span><br><span class="line">    <span class="keyword">print</span> v,</span><br></pre></td></tr></table></figure>
<p>另外值得注意的是key只能选择不能被改变的数据类型如整数、字符串、Tuple，不能用List</p>
</li>
<li><p>set类型<br>因为强调的事并集，所以排序无规律也不支持索引<br>支持 len(s), ‘A’ in s 等</p>
</li>
</ol>
<p>set的内部结构和dict很像，唯一区别是不存储value，因此，判断一个元素是否在set中速度很快。<br>set存储的元素和dict的key类似，必须是不变对象，因此，任何可变对象是不能放入set中的。<br>最后，set存储的元素也是没有顺序的。<br>适用场合：让用户输入星期一至星期日的某天，判断用户的输入是否是一个有效的星期？</p>
<p>更新set: 增加元素是s.add(‘A’), 删除是s.remove(‘A’), 删除的元素不在set中，remove会报错</p>
<ol start="10">
<li><p>定义可变参数函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(*args)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> args</span><br><span class="line">fn() <span class="comment">#() </span></span><br><span class="line">fn(<span class="string">'a'</span>) <span class="comment">#('a',)</span></span><br><span class="line">fn(<span class="string">'a'</span>, <span class="string">'b'</span>) <span class="comment">#('a', 'b')</span></span><br><span class="line">fn([<span class="string">'a'</span>, <span class="string">'b'</span>]) <span class="comment">#(['a', 'b'],)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>enumerate 很有用的函数，用于索引、迭代</p>
</li>
<li><p>zip()函数<br>可以把两个 list 变成一个 list，类似于转置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">zip([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>], [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>])</span><br><span class="line"><span class="comment"># [(10, 'A'), (20, 'B'), (30, 'C')]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>列表生成式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">3</span>)]   <span class="comment">#[1, 4, 9]</span></span><br><span class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]  <span class="comment">#[4, 16, 36]</span></span><br><span class="line">[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'123'</span>]  <span class="comment">#['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1', 'C2', 'C3']</span></span><br><span class="line">&#123;phone:i <span class="keyword">for</span> i, phone <span class="keyword">in</span> enumerate(set(y))&#125; 搭配字典哦😯</span><br></pre></td></tr></table></figure>
</li>
<li><p>变量可以指向函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">len=abs</span><br><span class="line"><span class="comment">#len([1,2,3]) 报错</span></span><br><span class="line"><span class="keyword">print</span> len(<span class="number">-5</span>)      <span class="comment">#5  说明函数名就是指向函数的变量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(a,b,f)</span>:</span>      <span class="comment">#高阶函数（可以接受函数的函数）</span></span><br><span class="line">    <span class="keyword">return</span> f(a)+f(b)</span><br><span class="line"><span class="keyword">print</span> g(<span class="number">-3</span>,<span class="number">6</span>,abs)  <span class="comment">#9</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>map函数（同Mathematica的Map）：<br><code>map(lambda i:i**2, [1, 2, 3]) #得到[1, 4, 9]</code></p>
</li>
<li>reduce函数（类似Mathematica的Fold）：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">reduce(<span class="keyword">lambda</span> i,j:i+j, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="number">10</span>)  <span class="comment">#16 Fold[#1 + #2 &amp;, 10, &#123;1, 2, 3&#125;]</span></span><br><span class="line">reduce(<span class="keyword">lambda</span> i,j:i+j, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])     <span class="comment">#6  Fold[#1 + #2 &amp;, &#123;1, 2, 3&#125;]</span></span><br></pre></td></tr></table></figure></li>
<li><p>filter函数（类似Mathematica的Select ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filter(lambda i:i%2&#x3D;&#x3D;0, range(10)) #[0, 2, 4, 6, 8] </span><br><span class="line">filter(lambda str:str and str.strip()&gt;0, [&#39;test&#39;, None, &#39;&#39;, &#39;str&#39;, &#39; &#39;, ...: &#39;END&#39;])</span><br><span class="line">#输出[&#39;test&#39;, &#39;str&#39;, &#39;END&#39;]</span><br></pre></td></tr></table></figure>
</li>
<li><p>sorted函数可以用来排序:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sorted([<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">9</span>]) <span class="comment">#输出[1, 2, 5, 5, 9] </span></span><br><span class="line">sorted([<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">9</span>],<span class="keyword">lambda</span> i,j:cmp(j,i)) <span class="comment">#输出[9, 5, 5, 2, 1] </span></span><br><span class="line">sorted([<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">9</span>],<span class="keyword">lambda</span> i,j:cmp(i,j)) <span class="comment">#输出[1, 2, 5, 5, 9]</span></span><br><span class="line"><span class="comment"># Application</span></span><br><span class="line">a = [<span class="string">'5_3'</span>,<span class="string">'2_6'</span>,<span class="string">'4_9'</span>,<span class="string">'2_1'</span>]</span><br><span class="line">sorted(a, key = <span class="keyword">lambda</span> i: (i.split(<span class="string">'_'</span>)[<span class="number">0</span>], i.split(<span class="string">'_'</span>)[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回函数的函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_prod</span><span class="params">(lst)</span>:</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lazy_prod</span><span class="params">()</span>:</span> </span><br><span class="line">        <span class="keyword">return</span> reduce((<span class="keyword">lambda</span> x,y: x*y),lst) </span><br><span class="line">    <span class="keyword">return</span> lazy_prod</span><br><span class="line"></span><br><span class="line">f = calc_prod([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="keyword">print</span> f()</span><br></pre></td></tr></table></figure>
</li>
<li><p>闭包：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span> </span><br><span class="line">    fs = [] </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>): </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span> </span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        fs.append(f) </span><br><span class="line">    <span class="keyword">print</span> fs </span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line"></span><br><span class="line">f1, f2, f3 = count()  <span class="comment">#f1() f2() f3() 都是3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>纯函数内加入条件判断<br><code>lambda x: -x if x &lt; 0 else x</code></p>
</li>
<li><p>面向对象编程 初始化过程中使用键值对：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, birth, **kw)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        self.birth = birth</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> kw.iteritems():</span><br><span class="line">            setattr(self, k, v)</span><br><span class="line">xiaoming = Person(<span class="string">'Xiao Ming'</span>, <span class="string">'Male'</span>, <span class="string">'1990-1-1'</span>, job=<span class="string">'Student'</span>)</span><br><span class="line"><span class="keyword">print</span> xiaoming.name    <span class="comment">#Xiao Ming</span></span><br><span class="line"><span class="keyword">print</span> xiaoming.job     <span class="comment">#Student</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>decorator装饰器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(x)</span>:</span> </span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">2</span> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(f)</span>:</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x)</span>:</span> </span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Using decorator...\ncall '</span> + f.__name__+ <span class="string">'()'</span> </span><br><span class="line">        <span class="keyword">return</span> f(x) </span><br><span class="line">    <span class="keyword">return</span> fn </span><br><span class="line">f1 = decorator(f1) </span><br><span class="line"><span class="keyword">print</span> f1(<span class="number">5</span>) </span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(x)</span>:</span> </span><br><span class="line">    <span class="keyword">return</span> x*x </span><br><span class="line"><span class="keyword">print</span> f2(<span class="number">5</span>)</span><br><span class="line"><span class="comment">#打印出了：</span></span><br><span class="line"><span class="comment">#Using decorator... </span></span><br><span class="line"><span class="comment">#call f1() </span></span><br><span class="line"><span class="comment">#10 </span></span><br><span class="line"><span class="comment">#Using decorator...</span></span><br><span class="line"><span class="comment">#call f2()</span></span><br><span class="line"><span class="comment">#25</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写无参数的decorator装饰器用于记录函数运行效率：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">performance</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        t1 = time.time()</span><br><span class="line">        r = f(*args, **kw)</span><br><span class="line">        t2 = time.time()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'call %s() in %fs'</span> % (f.__name__, (t2 - t1))</span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line"></span><br><span class="line"><span class="meta">@performance</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x,y: x*y, range(<span class="number">1</span>, n+<span class="number">1</span>))</span><br><span class="line"><span class="keyword">print</span> factorial(<span class="number">10</span>)</span><br><span class="line"><span class="comment">#call factorial() in 0.000005s </span></span><br><span class="line"><span class="comment">#3628800</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>偏函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line">sorted_ignore_case = functools.partial(sorted, cmp=<span class="keyword">lambda</span> s1, s2: cmp(s1.upper(), s2.upper()))</span><br><span class="line"><span class="keyword">print</span> sorted_ignore_case([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>])</span><br><span class="line"><span class="comment">#第一个cmp是sorted函数参数中的一个键</span></span><br><span class="line"><span class="comment">#输出['about', 'bob', 'Credit', 'Zoo']</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>得到元素位置的index函数：<br>index() 函数用于从列表中找出某个值第一个匹配项的索引位置。<br>所以lis.index(min(lis))可以得到最小值的索引，numpy.argmin其实就是干这个的</p>
</li>
</ol>
<h3 id="累加函数"><a href="#累加函数" class="headerlink" title="累加函数"></a>累加函数</h3><p>python3<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> accumulate</span><br><span class="line">list(accumulate(range(<span class="number">10</span>)))</span><br><span class="line"><span class="comment">#[0, 1, 3, 6, 10, 15, 21, 28, 36, 45]</span></span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line">list(accumulate(range(<span class="number">1</span>,<span class="number">5</span>), operator.mul))</span><br><span class="line"><span class="comment">#[1, 2, 6, 24]</span></span><br></pre></td></tr></table></figure></p>
<h2 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h2><ol>
<li>type(round(12.3))是float类型</li>
<li>x[a:a+N]实际上x的长度就是N  x[:a]+x[a:]==x</li>
<li>0 % N == 0.0 (N != 0) </li>
<li>普通数组是地址传递<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line">b = a[<span class="number">3</span>:<span class="number">6</span>]</span><br><span class="line">b[<span class="number">2</span>] = <span class="number">1000</span></span><br><span class="line"><span class="comment"># a竟然被b改变了，注意</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"a is "</span>+ str(a)  <span class="comment">#a is [ 0 1 2 3 4 1000 6 7 8 9] </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"b is "</span>+ str(b)  <span class="comment">#b is [ 3 4 1000]</span></span><br></pre></td></tr></table></figure></li>
<li>numpy的std与Mathematica、Matlab不同<br>设置<code>np.std(lis,ddof=1)</code>即相同。原因在于方差是除以样本长度N(numpy默认)，还是N-1（mathematica 无偏估计）。</li>
</ol>
<h1 id="python系统管理相关"><a href="#python系统管理相关" class="headerlink" title="python系统管理相关"></a>python系统管理相关</h1><h2 id="查看python安装目录"><a href="#查看python安装目录" class="headerlink" title="查看python安装目录"></a>查看python安装目录</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">path = sys.executable</span><br><span class="line">print(path)</span><br></pre></td></tr></table></figure>
<h2 id="pip升级包"><a href="#pip升级包" class="headerlink" title="pip升级包"></a>pip升级包</h2><p><code>pip install --pre mxnet-cu80 --upgrade</code></p>
<h1 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h1><h2 id="scipy"><a href="#scipy" class="headerlink" title="scipy"></a>scipy</h2><p>包括fft,fftshift,窗函数等信号处理算法</p>
<h2 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h2><h3 id="复数计算"><a href="#复数计算" class="headerlink" title="复数计算"></a>复数计算</h3><p><code>X=np.array([1-1j, 1+0.000000000000001j, 4+9j],dtype=complex)</code><br>X.real得到实部 X.imag得带虚部<br>X.imag[np.abs(X.imag)&lt;0.1]筛选出第二个元素<br>np.unwrap(np.angle(X))可以解卷绕X的相位</p>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="一般索引"><a href="#一般索引" class="headerlink" title="一般索引"></a>一般索引</h4><p><code>a=np.zeros((3,4))</code><br>a[:,1:3] 得到的是3<em>2的矩阵<br>a[:,[1]] 得到的是3</em>1的矩阵<br>a[:, 1 ] 得到的是(3,)的数组</p>
<h4 id="根据条件索引"><a href="#根据条件索引" class="headerlink" title="根据条件索引"></a>根据条件索引</h4><p>符合条件则x否则y<br>API:numpy.where(condition[, x, y])<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.where([[<span class="literal">True</span>, <span class="literal">False</span>], [<span class="literal">True</span>, <span class="literal">True</span>]], [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]], [[<span class="number">9</span>, <span class="number">8</span>], [<span class="number">7</span>, <span class="number">6</span>]])</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>array([[1, 8],<br>        [3, 4]])</p>
</blockquote>
<p>只有条件的话返回condition.nonzero()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.arange(<span class="number">9.</span>).reshape(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">np.where( x &gt; <span class="number">5</span> )</span><br></pre></td></tr></table></figure>
<blockquote>
<p>(array([2, 2, 2]), array([0, 1, 2]))</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x[np.where( x &gt; <span class="number">3.0</span> )]               <span class="comment"># Note: result is 1D.</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>array([ 4.,  5.,  6.,  7.,  8.])</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.where(x &lt; <span class="number">5</span>, x, <span class="number">-1</span>)               <span class="comment"># Note: broadcasting.</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>array([[ 0.,  1.,  2.],<br>        [ 3.,  4., -1.],<br>        [-1., -1., -1.]])</p>
</blockquote>
<h3 id="删除某一维度数据"><a href="#删除某一维度数据" class="headerlink" title="删除某一维度数据"></a>删除某一维度数据</h3><p>np.delete(arr, 1, axis=0)<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>], [<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]])</span><br><span class="line">np.delete(arr, <span class="number">1</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>array([[ 1,  2,  3,  4],<br>       [ 9, 10, 11, 12]])</p>
</blockquote>
<p><code>np.delete(arr, np.s_[::2], 1)</code> 用<code>np.s_</code>构造索引</p>
<blockquote>
<p>array([[ 2,  4],<br>        [ 6,  8],<br>        [10, 12]])</p>
</blockquote>
<p><code>np.delete(arr, [1,3,5], None)</code></p>
<blockquote>
<p>array([ 1,  3,  5,  7,  8,  9, 10, 11, 12])</p>
</blockquote>
<h3 id="all函数"><a href="#all函数" class="headerlink" title="all函数"></a>all函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=np.arange(<span class="number">-3</span>,<span class="number">3</span>)</span><br><span class="line">np.all(abs(a)&lt;<span class="number">5</span>) <span class="comment">#True</span></span><br><span class="line">a=np.arange(<span class="number">-3</span>,<span class="number">6</span>)</span><br><span class="line">np.all(abs(a)&lt;<span class="number">5</span>) <span class="comment">#False</span></span><br></pre></td></tr></table></figure>
<h3 id="更改数据类型"><a href="#更改数据类型" class="headerlink" title="更改数据类型"></a>更改数据类型</h3><p>astype函数<br>如<code>a.astype(np.int32)</code></p>
<h3 id="普通数组与numpy数组互转"><a href="#普通数组与numpy数组互转" class="headerlink" title="普通数组与numpy数组互转"></a>普通数组与numpy数组互转</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.arange(<span class="number">3</span>).tolist() <span class="comment">#to list</span></span><br><span class="line">np.asarray([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>])   <span class="comment">#to numpy</span></span><br></pre></td></tr></table></figure>
<h3 id="axis的理解"><a href="#axis的理解" class="headerlink" title="axis的理解"></a>axis的理解</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=np.arange(<span class="number">20</span>).reshape(<span class="number">2</span>,<span class="number">10</span>) </span><br><span class="line">a.sum(axis=<span class="number">0</span>) </span><br><span class="line"><span class="comment">#array([10, 12, 14, 16, 18, 20, 22, 24, 26, 28])</span></span><br><span class="line">np.diff(a,axis=<span class="number">0</span>) </span><br><span class="line"><span class="comment">#得到array([[10, 10, 10, 10, 10, 10, 10, 10, 10, 10]]) </span></span><br><span class="line">a.sum(axis=<span class="number">1</span>) </span><br><span class="line"><span class="comment">#array([ 45, 145])</span></span><br><span class="line"><span class="comment">#axis=0把列当做成对处理的对象</span></span><br><span class="line"><span class="comment">#axis=1把行当做成对处理的对象</span></span><br></pre></td></tr></table></figure>
<h3 id="广播机制"><a href="#广播机制" class="headerlink" title="广播机制"></a>广播机制</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.array([<span class="number">1</span>,<span class="number">2</span>])*np.array([<span class="number">3</span>,<span class="number">4</span>]) <span class="comment">#np.array([3,8]) 行向量的内积 </span></span><br><span class="line">np.array([<span class="number">1</span>,<span class="number">2</span>])*np.array([[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>]])  <span class="comment">#np.array([[3,8],[5,12]]) 行向量乘以矩阵 </span></span><br><span class="line">np.array([<span class="number">1</span>,<span class="number">2</span>]).reshape(<span class="number">-1</span>,<span class="number">1</span>)*np.array([[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>]]) <span class="comment">#np.array([[3,4],[10,12]]) 列向量乘以矩阵 </span></span><br><span class="line">np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])*np.array([[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>]]) <span class="comment">#矩阵的点乘</span></span><br></pre></td></tr></table></figure>
<h3 id="Element-wise"><a href="#Element-wise" class="headerlink" title="Element-wise"></a>Element-wise</h3><p><code>np.less([1, 2], [2, 2])</code>返回array([True, False], dtype=bool)</p>
<h3 id="行向量列向量的转化"><a href="#行向量列向量的转化" class="headerlink" title="行向量列向量的转化"></a>行向量列向量的转化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).reshape((<span class="number">-1</span>, <span class="number">1</span>)) <span class="comment"># &lt;--- THIS IS THE TRICK</span></span><br><span class="line">np.array([[<span class="number">5</span>, <span class="number">4</span>]]).T</span><br><span class="line"></span><br><span class="line">np.array([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>]).shape  <span class="comment">#(3,) 向量</span></span><br><span class="line">np.array([[<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>]]).shape  <span class="comment">#(1,3) 行向量</span></span><br></pre></td></tr></table></figure>
<h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><h4 id="Outer"><a href="#Outer" class="headerlink" title="Outer"></a>Outer</h4><img src="/2018/07/26/Python/11.png" class="">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m=np.arange(<span class="number">5</span>);</span><br><span class="line">n=np.arange(<span class="number">5</span>);</span><br><span class="line">a=np.subtract.outer(m,n)  <span class="comment">#结果和mma一样</span></span><br></pre></td></tr></table></figure>
<h4 id="Inner"><a href="#Inner" class="headerlink" title="Inner"></a>Inner</h4><img src="/2018/07/26/Python/12.png" class="">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.arange(<span class="number">12</span>).reshape((<span class="number">4</span>,<span class="number">3</span>))</span><br><span class="line">b = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">np.inner(a, b)  <span class="comment">#array([ 5, 14, 23, 32]) 结果同MMA</span></span><br></pre></td></tr></table></figure>
<h3 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h3><h4 id="标准数学形式的拼接"><a href="#标准数学形式的拼接" class="headerlink" title="标准数学形式的拼接"></a>标准数学形式的拼接</h4><h5 id="按列拼接"><a href="#按列拼接" class="headerlink" title="按列拼接"></a>按列拼接</h5><p>包括向量拼向量 向量拼矩阵 矩阵拼矩阵<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">b = np.array([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">c = np.vstack((a,b))</span><br><span class="line"><span class="keyword">print</span> c <span class="comment">#array([[1, 2, 3], [2, 3, 4]])</span></span><br><span class="line"><span class="keyword">print</span> np.vstack((a,c)) <span class="comment">#array([[1 2 3], [1 2 3], [2 3 4]])</span></span><br><span class="line"><span class="keyword">print</span> np.vstack((c,c)) <span class="comment">#array([[1 2 3], [2 3 4], [1 2 3], [2 3 4]])</span></span><br></pre></td></tr></table></figure></p>
<h5 id="按行拼接"><a href="#按行拼接" class="headerlink" title="按行拼接"></a>按行拼接</h5><p>包括向量拼向量 向量拼矩阵 矩阵拼矩阵<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]])</span><br><span class="line">b = np.array([[<span class="number">2</span>], [<span class="number">3</span>], [<span class="number">4</span>]])</span><br><span class="line">c = np.hstack((a,b))</span><br><span class="line"><span class="keyword">print</span> c <span class="comment">#array([[1, 2], [2, 3], [3, 4]])</span></span><br><span class="line"><span class="keyword">print</span> np.hstack((a,c)) <span class="comment">#array([[1, 1, 2], [2, 2, 3], [3, 3, 4]])</span></span><br><span class="line"><span class="keyword">print</span> np.hstack((c,c)) <span class="comment">#array([[1, 2, 1, 2], [2, 3, 2, 3], [3, 4, 3, 4]])</span></span><br></pre></td></tr></table></figure></p>
<h4 id="仿matlab式拼接"><a href="#仿matlab式拼接" class="headerlink" title="仿matlab式拼接"></a>仿matlab式拼接</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">b = np.array([[<span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">np.concatenate((a, b), axis=<span class="number">0</span>)</span><br><span class="line"><span class="comment">#array([[1, 2], [3, 4], [5, 6]])</span></span><br><span class="line">np.concatenate((a, b.T), axis=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#array([[1, 2, 5], [3, 4, 6]])</span></span><br></pre></td></tr></table></figure>
<h4 id="多个numpy数组的拼接"><a href="#多个numpy数组的拼接" class="headerlink" title="多个numpy数组的拼接"></a>多个numpy数组的拼接</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.r_[np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]), <span class="number">0</span>, <span class="number">0</span>, np.array([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])]</span><br><span class="line"><span class="comment">#array([[1, 2, 3, 0, 0, 4, 5, 6]])</span></span><br></pre></td></tr></table></figure>
<h3 id="数据的填充"><a href="#数据的填充" class="headerlink" title="数据的填充"></a>数据的填充</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">np.lib.pad(a, (<span class="number">2</span>, <span class="number">3</span>), <span class="string">'edge'</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>array([1, 1, 1, 2, 3, 4, 5, 5, 5, 5])</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">np.lib.pad(a, ((<span class="number">3</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">3</span>)), <span class="string">'minimum'</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>array([[1, 1, 1, 2, 1, 1, 1],<br>       [1, 1, 1, 2, 1, 1, 1],<br>       [1, 1, 1, 2, 1, 1, 1],<br>       [1, 1, 1, 2, 1, 1, 1],<br>       [3, 3, 3, 4, 3, 3, 3],<br>       [1, 1, 1, 2, 1, 1, 1],</p>
</blockquote>
<h3 id="找到数据的unique元素"><a href="#找到数据的unique元素" class="headerlink" title="找到数据的unique元素"></a>找到数据的unique元素</h3><p>找到数组每个元素出现几次<br>mma代码<br><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>&#125; // <span class="keyword">Counts</span></span><br><span class="line">&lt;|<span class="number">1</span> -&gt; <span class="number">4</span>, <span class="number">5</span> -&gt; <span class="number">2</span>, <span class="number">3</span> -&gt; <span class="number">3</span>, <span class="number">2</span> -&gt; <span class="number">4</span>, <span class="number">4</span> -&gt; <span class="number">1</span>|</span><br></pre></td></tr></table></figure></p>
<h4 id="保持顺序"><a href="#保持顺序" class="headerlink" title="保持顺序"></a>保持顺序</h4><p>python使用迭代器函数<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> groupby</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">[len(list(group)) <span class="keyword">for</span> key, group <span class="keyword">in</span> groupby(a)]</span><br></pre></td></tr></table></figure></p>
<h4 id="不保持顺序"><a href="#不保持顺序" class="headerlink" title="不保持顺序"></a>不保持顺序</h4><p>采用np.unique函数<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">np.unique(a, return_counts=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#(array([1, 2, 3, 4, 5]), array([4, 4, 3, 1, 2]))</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">Counter(a)</span><br><span class="line"><span class="comment">#Counter(&#123;1: 4, 2: 4, 3: 3, 5: 2, 4: 1&#125;)</span></span><br></pre></td></tr></table></figure></p>
<h2 id="matplotlib库"><a href="#matplotlib库" class="headerlink" title="matplotlib库"></a>matplotlib库</h2><h3 id="等值线图-ContourPlot"><a href="#等值线图-ContourPlot" class="headerlink" title="等值线图 ContourPlot"></a>等值线图 ContourPlot</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib.pylab <span class="keyword">as</span> plt</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    z = (<span class="number">1</span>-x/<span class="number">2</span>+x**<span class="number">5</span>+y**<span class="number">3</span>)*np.exp(-x**<span class="number">2</span>-y**<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> z</span><br><span class="line"> </span><br><span class="line">n = <span class="number">256</span></span><br><span class="line"> </span><br><span class="line">x = np.linspace(<span class="number">-1</span>,<span class="number">1</span>,n)</span><br><span class="line">y = np.linspace(<span class="number">-1</span>,<span class="number">1</span>,n)</span><br><span class="line">X,Y = np.meshgrid(x,y)</span><br><span class="line"> </span><br><span class="line">fig = plt.figure()</span><br><span class="line">surf1 = plt.contourf(X, Y, f(X,Y))</span><br><span class="line">fig.colorbar(surf1)</span><br></pre></td></tr></table></figure>
<img src="/2018/07/26/Python/1.png" class="">
<h3 id="三维图-Plot3D"><a href="#三维图-Plot3D" class="headerlink" title="三维图 Plot3D"></a>三维图 Plot3D</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = Axes3D(fig)</span><br><span class="line"><span class="comment"># X, Y value</span></span><br><span class="line">X = np.arange(<span class="number">-4</span>, <span class="number">4</span>, <span class="number">0.25</span>)</span><br><span class="line">Y = np.arange(<span class="number">-4</span>, <span class="number">4</span>, <span class="number">0.25</span>)</span><br><span class="line">X, Y = np.meshgrid(X, Y)    <span class="comment"># x-y 平面的网格</span></span><br><span class="line">Z = np.sin(np.sqrt(X ** <span class="number">2</span> + Y ** <span class="number">2</span>))</span><br><span class="line">ax.plot_surface(X, Y, Z, rstride=<span class="number">1</span>, cstride=<span class="number">1</span>, cmap=plt.get_cmap(<span class="string">'rainbow'</span>))</span><br></pre></td></tr></table></figure>
<img src="/2018/07/26/Python/2.png" class="">
<h3 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">mu, sigma = <span class="number">100</span>, <span class="number">15</span></span><br><span class="line">x = mu + sigma * np.random.randn(<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">hist, bins = np.histogram(x, bins=<span class="number">30</span>)</span><br><span class="line">width = <span class="number">0.9</span> * (bins[<span class="number">1</span>] - bins[<span class="number">0</span>])</span><br><span class="line">center = (bins[:<span class="number">-1</span>] + bins[<span class="number">1</span>:]) / <span class="number">2</span></span><br><span class="line">plt.bar(center, hist, align=<span class="string">'center'</span>, width=width)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<img src="/2018/07/26/Python/3.png" class="">
<h3 id="其他可视化库"><a href="#其他可视化库" class="headerlink" title="其他可视化库"></a>其他可视化库</h3><ol>
<li>Seaborn：Seaborn跟matplotlib最大的区别就是它的默认绘图风格和色彩搭配都具有现代美感。由于Seaborn是构建在matplotlib的基础上的，你需要了解matplotlib从而来调整Seaborn的默认参数。</li>
<li>不要用Bokeh和ggplot2，前一个语法兼容不好，晦涩难懂，后一个作者弃坑了且bug多</li>
<li>pygal超美丽，语法超简单，可以直接输出SVG的Tooltip形式的矢量图，但是只能输出SVG格式文件不能直接看图的效果</li>
<li>plotly很美，也是神器之一！致力于交互图表的制作，但是它提供在别的库中很难找到的几种图表类型，比如等值线图，树形图和三维图表。如何离线使用参见<a href="https://plot.ly/python/offline/" target="_blank" rel="noopener">Here!</a> 美美哒~<br>但是由于我很熟悉Mathematica，作图基本上就是靠她了。如果是动态图，我使用JavaScript和D3。</li>
</ol>
<h3 id="可视化大规模数据集的库-Datashader"><a href="#可视化大规模数据集的库-Datashader" class="headerlink" title="可视化大规模数据集的库 Datashader"></a>可视化大规模数据集的库 Datashader</h3><p>安装<br><code>conda install -c bokeh datashader</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import datashader as ds</span><br><span class="line">import datashader.transfer_functions as tf</span><br><span class="line">import pandas as pd</span><br><span class="line">df &#x3D; pd.read_csv(&#39;user_data.csv&#39;)</span><br><span class="line"></span><br><span class="line">cvs &#x3D; ds.Canvas(plot_width&#x3D;400, plot_height&#x3D;400)</span><br><span class="line">agg &#x3D; cvs.points(df, &#39;x_col&#39;, &#39;y_col&#39;, ds.mean(&#39;z_col&#39;))</span><br><span class="line">img &#x3D; tf.shade(agg, cmap&#x3D;[&#39;lightblue&#39;, &#39;darkblue&#39;], how&#x3D;&#39;log&#39;)</span><br></pre></td></tr></table></figure>
<img src="/2018/07/26/Python/5.jpg" class="">
<h3 id="在Jupyter中画图"><a href="#在Jupyter中画图" class="headerlink" title="在Jupyter中画图"></a>在Jupyter中画图</h3><p>3D散点图<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib notebook</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">fig = pyplot.figure()</span><br><span class="line">ax = Axes3D(fig)</span><br><span class="line"></span><br><span class="line">sequence_containing_x_vals = X[:, <span class="number">0</span>].asnumpy()</span><br><span class="line">sequence_containing_y_vals = X[:, <span class="number">1</span>].asnumpy()</span><br><span class="line">sequence_containing_z_vals = y.asnumpy()</span><br><span class="line"></span><br><span class="line">ax.scatter(sequence_containing_x_vals, sequence_containing_y_vals, sequence_containing_z_vals)</span><br><span class="line">pyplot.show()</span><br></pre></td></tr></table></figure></p>
<p>显示图像<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.imshow(image_data)</span><br></pre></td></tr></table></figure></p>
<h2 id="操作系统库-os"><a href="#操作系统库-os" class="headerlink" title="操作系统库 os"></a>操作系统库 os</h2><ul>
<li>调用系统cmd的ls程序打印当前目录，并且返回是否成功（0即为成功）<br><code>os.system(&#39;ls&#39;)</code></li>
<li>os.mkdir(path)函数创建目录（创建一级目录)</li>
<li>os.makedirs(path)函数创建多级目录</li>
<li>os.listdir(path)可以得到一个包含当前目录下文件和子目录的List列表（但是是乱序的，需要sorted）</li>
<li>os.walk() 方法用于通过在目录树种游走输出在目录中的文件名，向上或者向下</li>
<li>os.path.split 用于分割路径为目录路径和不带后缀的文件名</li>
<li>os.path.split 得到不带后缀的文件名</li>
</ul>
<h2 id="显示进度条"><a href="#显示进度条" class="headerlink" title="显示进度条"></a>显示进度条</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(range(<span class="number">100</span>)):</span><br><span class="line">    sleep(<span class="number">0.01</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#也可以用于迭代器 但是要传total参数告诉它迭代器的大小</span></span><br><span class="line"><span class="keyword">for</span> index, batch <span class="keyword">in</span> tqdm(enumerate(dataiter),total=num_examples/batch_size,unit=<span class="string">"mini-batchs"</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p><code>print(&quot;Epoch %d&quot; % epoch)</code>可以改为<code>tqdm.write(&quot;Epoch %d&quot; % epoch)</code></p>
<img src="/2018/07/26/Python/4.gif" class="">
<h2 id="找到某一后缀的文件-glob库"><a href="#找到某一后缀的文件-glob库" class="headerlink" title="找到某一后缀的文件 glob库"></a>找到某一后缀的文件 glob库</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">print</span> glob.glob(<span class="string">"./source/*.cpp"</span>)</span><br></pre></td></tr></table></figure>
<p>递归查找可以用glob2库,注意使用了 **<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> glob2</span><br><span class="line"><span class="keyword">print</span> glob2.glob(<span class="string">"./source/**/*.cpp"</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="h5py使用指南"><a href="#h5py使用指南" class="headerlink" title="h5py使用指南"></a>h5py使用指南</h2><h3 id="读取h5文件"><a href="#读取h5文件" class="headerlink" title="读取h5文件"></a>读取h5文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line">f = h5py.File(<span class="string">'test_data_SE.h5'</span>, <span class="string">'r'</span>)</span><br><span class="line">f.keys()</span><br><span class="line"><span class="comment">#[u'Input', u'Output']</span></span><br><span class="line">f[<span class="string">'Input'</span>]</span><br><span class="line"><span class="comment">#&lt;HDF5 dataset "Input": shape (1681, 2), type "&lt;f8"&gt;</span></span><br><span class="line">f[<span class="string">'Input'</span>][:] <span class="comment">#得到所有数据</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>
<h2 id="多进程和多线程库"><a href="#多进程和多线程库" class="headerlink" title="多进程和多线程库"></a>多进程和多线程库</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x*x</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Run</span><span class="params">(cmd)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span>(os.system(cmd)==<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ParallelMap</span><span class="params">(func,argList,threads=<span class="number">5</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> threads&gt;multiprocessing.cpu_count():</span><br><span class="line">        threads=multiprocessing.cpu_count()</span><br><span class="line">    pool = multiprocessing.Pool(processes=threads)</span><br><span class="line">    res=pool.map(func, argList)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ParallelRun</span><span class="params">(cmds,threads=<span class="number">5</span>)</span>:</span></span><br><span class="line">    ParallelMap(Run,cmds,threads=threads)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">print</span> ParallelMap(square,range(<span class="number">10</span>))</span><br><span class="line">    ParallelRun([<span class="string">'time'</span>,<span class="string">'dir'</span>])</span><br></pre></td></tr></table></figure>
<h3 id="简单示例-（结合深度学习）"><a href="#简单示例-（结合深度学习）" class="headerlink" title="简单示例 （结合深度学习）"></a>简单示例 （结合深度学习）</h3><p>创建一个输入，一个输出的的网络所需的hdf5文件</p>
<h4 id="新版"><a href="#新版" class="headerlink" title="新版"></a>新版</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"></span><br><span class="line">N = <span class="number">1000</span></span><br><span class="line">X = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, (N, <span class="number">12</span>))</span><br><span class="line">y = np.random.randint(<span class="number">0</span>, <span class="number">2</span>, N)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write data to file</span></span><br><span class="line"><span class="keyword">with</span> h5py.File(<span class="string">'myfile.hdf5'</span>, <span class="string">"w"</span>) <span class="keyword">as</span> ofile:</span><br><span class="line">    ofile.create_dataset(<span class="string">"X"</span>, data=X)</span><br><span class="line">    ofile.create_dataset(<span class="string">"y"</span>, data=y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># load data from file</span></span><br><span class="line">ifile = h5py.File(<span class="string">'myfile.hdf5'</span>, <span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line">X_h5 = ifile[<span class="string">"X"</span>]</span><br><span class="line">y_h5 = ifile[<span class="string">"y"</span>]</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">200</span></span><br><span class="line">dataiter = mx.io.NDArrayIter(X_h5, y_h5, batch_size=batch_size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> iBatch, batch <span class="keyword">in</span> enumerate(dataiter):</span><br><span class="line">    print(iBatch, batch.data[<span class="number">0</span>].asnumpy().shape)</span><br><span class="line">ifile.close()</span><br></pre></td></tr></table></figure>
<h4 id="旧版"><a href="#旧版" class="headerlink" title="旧版"></a>旧版</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">float_size=<span class="number">4</span></span><br><span class="line"></span><br><span class="line">input_node=<span class="number">2</span></span><br><span class="line">output_node=<span class="number">1</span></span><br><span class="line">input_file=<span class="string">'test_data_SE.dat'</span></span><br><span class="line">out_file=<span class="string">'test_data_SE.h5'</span></span><br><span class="line"></span><br><span class="line">input_and_output_node=input_node+output_node</span><br><span class="line"><span class="keyword">with</span> open(input_file,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.seek(<span class="number">0</span>,os.SEEK_END)</span><br><span class="line">    file_len=f.tell()/(float_size*input_and_output_node)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> h5py.File(out_file, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    Input =  f.create_dataset(<span class="string">'Input'</span>,  (<span class="number">1681</span>,input_node ),dtype=<span class="string">'float'</span>, chunks=<span class="literal">True</span>)</span><br><span class="line">    Output = f.create_dataset(<span class="string">'Output'</span>, (<span class="number">1681</span>,output_node),dtype=<span class="string">'float'</span>, chunks=<span class="literal">True</span>)</span><br><span class="line">    fin=open(input_file,<span class="string">'rb'</span>)</span><br><span class="line">    index=range(file_len)</span><br><span class="line">    random.shuffle(index)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> index:</span><br><span class="line">        fin.seek(float_size*input_and_output_node*i,os.SEEK_SET)</span><br><span class="line">        Input[i,:]  = np.array(struct.unpack(<span class="string">'&lt;'</span>+str(input_node )+<span class="string">'f'</span>,fin.read(float_size*input_node)))</span><br><span class="line">        Output[i,:] = np.array(struct.unpack(<span class="string">'&lt;'</span>+str(output_node)+<span class="string">'f'</span>,fin.read(float_size*output_node)))</span><br><span class="line">    fin.close()</span><br></pre></td></tr></table></figure>
<h1 id="Python小工具"><a href="#Python小工具" class="headerlink" title="Python小工具"></a>Python小工具</h1><h2 id="多进程加快迭代速度"><a href="#多进程加快迭代速度" class="headerlink" title="多进程加快迭代速度"></a>多进程加快迭代速度</h2><p>原始代码：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line">dir = <span class="string">'./wav_phone'</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> glob.glob(os.path.join(dir,<span class="string">"*.wav"</span>))[:<span class="number">10000</span>]:</span><br><span class="line">    sum += len(open(filename, <span class="string">'rb'</span>).read())</span><br><span class="line"><span class="keyword">print</span> sum</span><br></pre></td></tr></table></figure><br><code>time python test.py</code>输出</p>
<blockquote>
<p>43567952<br>python test.py  1.01s user 0.66s system 98% cpu 1.688 total</p>
</blockquote>
<p>改进后：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> glob, concurrent.futures</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> len(open(f, <span class="string">'rb'</span>).read())</span><br><span class="line"></span><br><span class="line">dir = <span class="string">'./wav_phone'</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">with</span> concurrent.futures.ProcessPoolExecutor() <span class="keyword">as</span> executor:</span><br><span class="line">    files = glob.glob(os.path.join(dir,<span class="string">"*.wav"</span>))[:<span class="number">10000</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> executor.map(load, files):</span><br><span class="line">        sum += i</span><br><span class="line">    <span class="keyword">print</span> sum</span><br></pre></td></tr></table></figure><br><code>time python test.py</code>输出</p>
<blockquote>
<p>43567952<br>python test.py  3.48s user 2.03s system 148% cpu 3.724 total</p>
</blockquote>
<h2 id="检查两个文件夹是否完全一样"><a href="#检查两个文件夹是否完全一样" class="headerlink" title="检查两个文件夹是否完全一样"></a>检查两个文件夹是否完全一样</h2><p>不一样的会打印出对应的文件<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> glob <span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line"><span class="comment">#ref_Dir1是参考文件夹 通常文件夹内文件会少一些</span></span><br><span class="line">ref_Dir1 = <span class="string">r'\\172.16.46.88\xzhou\Downloads\Yanping_13k_NFE\Unit2Vec_WaveformGeneration\online\hus_rootDir\hus_WaveRNN'</span></span><br><span class="line">Dir2 = <span class="string">r'\\172.16.46.80\xzhou2\Yanping_13k_NFE\Unit2Vec_WaveformGeneration\online\hus_rootDir\hus_WaveRNN'</span></span><br><span class="line"><span class="comment">#指比较suffix的文件，全部文件suffix = '*'</span></span><br><span class="line">suffix = <span class="string">'*.wav'</span></span><br><span class="line"></span><br><span class="line">SameNum = <span class="number">0.</span></span><br><span class="line">AllNum = <span class="number">0.</span></span><br><span class="line">files = sorted(glob(os.path.join(ref_Dir1,suffix)))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'reference dir is %s'</span> % ref_Dir1</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    bn = os.path.basename(file)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'process %f%%\r'</span> % (AllNum/len(files)*<span class="number">100</span>),</span><br><span class="line">    file1 = os.path.join(ref_Dir1, bn)</span><br><span class="line">    file2 = os.path.join(Dir2, bn)</span><br><span class="line">    SameQ = open(file1,<span class="string">'rt'</span>).read() == open(file2,<span class="string">'rt'</span>).read()</span><br><span class="line">    <span class="keyword">if</span> SameQ: </span><br><span class="line">        SameNum += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'%-20s'</span> % bn</span><br><span class="line">    AllNum += <span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Similar rate is %f%%'</span> % (SameNum/AllNum*<span class="number">100</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="得到一个复杂工程（文件夹）的目录树，并将代码说明等输出至另一文件夹"><a href="#得到一个复杂工程（文件夹）的目录树，并将代码说明等输出至另一文件夹" class="headerlink" title="得到一个复杂工程（文件夹）的目录树，并将代码说明等输出至另一文件夹"></a>得到一个复杂工程（文件夹）的目录树，并将代码说明等输出至另一文件夹</h2><p>目的是备份代码以及说明文件<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os,shutil</span><br><span class="line"></span><br><span class="line">originalDir = <span class="string">'./dir'</span></span><br><span class="line">targetDir = <span class="string">'./dir_code'</span></span><br><span class="line"></span><br><span class="line">suffix = [<span class="string">'.py'</span>,<span class="string">'.cpp'</span>,<span class="string">'.hpp'</span>,<span class="string">'.c'</span>,<span class="string">'.h'</span>,<span class="string">'.pl'</span>,<span class="string">'.nb'</span>,<span class="string">'.m'</span>,<span class="string">'.js'</span>,<span class="string">'.html'</span>,<span class="string">'.doc'</span>,<span class="string">'.docx'</span>,<span class="string">'.ppt'</span>,<span class="string">'.pptx'</span>,<span class="string">'.xls'</span>,<span class="string">'.xlsx'</span>,<span class="string">'.pdf'</span>,<span class="string">'.jpg'</span>,<span class="string">'.png'</span>,<span class="string">'.gif'</span>,<span class="string">'.txt'</span>]</span><br><span class="line"><span class="keyword">for</span> dirName, subdirList, fileList <span class="keyword">in</span> os.walk(originalDir):</span><br><span class="line">    <span class="keyword">print</span> dirName</span><br><span class="line">    <span class="keyword">for</span> mydir <span class="keyword">in</span> subdirList:</span><br><span class="line">        Ori_abspath_this = os.path.join(dirName, mydir)</span><br><span class="line">        relative_Path = os.path.relpath(Ori_abspath_this, originalDir)</span><br><span class="line">        Tar_abspathy_this = os.path.join(targetDir, relative_Path)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(Tar_abspathy_this):</span><br><span class="line">            os.mkdir(Tar_abspathy_this)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            os.makedirs(Tar_abspathy_this)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> myfile <span class="keyword">in</span> fileList:</span><br><span class="line">        <span class="keyword">if</span> os.path.splitext(myfile)[<span class="number">1</span>] <span class="keyword">in</span> suffix:</span><br><span class="line">        Ori_abspath_this = os.path.join(dirName, myfile)</span><br><span class="line">        relative_Path = os.path.relpath(Ori_abspath_this, originalDir)</span><br><span class="line">        Tar_abspathy_this = os.path.join(targetDir, relative_Path)</span><br><span class="line">        shutil.copyfile(Ori_abspath_this,Tar_abspathy_this)</span><br></pre></td></tr></table></figure></p>
<h2 id="检查项目某些代码代码是否都包含了某些字符"><a href="#检查项目某些代码代码是否都包含了某些字符" class="headerlink" title="检查项目某些代码代码是否都包含了某些字符"></a>检查项目某些代码代码是否都包含了某些字符</h2><p>比如有memcpy的行是否都包含sizeof<br>使用了glob2库 这个相比glob不仅可以找到目录下的特定后缀文件还可以<strong>递归</strong>查询它的子目录下的文件<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> glob2</span><br><span class="line">files=glob2.glob(<span class="string">"./source/**/*.cpp"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    num=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> open(file,<span class="string">'rt'</span>):</span><br><span class="line">        num=num+<span class="number">1</span></span><br><span class="line">        line=line.strip()</span><br><span class="line">        <span class="keyword">if</span> line.startswith(<span class="string">'memcpy'</span>):</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">'sizeof'</span> <span class="keyword">not</span> <span class="keyword">in</span> line):</span><br><span class="line">                <span class="keyword">print</span> line+<span class="string">'\t\t'</span>+file+<span class="string">'\t'</span>+str(num)</span><br></pre></td></tr></table></figure><br><img src="/2018/07/26/Python/6.png" class=""></p>
<p>可以显示行    文件名    行号，效果还是不错的，因为可以自定义呀~</p>
<h2 id="导入导出数据"><a href="#导入导出数据" class="headerlink" title="导入导出数据"></a>导入导出数据</h2><h3 id="清除文件数据"><a href="#清除文件数据" class="headerlink" title="清除文件数据"></a>清除文件数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'test.txt'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f_out:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h2 id="准备维基百科中文语料库"><a href="#准备维基百科中文语料库" class="headerlink" title="准备维基百科中文语料库"></a>准备维基百科中文语料库</h2><p>参考网址[]</p>
<h3 id="文本数据"><a href="#文本数据" class="headerlink" title="文本数据"></a>文本数据</h3><h4 id="np-loadtxt"><a href="#np-loadtxt" class="headerlink" title="np.loadtxt"></a>np.loadtxt</h4><p>忽略首行，数据是浮点数<br><code>np.loadtxt(&#39;test.txt&#39;,dtype=float,skiprows=1)</code><br>读取特定的列使用参数<code>usecols</code>,多列是<code>usecols=(1,3)</code>，单列是<code>usecols=(3,)</code></p>
<h4 id="np-genfromtxt"><a href="#np-genfromtxt" class="headerlink" title="np.genfromtxt"></a>np.genfromtxt</h4><p>只读取第一三列浮点数据且忽略首行<code>np.genfromtxt(&#39;test.txt&#39;,dtype=float,usecols=(1,3),skip_header=1)</code></p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> struct,os</span><br><span class="line"></span><br><span class="line">mat = np.arange(<span class="number">15</span>).reshape((<span class="number">3</span>,<span class="number">5</span>)).astype(np.float32)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test.txt'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f_out:</span><br><span class="line">    <span class="keyword">for</span> lis <span class="keyword">in</span> mat:</span><br><span class="line">        <span class="comment">#Write every row</span></span><br><span class="line">        f_out.writelines(map(<span class="keyword">lambda</span> i:str(i)+<span class="string">'\t'</span>,lis)+[<span class="string">'\n'</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f_in:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f_in.readlines():</span><br><span class="line">        <span class="keyword">print</span> line</span><br></pre></td></tr></table></figure>
<h3 id="二进制数据"><a href="#二进制数据" class="headerlink" title="二进制数据"></a>二进制数据</h3><h4 id="快速读取二进制数据"><a href="#快速读取二进制数据" class="headerlink" title="快速读取二进制数据"></a>快速读取二进制数据</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#速度慢</span></span><br><span class="line">data=np.array(struct.unpack(<span class="string">'&lt;'</span>+str(lis_len)+<span class="string">'f'</span>,fin.read()))</span><br><span class="line"><span class="comment">#速度快</span></span><br><span class="line">data = np.fromfile(datafile,dtype=np.float32)</span><br><span class="line"><span class="comment">#为了方便使用这第二种快速读取的方式，定义如下函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BinaryRead</span><span class="params">(datafile,column)</span>:</span></span><br><span class="line">    data = np.fromfile(datafile,dtype=np.float32)</span><br><span class="line">    LengthOfFile=len(data)</span><br><span class="line">    <span class="keyword">assert</span>(LengthOfFile)</span><br><span class="line">    <span class="keyword">assert</span>((LengthOfFile%column)==<span class="number">0</span>)</span><br><span class="line">    data.shape = [LengthOfFile/column,column]</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> struct,os</span><br><span class="line">float_size=<span class="number">4</span></span><br><span class="line"></span><br><span class="line">mat = np.arange(<span class="number">15</span>).reshape((<span class="number">3</span>,<span class="number">5</span>)).astype(np.float32)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test.dat'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> f_out:</span><br><span class="line">    <span class="keyword">for</span> lis <span class="keyword">in</span> mat:</span><br><span class="line">        <span class="comment">#Write every row</span></span><br><span class="line">        f_out.write(struct.pack(<span class="string">'&lt;5f'</span>,*lis))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test.dat'</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> f_in:</span><br><span class="line">    <span class="comment">#Read every row</span></span><br><span class="line">    f_in.seek(<span class="number">0</span>,os.SEEK_END)</span><br><span class="line">    row_Num = int(f_in.tell()/(float_size*<span class="number">5</span>))</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"row number is "</span>+str(row_Num)</span><br><span class="line">    f_in.seek(<span class="number">0</span>,os.SEEK_SET)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(row_Num):</span><br><span class="line">        <span class="keyword">print</span> np.array(struct.unpack(<span class="string">'&lt;5f'</span>,f_in.read(float_size*<span class="number">5</span>)))</span><br><span class="line">    <span class="comment"># Got mat again.</span></span><br></pre></td></tr></table></figure>
<h3 id="导出字典（使用JSON）"><a href="#导出字典（使用JSON）" class="headerlink" title="导出字典（使用JSON）"></a>导出字典（使用JSON）</h3><p>打印到屏幕<br>indent可以控制缩进单位，美化JSON用的<br><code>print json.dumps(mydict, indent=2)</code><br>输出到文件<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'Unit2Vec_tSNE.json'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> outfile:</span><br><span class="line">    json.dump(mydict, outfile, indent=<span class="number">2</span>)</span><br></pre></td></tr></table></figure></p>
<h3 id="导出字典（使用pickle）"><a href="#导出字典（使用pickle）" class="headerlink" title="导出字典（使用pickle）"></a>导出字典（使用pickle）</h3><p>可以保存字典、列表、numpy数据等<br>pickle.dump(数据, 文件，[使用协议])表示将要持久化的数据，保存到文件中，使用协议有3种，索引0为ASCII，1是旧式2进制，2是新式二进制协议，不同之处在于后者更高效一些。默认的话dump方法使用使用协议0。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">data1 = &#123;<span class="string">'a'</span>: [<span class="number">1</span>, <span class="number">2.0</span>, <span class="number">3</span>, <span class="number">4</span>+<span class="number">6j</span>],</span><br><span class="line">         <span class="string">'b'</span>: (<span class="string">'string'</span>, <span class="string">u'Unicode string'</span>),</span><br><span class="line">         <span class="string">'c'</span>: <span class="literal">None</span>&#125;</span><br><span class="line"></span><br><span class="line">data2 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]]</span><br><span class="line">data3 = np.arange(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.pkl'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> output_file:</span><br><span class="line">    <span class="comment"># Using -1 to make it more stable and less file size</span></span><br><span class="line">    pickle.dump(data1, output_file, <span class="number">-1</span>)</span><br><span class="line">    pickle.dump(data2, output_file, <span class="number">-1</span>)</span><br><span class="line">    pickle.dump(data3, output_file, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.pkl'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> input_fine: <span class="comment">#must be 'rb' in Windows</span></span><br><span class="line">    data4 = pickle.load(input_fine)</span><br><span class="line">    data5 = pickle.load(input_fine)</span><br><span class="line">    data6 = pickle.load(input_fine)</span><br><span class="line">    <span class="keyword">print</span> data4</span><br><span class="line">    <span class="keyword">print</span> data5</span><br><span class="line">    <span class="keyword">print</span> np.sum(data6) <span class="comment">#0+1+2+3+4==10</span></span><br></pre></td></tr></table></figure></p>
<h1 id="Anaconda使用备忘录"><a href="#Anaconda使用备忘录" class="headerlink" title="Anaconda使用备忘录"></a>Anaconda使用备忘录</h1><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>conda create -n 环境名<br>conda create -n 环境名 python=3.6</p>
<h2 id="删除环境"><a href="#删除环境" class="headerlink" title="删除环境"></a>删除环境</h2><p>conda remove -n 环境名 –all</p>
<h2 id="查看所处环境"><a href="#查看所处环境" class="headerlink" title="查看所处环境"></a>查看所处环境</h2><p>conda info -e</p>
<h2 id="升级Conda"><a href="#升级Conda" class="headerlink" title="升级Conda"></a>升级Conda</h2><p>conda update conda</p>
<h2 id="解决错误"><a href="#解决错误" class="headerlink" title="解决错误"></a>解决错误</h2><p>出现<code>Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so</code>错误<br>执行<code>conda install nomkl</code>就可以了。在计算<a href="https://github.com/slaypni/fastdtw" target="_blank" rel="noopener">DTW</a>算法的库时遇到</p>
<h3 id="解决h5py的⚠️"><a href="#解决h5py的⚠️" class="headerlink" title="解决h5py的⚠️"></a>解决h5py的⚠️</h3><p>pip install numpy==1.13.0</p>
<h3 id="找不到conda"><a href="#找不到conda" class="headerlink" title="找不到conda"></a>找不到conda</h3><p>对于Linux: 如果最终conda not found 只需要终端输入<code>export PATH=&quot;/home/xzhou/anaconda2/bin:$PATH&quot;</code>就行，为了永久生效加入这行代码进~/.bashrc, 然后<code>source ~/.bashrc</code><br>对于window: scripts文件夹路径作为环境变量</p>
<h3 id="ipython的环境不正常"><a href="#ipython的环境不正常" class="headerlink" title="ipython的环境不正常"></a>ipython的环境不正常</h3><p>当激活一个环境后 ipython的sys.executable不对劲<br>只需要conda install ipython进行了<br><del>Reactivate the environment or run hash -r (in bash) or rehash (in zsh). 就行了</del></p>
<h3 id="Conda不能联网"><a href="#Conda不能联网" class="headerlink" title="Conda不能联网"></a>Conda不能联网</h3><p>注意当conda不能用时可以考虑使用手机USB共享网络，但是一定要关闭微软输入法，不然会导致蓝屏。最好用4G网络，更新顺利。使用科大镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 优先使用清华 conda 镜像。</span><br><span class="line">conda config --prepend channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;</span><br><span class="line"></span><br><span class="line"># 或者选用科大 conda 镜像。</span><br><span class="line">conda config --prepend channels http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;</span><br><span class="line"></span><br><span class="line">conda config --set show_channel_urls yes</span><br><span class="line"></span><br><span class="line"># 移除镜像</span><br><span class="line">conda config --remove channels https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;</span><br></pre></td></tr></table></figure>
<h2 id="待Check"><a href="#待Check" class="headerlink" title="待Check"></a>待Check</h2><p>如果conda create -n test_env python=2.7 创建出的环境并不在envs里，那么执行<br>conda create –prefix /tmp/test-env python=2.7</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>可视化</tag>
        <tag>Python</tag>
        <tag>MXNet</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2018/07/26/Linux/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc -->
<h1 id="命令行指令"><a href="#命令行指令" class="headerlink" title="命令行指令"></a>命令行指令</h1><p>Linux要查看所有和pdf相关的命令 可以输入pdf 再按Tab键</p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><code>ls -l</code>看当前目录下文件的基本属性</li>
<li><code>ls -a</code>看隐藏文件</li>
<li><code>ls|wc -l</code>查看当前目录下文件+文件夹数</li>
<li><code>ls -l|grep ^d|wc -l</code>显示当前目录文件夹数</li>
<li><code>ls -l|grep ^-|wc -l</code>显示当前目录文件数</li>
<li><code>ls|gawk -F. &#39;{print $2}&#39;|sort -u</code>得到后缀类型（空白是目录） </li>
</ul>
<h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><ul>
<li>bz2文件解压缩：压缩：<code>bzip2 file</code> 解压：<code>bzip2 -dk file.bz2</code>。-d表示解压，-k表示不删除源文件</li>
<li>rar文件解压缩：压缩目录：<code>rar a test ./script/</code>，查看压缩包文件内容是：<code>rar l test.rar</code>，解压：<code>unrar e test.rar ./script/</code></li>
<li>tar文件：压缩目录：<code>tar -cvf test.tar ./test</code>，解压：<code>tar -xvf test.tar</code></li>
<li>zip：压缩目录：<code>zip -r test.zip ./test</code>，解压：<code>unzip test.zip</code></li>
<li>查看zip文件：<code>unzip -l files.zip | less</code>或者<code>vim files.zip</code></li>
<li>fuse-zip 可以实现zip文件的挂载，niubility！</li>
</ul>
<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><ul>
<li>服务器文件拷贝到本地：<code>scp xzhou@172.16.46.88:/home/xzhou/Downloads/test.rar ./Downloads/test.rar</code></li>
<li>本地文件拷贝到docker容器：<code>docker cp ./testwine.zip 容器ID:/home/xzhou/Downloads</code></li>
<li>查找文件：<code>find * test.rar</code></li>
<li>删除文件夹 <code>rm -rf test</code></li>
<li>tree可以看到目录树结构</li>
<li><code>sshfs xzhou@172.16.46.88:/home/xzhou/project 88_mount/</code>将远程服务器88的文件夹/home/xzhou/project挂载到本机的<code>88_mount/</code>目录下，管理员需要<code>sshfs xzhou@172.16.46.88:/home/xzhou/project 88_mount/ -o allow_other</code>，取消挂载<code>fusermount -u 88_mount/</code></li>
<li><code>fusermount</code>是一个很有用的指令，如果挂载不成功就用这个指令取消挂载。但是偶尔会无法取消，显示device is busy，原因就是有进程占着这个文件夹。那么需要先<code>ps aux|grep xzhou</code>找到自己的进程看看什么与此相关，然后<code>kill -s 9 PROCESS_ID</code>，然后再取消挂载。</li>
<li>当然也可以挂载其他服务器的anaconda(这时候注意源文件夹和目标文件夹的名字一致，考虑到不想修改环境变量)，但是注意首先需要将本地的<code>~/.bashrc</code>文件注释掉conda部分再source指令，然后再挂载（不然会出现无响应），再取消注释再source指令</li>
<li><code>ln -s /tmp/test1.txt test2.txt</code> 将在当前目录下创建符号文件“test2.txt”，<code>ln -s /tmp/test1.txt</code> 将在当前目录下创建符号文件“test1.txt”。删除链接符号文件语法是<code>rm file</code>或者<code>rm dir</code></li>
<li>文件夹简单合并命令:将1和2文件夹内容合并到3<code>mkdir 3;mv -i 1 3;mv -i 2 3</code>，这时候1和2文件夹就是空的了。但是当文件夹文件庞大时会报错<code>-bash: /bin/mv: Argument list too long</code>,需要使用指令<code>find 1 -name &#39;*.*&#39; -exec mv {} 3 \;</code>和<code>find 2 -name &#39;*.*&#39; -exec mv {} 3 \;</code></li>
<li>将7行的文本分成前后两部分：<code>cat test.lst|head -n 3</code>(前3) <code>cat test.lst|tail -n +4</code>(后4)</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><code>cat std_std_wiki.txt|grep --color=always -n &#39;query&#39;|less -R</code> 显示查询的结构。-R是Repaint screen, discarding buffered input.</li>
</ul>
<h1 id="Mac对应Windows的按键"><a href="#Mac对应Windows的按键" class="headerlink" title="Mac对应Windows的按键"></a>Mac对应Windows的按键</h1><p><kbd>Command (or Cmd) ⌘</kbd><br><kbd>Shift ⇧</kbd><br><kbd>Option (or Alt) ⌥</kbd><br><kbd>Control (or Ctrl) ⌃</kbd><br><kbd>Caps Lock ⇪</kbd> </p>
<a id="more"></a>
<h2 id="文字处理"><a href="#文字处理" class="headerlink" title="文字处理"></a>文字处理</h2><ul>
<li>Linux系统中的<strong>wc</strong>(Word Count)命令的功能为统计指定文件中的字节数、字数、行数，并将统计结果显示输出</li>
</ul>
<h3 id="PDF相关"><a href="#PDF相关" class="headerlink" title="PDF相关"></a>PDF相关</h3><h4 id="PDF-gt-TXT"><a href="#PDF-gt-TXT" class="headerlink" title="PDF-&gt;TXT"></a>PDF-&gt;TXT</h4><p>pdftotext可以得到pdf对应的纯文本版本</p>
<h4 id="字体嵌入"><a href="#字体嵌入" class="headerlink" title="字体嵌入"></a>字体嵌入</h4><p>会议提交论文要求PDF字体嵌入<br>强制字体嵌入：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pdf2ps template.pdf</span><br><span class="line">ps2pdf -dPDFSETTINGS=/prepress template.ps template.pdf</span><br></pre></td></tr></table></figure><br>验证：<code>pdffonts template.pdf</code><br>可以看到所有字体已被嵌入<br><img src="/2018/07/26/Linux/1.png" class=""></p>
<h4 id="显示PDF信息-MacOS"><a href="#显示PDF信息-MacOS" class="headerlink" title="显示PDF信息 (MacOS)"></a>显示PDF信息 (MacOS)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install xpdf</span><br><span class="line">pdfinfo test.pdf</span><br></pre></td></tr></table></figure>
<h4 id="PDF修改作者等metadata-MacOS"><a href="#PDF修改作者等metadata-MacOS" class="headerlink" title="PDF修改作者等metadata (MacOS)"></a>PDF修改作者等metadata (MacOS)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install exiftool</span><br><span class="line">exiftool -Title&#x3D;&quot;Change This Title&quot; -Subject&#x3D;&quot;Fun and PDF&quot; change_my_meta.pdf</span><br></pre></td></tr></table></figure>
<h2 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h2><p>Mac需要 brew install imagemagick才能使用convert</p>
<p>gif转一些列图片（帧为单位） <code>convert test.gif test%05d.png</code><br>一系列png转视频 <code>ffmpeg -i test%05d.png test.mp4</code></p>
<p>如果需要将视频速度变慢要加选项 <code>-filter:v &quot;setpts=2.0*PTS&quot;</code><br>要让符合MP4V2格式需要加选项 <code>-brand mp42</code><br>比如<code>ffmpeg -i test%05d.png -filter:v &quot;setpts=2.0*PTS&quot; -brand mp42 test.mp4</code></p>
<h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><ul>
<li><code>getconf LONG_BIT</code>得到Linux系统是x86还是x32</li>
<li><code>cat /proc/driver/nvidia/version</code>查看CUDA驱动版本</li>
<li><code>who -b</code> 查看最后一次系统启动的时间 <code>who -r</code> 查看当前系统运行时间</li>
<li>查看所用的桌面环境 <code>env|grep DESKTOP=</code></li>
<li><code>lsb_release -a</code>查看系统版本(没有就用<code>yum install lsb</code>或者<code>cat /etc/os-release</code>)</li>
<li>关机 <code>shutdown -r now</code></li>
</ul>
<h4 id="安装软件的依赖库"><a href="#安装软件的依赖库" class="headerlink" title="安装软件的依赖库"></a>安装软件的依赖库</h4><p>Ubuntu:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo sed -Ei &#39;s&#x2F;^# deb-src &#x2F;deb-src &#x2F;&#39; &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get build-dep wine-stable</span><br></pre></td></tr></table></figure><br>CentOS:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum-builddep -y wine</span><br></pre></td></tr></table></figure></p>
<h3 id="增加用户"><a href="#增加用户" class="headerlink" title="增加用户"></a>增加用户</h3><p>先登录root用户</p>
<ol>
<li>adduser xzhou</li>
<li>passwd xzhou 似乎不需要 因为第一步输入了密码</li>
</ol>
<p>增加网络资源共享文件夹</p>
<ol start="3">
<li>sudo nano /etc/samba/smb.conf</li>
<li>sudo smbpasswd -a xzhou</li>
<li>sudo service smbd restart</li>
</ol>
<h2 id="显卡-GPU计算"><a href="#显卡-GPU计算" class="headerlink" title="显卡 GPU计算"></a>显卡 GPU计算</h2><ul>
<li><code>watch -n 1 nvidia-smi</code> 每秒刷新一次 nvidia-smi</li>
</ul>
<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><ul>
<li><code>ps ax | grep python</code>  可以看到其他人在运行的Python代码</li>
<li>已知PID查看指令所在目录：<code>lsof -p PID|grep cwd</code></li>
<li><code>kill -s 9 PID</code> 强制杀死进程标识号PID的进程</li>
<li>已知PID如何查看完整指令:<code>ps PID</code></li>
<li>已知端口查进程是 <code>lsof –i:端口号</code></li>
</ul>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul>
<li>实时查看网速 <code>sudo apt-get install nethogs &amp; sudo nethogs</code></li>
<li>查看公网IP <code>curl api.ipify.org</code> 查看私有IP <code>ifconfig</code></li>
</ul>
<h1 id="远程控制"><a href="#远程控制" class="headerlink" title="远程控制"></a>远程控制</h1><h2 id="安装VNC-server"><a href="#安装VNC-server" class="headerlink" title="安装VNC-server"></a>安装VNC-server</h2><p><code>ps -ef|grep -i vnc</code> 查看正在运行的vncserver的进程<br><code>vncserver -kill :1</code>      #关闭这个连接<br><code>vncserver :1</code> 重启vncserver</p>
<h2 id="安装teamviewer或xrdp"><a href="#安装teamviewer或xrdp" class="headerlink" title="安装teamviewer或xrdp"></a>安装teamviewer或xrdp</h2><h1 id="美化和汉化man"><a href="#美化和汉化man" class="headerlink" title="美化和汉化man"></a>美化和汉化man</h1><h2 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h2><ol>
<li><code>sudo apt-get install sudo !!-zh</code>???</li>
<li>查看man 手册安装到哪里，<code>dpkg -L manpages-zh | less</code><br>查看到安装在/usr/share/man/zh_CN</li>
<li>设一个中文man别名,     修改 ~/.bashrc 添加一个alias :<br><code>alias cman=&#39;man -M /usr/share/man/zh_CN&#39;</code>，或者用命令<code>sed -i &#39;$a alias cman=&quot;man -M /usr/share/man/zh_CN&quot;&#39; .bashrc</code>(在最后一行后增加一行，并写入文件)</li>
<li><code>source ~/.bashrc</code> 重启终端 <code>cman ls</code>就是汉化的man，<code>man ls</code>就是英文的man<br>##美化</li>
<li><code>sudo apt-get install most</code></li>
<li>修改 ~/.bashrc 添加一个环境变量 :<code>export PAGER=&quot;/usr/bin/most -s&quot;</code>,或者用命令<code>sed -i &#39;$a export PAGER=&quot;/usr/bin/most -s&quot;&#39; .bashrc</code>(在最后一行后增加一行，并写入文件)</li>
<li><code>source ~/.bashrc</code> 重启终端 <code>man ls</code>就是英文的美化版的man</li>
</ol>
<h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><h2 id="让上一个命令以管理员身份执行"><a href="#让上一个命令以管理员身份执行" class="headerlink" title="让上一个命令以管理员身份执行"></a>让上一个命令以管理员身份执行</h2><p><code>apt-get install ranger</code>然后报权限不足再敲入<code>sudo !!</code>运行上一条命令</p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>命令行日常系快捷键</p>
<p><kbd>Ctrl</kbd> + <kbd>U</kbd> - 剪切光标前的内容<br><kbd>Ctrl</kbd> + <kbd>K</kbd> - 剪切光标至行末的内容<br><kbd>Ctrl</kbd> + <kbd>Y</kbd> - 粘贴<br><kbd>Ctrl</kbd> + <kbd>E</kbd> - 移动光标到行末<br><kbd>Ctrl</kbd> + <kbd>A</kbd> - 移动光标到行首<br><kbd>Ctrl</kbd> + <kbd>F</kbd> - 跳向下一个空格<br><kbd>Ctrl</kbd> + <kbd>B</kbd> - 跳回上一个空格<br><kbd>Alt</kbd> + <kbd>Backspace</kbd> - 删除前一个单词<br><kbd>Ctrl</kbd> + <kbd>W</kbd> - 剪切光标后一个单词<br><kbd>Shift</kbd> + <kbd>Insert</kbd> - 向终端内粘贴文本</p>
<h2 id="暂停并在后台运行命令"><a href="#暂停并在后台运行命令" class="headerlink" title="暂停并在后台运行命令"></a>暂停并在后台运行命令</h2><p><kbd>Ctrl</kbd> + <kbd>Z</kbd> - 暂停应用程序（比如正在用nano编辑test.txt）<br>fg - 重新将程序唤到前台<br>jobs - 查看任务数目<br>只要按<kbd>Ctrl</kbd> + <kbd>Z</kbd>，前台的命令就会暂停，画面就切回到命令行了。然后你就能运行你想要运行的命令，等命令运行完后在终端窗口输入fg就可以回到先前暂停的任务</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><h3 id="普通下载"><a href="#普通下载" class="headerlink" title="普通下载"></a>普通下载</h3><p>使用axel<br><code>apt-get install axel</code><br>使用简单 <code>axel URL</code><br>我常用的指令:多线程(10个)下载并改变进度条样式：<code>axel -n 32 -a URL</code></p>
<h3 id="下载视频"><a href="#下载视频" class="headerlink" title="下载视频"></a>下载视频</h3><p>使用you-get和youtube-dl以及<a href="http://docker run alpine cat /etc/os-release.flvcd.com/">硕鼠</a><br>从Youtube视频中下载音频（wav格式）支持b站<br>youtube-dl –extract-audio –audio-format wav URL</p>
<p>比如我想下载这个<a href="http://www.miaopai.com/show/R~22buLsn55r7IVQKvMjZ4Le2mJ7PS7BqxjbAg__.htm" target="_blank" rel="noopener">情非得已</a>的音频</p>
<ol>
<li>使用python3安装you-get</li>
<li><code>you-get http://www.miaopai.com/show/R~22buLsn55r7IVQKvMjZ4Le2mJ7PS7BqxjbAg__.htm</code></li>
<li><code>ffmpeg -i 阿卡贝拉版情非得已.mp4 -f mp3 -vn 阿卡贝拉版情非得已.mp3</code><br>参数解释：<br>-i 表示input，即输入文件<br>-f 表示format，即输出格式<br>-vn表示vedio not，即输出不包含视频</li>
<li><code>play 阿卡贝拉版情非得已.mp3</code> (需要安装sox库)</li>
</ol>
<h3 id="后台下载视频"><a href="#后台下载视频" class="headerlink" title="后台下载视频"></a>后台下载视频</h3><p>如果现在很多个b站视频需要下载，是不是就是CTRL + Z and fg 结合 youtube-dl，实践发现不行，挂起时下载会暂停。之前我玩过树莓派，很多Linux知识都是从那里学到的</p>
<p>所以我发现了screen命令. MacOS是自带的,Linux使用<code>sudo apt-get install screen</code>安装</p>
<p>终端输入（Xshell软件里操作一样的）:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen youtube-dl --extract-audio --audio-format mp3 https://www.bilibili.com/video/av6846882</span><br></pre></td></tr></table></figure><br>它会下载第一个视频，这时候按住<kbd>Ctrl</kbd>+<kbd>A</kbd>然后<kbd>Ctrl</kbd>+<kbd>D</kbd>会回到终端，但是视频依然在下载，这时候再次终端输出新的视频PID，就会下载第二个，以此类推…</p>
<p>查看所以任务是<code>screen -ls</code>,所有视频一旦完成下载，<code>screen -ls</code>就会输出<code>No Sockets found in bilibala...</code>。说明一个任务完成它会自动退出那个虚拟终端的</p>
<p>如果我们关闭终端不影响screen，不信你重新打开终端试试<code>screen -ls</code></p>
<p>恢复一个虚拟终端命令是<code>screen -r ID号</code><br>如果终端本身自己不能结束，就<code>screen -r ID号</code>然后<code>exit</code></p>
<h1 id="虚拟化技术"><a href="#虚拟化技术" class="headerlink" title="虚拟化技术"></a>虚拟化技术</h1><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="指令-1"><a href="#指令-1" class="headerlink" title="指令"></a>指令</h3><ul>
<li>搜索镜像<code>docker search 镜像ID</code></li>
<li>使用后台运行(-d)容器<code>docker run -d 镜像ID</code></li>
<li>运行基于容器名<code>docker run --name mycontainer 镜像ID</code></li>
<li>运行时暴露端口<code>-p &lt;host-port&gt;:&lt;container-port&gt;</code>(如果没指定host-port,主机会随机指定一个可使用的port去和container的port做连接，此时可用<code>docker port 容器ID 容器暴露的端口</code>或者<code>docker ps</code>检查)</li>
<li>运行时挂载宿主机目录<code>-v &lt;host-dir&gt;:&lt;container-dir&gt;</code></li>
<li>运行容器的shell命令<code>docker run -it ubuntu bash</code></li>
<li>查看当前正在运行的容器 <code>docker ps</code>，显示已经退出的容器 <code>docker ps -a</code></li>
<li>列出容器详细信息，例如ip地址<code>docker inspect 容器ID</code></li>
<li>列出容器的标准输出stdout和stderr<code>docker logs 容器ID</code></li>
<li>显示所有镜像 <code>docker images</code></li>
<li>启动/停止某个容器 <code>docker start/stop 容器ID</code></li>
<li>删除镜像 <code>docker rmi 镜像ID</code></li>
<li>删除所有TAG为<none>的镜像 <code>docker images|grep none|awk &#39;{print $3}&#39;|xargs docker rmi</code></li>
<li>删除容器 <code>docker rm 容器ID</code></li>
<li>删除所有容器 <code>docker rm $(docker ps -aq)</code></li>
<li>在容器运行命令显示系统信息 <code>docker run ubuntu cat /etc/os-release</code>，没有这个镜像则创建镜像（用完可删除容器）</li>
<li>开启容器交互模式：<code>docker run -it ubuntu</code> exit退出</li>
<li>打开交互式终端 <code>docker start -i 容器ID</code>，每次使用就使用这个命令就行</li>
</ul>
<h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>一个范例：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM nginx:1.11-alpine</span><br><span class="line">COPY index.html &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</span><br><span class="line">EXPOSE 80</span><br><span class="line"># equal to nginx -g daemon off;</span><br><span class="line">CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</span><br></pre></td></tr></table></figure><br>执行：<br><code>docker build -t my-nginx-image:latest .</code><br><code>docker run -d -p 80:80 my-nginx-image:latest</code><br><code>curl -i http://docker</code>(得到完整的http response)</p>
<p>Dockerfile的ONBUILD指令：</p>
<ul>
<li>旧dockerfile中有ONBUILD前缀的指令在docker build的时候不会执行</li>
<li>新的dockerfile在docker build的时候会完整执行基础镜像的dockerfile指令（包含ONBUILD 的）以及自己的dockerfile包含的指令</li>
<li>有效简短继承旧dockerfile时需要写的指令量</li>
<li>祖父dockerfile中的ONBUILD在孙子dockerfile做docker build时不会执行</li>
</ul>
<p>使用.dockerignore可避免增加无用的文件或者敏感文件进入build的过程</p>
<h2 id="建立Dockerfile"><a href="#建立Dockerfile" class="headerlink" title="建立Dockerfile"></a>建立Dockerfile</h2><ul>
<li>根据<a href="https://github.com/xiaozhah/WineDocker/blob/master/Dockerfile" target="_blank" rel="noopener">Dockerfile</a>建立文件 <code>docker build -t wineubuntu . --no-cache --rm</code></li>
<li>⚠️ Dockerfile不同于SingularityFile 它的建立每个RUN是独立的，因此涉及相对目录时要小心</li>
<li>–no-cache代表不使用缓存，这样建立出错不能从中间某一步重来; –rm代表删除建立中的临时容器</li>
<li><code>-t &lt;repository:tag&gt;</code>表示生成镜像的repository名称（即image名称），以及通常作为区分不同版本的TAG</li>
<li>提交至仓库 <code>docker push xzhou2333/wineubuntu</code></li>
</ul>
<h3 id="镜像打包发布"><a href="#镜像打包发布" class="headerlink" title="镜像打包发布"></a>镜像打包发布</h3><ul>
<li><a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>注册账户开启新的仓库并在终端登录此账号<code>docker login</code></li>
<li><code>docker commit 容器ID xzhou2333/winecentos</code>,这时候就多出一个镜像了</li>
<li><code>docker push xzhou2333/winecentos</code></li>
</ul>
<h2 id="Singularity"><a href="#Singularity" class="headerlink" title="Singularity"></a>Singularity</h2><h3 id="指令-2"><a href="#指令-2" class="headerlink" title="指令"></a>指令</h3><p>–H 指定家目录<br>–containall 指定以isolated的方式运行镜像(也就是说一般默认会挂载宿主机home目录,pwd当前工作目录以及/tmp目录,但是现在都不挂载)<br>–pwd 指定进入容器后的初始工作目录</p>
<h3 id="镜像打包发布-1"><a href="#镜像打包发布-1" class="headerlink" title="镜像打包发布"></a>镜像打包发布</h3><ul>
<li>注册<a href="https://www.singularity-hub.org" target="_blank" rel="noopener">Singularity Hub</a>账户开启新的仓库</li>
<li>关联Github的Singularity仓库，<a href="https://github.com/xiaozhah/WineSingularity" target="_blank" rel="noopener">例如</a></li>
<li>云端构建镜像 限时两小时</li>
</ul>
<h1 id="wine"><a href="#wine" class="headerlink" title="wine"></a>wine</h1><h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><p>一般情况下简单的可以终端执行的exe执行就是：<code>wine test.exe</code><br>首先wine不是windows模拟器也就基本没有性能损失。<br>我测试了wine的性能，使用的代码来自<a href="https://rosettacode.org/wiki/Perfect_numbers#C" target="_blank" rel="noopener">Perfect_numbers</a>，OSX,Windows,Ubuntu,Ubuntu(Wine),执行时间分别是61.87s、58.89s、50.88s、50.93s。所以还真是很快，基本没有性能损失。<br>但是有一次我的C++工程是VS2015编译的，其中底层调用了windows.h，想在Linux编译很麻烦，因此尝试wine。另外这个exe是会调用MXNet的C++API（因为包含神经网络的前馈运算），需要以下Dll库</p>
<blockquote>
<p>libgcc_s_seh-1.dll  libgfortran-3.dll  libmxnet.dll  libopenblas.dll  libquadmath-0.dll</p>
</blockquote>
<p>在Linux上直接执行报错，说是某个函数有未实现的函数(wine: Call from 0x7b44cbda to unimplemented function vcomp140.dll._vcomp_for_static_simple_init_i8, aborting)<br>我是用VS2015编译的嘛所以wine的可能在vc运行时的版本低了，需要更新。它会下载原生vcomp140.dll然后更新覆盖原本的dll<br>终端执行<code>winetricks -q vcrun2015</code>。<br>如果是用ssh连上的没有图形界面的话，可能需要使用<code>xvfb-run winetricks -q vcrun2015</code>,让Linux模拟一个桌面(需要安装xvfb软件)<br>总结一下：</p>
<ol>
<li>安装wine 见<a href="https://wiki.winehq.org/Ubuntu_zhcn" target="_blank" rel="noopener">安装 WineHQ 安装包</a></li>
<li><code>sudo apt-get install cabextract</code>(第五步需要)</li>
<li><strong>退出sudo权限</strong></li>
<li><a href="https://wiki.winehq.org/Winetricks" target="_blank" rel="noopener">安装Winetricks</a></li>
<li>为了运行由VS2015编译出来的程序安装vc2015运行时 <code>xvfb-run ./winetricks -q vcrun2015</code>（可选，但是不安装有些软件可能无法运行，xvfb-run也是可选项）</li>
<li>将dll与exe放在同一个目录下即可。<code>wine test.exe</code></li>
</ol>
<h2 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h2><p>总结一下：</p>
<ol>
<li>安装wine 见<a href="https://wiki.winehq.org/CentOS/RHEL" target="_blank" rel="noopener">安装 WineHQ 安装包 CentOS/RHEL</a>,然后<code>yum install xorg-x11-server-Xvfb wget</code></li>
<li><strong>退出sudo权限</strong></li>
<li><a href="https://wiki.winehq.org/Winetricks" target="_blank" rel="noopener">安装Winetricks</a>，这时候一般64位的终端exe即可运行了(wine test.exe不行再敲一编就行了…)</li>
<li>为了运行由VS2015编译出来的程序安装vc2015运行时 <code>./winetricks -q vcrun2015</code>（可选，但是不安装有些软件可能无法运行，xvfb-run也是可选项）</li>
<li><del>第四步报错：(fixme:service:scmdatabase_autostart_services Auto-start service L”MountMgr” failed to start: 2,fixme:service:scmdatabase_autostart_services Auto-start service L”WineBus” failed to start: 2)参考<a href="https://jingyan.baidu.com/article/d169e1867ba57f436611d8d2.html" target="_blank" rel="noopener">百度知道</a>，即<br><code>find / -name mountmgr.sys
cp /usr/lib64/wine/fakedlls/mountmgr.sys /home/xzhou/.wine/drive_c/windows/system32/drivers/
find / -name winebus.sys
cp /usr/lib64/wine/fakedlls/winebus.sys /home/xzhou/.wine/drive_c/windows/system32/drivers/</code></del></li>
<li><del>解决第五步之后第四步继续报错Bad EXE Format.因为CentOS 7没有32位版本，EPEL的wine 没有32位wine，只有64位wine。而vc_redist.x86.exe是一个32位程序。参考<a href="https://www.yuzhi100.com/article/centos-7-anzhuang-wine-3" target="_blank" rel="noopener">CentOS 7 使用 Yum 安装使用最新稳定版 Wine 3</a>继续安装32位的wine</del></li>
<li><del>安装完成后第四步的Bad EXE Format消除，错误变成<code>0009:fixme:actctx:parse_depend_manifests Could not find dependent assembly L&quot;Microsoft.Windows.Common-Controls&quot; (6.0.0.0)</code>。</del></li>
<li>然后实在找不到解决办法了。接第四步暴力解决，直接将上一个ubuntu方法的dll拷贝（下载链接见<a href="https://drive.google.com/open?id=1ZhUCU7Dh_YnhAkgHlf_-nQf65akoyVzQ" target="_blank" rel="noopener">谷歌网盘</a>）过来。<code>cp /home/xzhou/Downloads/vcomp140.dll /home/xzhou/.wine/drive_c/windows/system32</code>。完美解决</li>
</ol>
<p>所以只需至少要执行1、2、3、4、8即可解决。<br>不过最好第五步也执行以下这样运行exe时少两个fixme警告</p>
<h1 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h1><p>目前使用的是ngrok，如果从内网服务器下载软件会先<code>python -m SimpleHTTPServer</code>再<code>ngrok http 8000</code></p>
]]></content>
      <categories>
        <category>常见指令以及用法备忘录</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Unix</tag>
        <tag>操作系统</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>博客更新日志</title>
    <url>/2018/07/30/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc -->
<p>2018年7月24日周二我开始着手研究博客。<br>起因是因为印象笔记的最高级会员一个笔记的容量也只有200MB，对于游记里喜欢放照片的我来说太小了。<br>因此决定从使用了五年的印象笔记迁移至我现在这个博客。</p>
<p>曾经我写印象笔记是直接使用，后来使用StackExchange论坛发现了Markdown这种写作方式，于是购买了印象笔记插件“马克飞象”，总体来说不错。</p>
<p>因此新博客站定很重要的一个功能就是支持Markdown。</p>
<a id="more"></a>
<p>最先注意到的框架是Hugo,因为自己喜欢的一个可视化设计师Nadieh Bremer的<a href="https://www.visualcinnamon.com/" target="_blank" rel="noopener">博客</a>使用的就是这个，我非常喜欢网站的主题Victor Hugo。我同时了解到这是一个静态网站生成器，优点是生成速度是同类框架中最快的，安装也简单。<br>但是一开始我就知道我希望自己的网站具备什么，比如旅行博客可以拥有背景音乐，但是搜索了下，资料很少。jekyll和Hexo和Hugo都是静态网站生成器，Hexo生成速度介于三者之间，而且中文文档也很不错，因为使用的是NodeJs所以拓展性是优于Hugo的。</p>
<p>所以选择<strong>Hexo</strong>这个作为网站框架，主题先暂时配置成主流黑白风格的Next，不过我觉得这种风格太程序员了，之后会换掉。（更换主题在Hexo中很简单）</p>
<p><strong>注意：以下主目录下的_config.yml称为<kbd>站点配置文件</kbd>，主目录下的themes目录下特定主体内的_config.yml称为<kbd>主题配置文件</kbd></strong></p>
<ol>
<li>与自己的Github关联并托管自己的网站内容在上面，很多博客已有叙述这里不多说。设置Next主题，设置根目录下_config.yml的theme: next,设置主题目录下的_config.yml的Schemes字段更换风格</li>
<li>按照<a href="https://hexo.io/zh-cn/docs/asset-folders.html" target="_blank" rel="noopener">资源文件夹</a>的说法，打开<kbd>站点配置文件</kbd>内的post_asset_folder字段,这样不管是图片还是自己本地的音乐都可以直接被Markdown引用。<br>每当<code>dexo new &quot;testPost&quot;</code>,<code>source/_posts_</code>目录下都会出现testPost文件夹以及testPost.md。所以素材放置在testPost中</li>
</ol>
<p>图片：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img test.jpg %&#125;</span><br><span class="line"></span><br><span class="line">&lt;img src&#x3D;&quot;test.jpg&quot; width&#x3D;&quot;50%&quot; height&#x3D;&quot;%50&quot;&gt;</span><br></pre></td></tr></table></figure><br>本地音乐：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% aplayer &quot;单车练习曲&quot; &quot;王雁盟&quot; &quot;单车练习曲.mp3&quot; &quot;单车练习曲.jpg&quot; %&#125;</span><br></pre></td></tr></table></figure><br>网易云音乐：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> </span></span><br><span class="line"><span class="tag"><span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">86</span> </span></span><br><span class="line"><span class="tag"><span class="attr">src</span>=<span class="string">"//music.163.com/outchain/player?type=2&amp;id=28582962&amp;auto=1&amp;height=66"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 config.yml 文件中的 post_asset_folder 选项设为 true 来打开。</p>
</blockquote>
<ol start="3">
<li>设置标签，分类以及文章目录（不要安装hexo-toc插件不然目录不能跳转）<br>设置如我这篇博客<br><code>toc: true</code>代表打开目录<code>&lt;!-- toc --&gt;</code>设置目录出现的位置<br><code>comments: true</code>代表打开评论，评论区域，使用韩国“来必力”评论系统，填写主题目录下的_config.yml的livere_uid字段<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 博客更新日志</span><br><span class="line">date: 2018-07-30 14:54:12</span><br><span class="line">tags: [博客,Hexo]</span><br><span class="line">comments: true</span><br><span class="line">toc: true</span><br><span class="line">categories: 博客</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;!-- toc --&gt;</span><br></pre></td></tr></table></figure></li>
<li>2018/7/30 增加<a href="https://github.com/theme-next/hexo-generator-searchdb" target="_blank" rel="noopener">搜索</a>功能。<br>修改<kbd>站点配置文件</kbd><blockquote>
<p>search:<br>path: search.xml<br>field: post<br>format: html<br>limit: 10000</p>
</blockquote>
</li>
</ol>
<p>修改<kbd>主题配置文件</kbd>local_search字段的enable，设置为true</p>
<ol start="5">
<li>增加了以下几个方面：</li>
</ol>
<ul>
<li>新增“关于我“页面:去掉<kbd>主题配置文件</kbd>menu的<code>about: /about/ || user</code>的注释</li>
<li>修改个人头像:修改<kbd>主题配置文件</kbd>avatar字段的url。我这里是<code>/images/icon.jpg</code></li>
<li>增加站点统计（使用不蒜子）:设置<kbd>主题配置文件</kbd>busuanzi_count的enable为true</li>
<li>增加背景图片（修改了<code>themes\next\source\css\_custom\custom.styl</code>文件，图片来源于<a href="https://source.unsplash.com/" target="_blank" rel="noopener">https://source.unsplash.com/</a>）<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// Custom styles.</span><br><span class="line">body &#123;</span><br><span class="line">    background:url(https://images.unsplash.com/photo-1533555855029-9341affa632a?ixlib=rb-0.3.5&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;s=7df5c95df1834e4ff9838f6a96c95096&amp;auto=format&amp;fit=crop&amp;w=2380&amp;q=80);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-attachment:fixed;</span><br><span class="line">    background-position:50% 50%;</span><br><span class="line">&#125;.main-inner &#123; </span><br><span class="line">    margin-top: 60px;</span><br><span class="line">    padding: 60px 60px 60px 60px;</span><br><span class="line">    background: #fff;</span><br><span class="line">    opacity: 0.9;</span><br><span class="line">    min-height: 500px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="6">
<li>自己写了一个Sublime3插件用于复制图片粘贴并用合适格式粘贴进Markdown</li>
</ol>
<p>在Mac下是<kbd>Optopn⌥</kbd> + <kbd>Cmd⌘</kbd> + <kbd>c</kbd>复制文件完整路径, 然后<kbd>Control⌃</kbd>+<kbd>Cmd⌘</kbd>+<kbd>v</kbd>可以得到类似这样的表示<code></code></p>
<p>新建插件<img src="ANq5zfIS.png" width="30%" height="%30"></p>
<p>复制以下代码<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sublime</span><br><span class="line"><span class="keyword">import</span> sublime_plugin</span><br><span class="line"><span class="keyword">import</span> random, string, os, shutil</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pasteimageCommand</span><span class="params">(sublime_plugin.TextCommand)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, edit)</span>:</span></span><br><span class="line">    _filename = self.view.file_name()</span><br><span class="line">    <span class="keyword">if</span> _filename != <span class="literal">None</span>:</span><br><span class="line">      old_file_path = sublime.get_clipboard()</span><br><span class="line">      suffix = os.path.splitext(old_file_path)[<span class="number">1</span>]</span><br><span class="line">      <span class="keyword">if</span> os.path.exists(old_file_path):</span><br><span class="line">        basename  = os.path.splitext(_filename)[<span class="number">0</span>]</span><br><span class="line">        random_string = <span class="string">''</span>.join(random.sample(string.ascii_letters + string.digits, <span class="number">8</span>))+suffix</span><br><span class="line">        new_file_path = os.path.join(basename, random_string)</span><br><span class="line">        shutil.copyfile(old_file_path, new_file_path)</span><br><span class="line">        cur_pos = self.view.sel()[<span class="number">0</span>].begin()</span><br><span class="line">        self.view.insert(edit, cur_pos, <span class="string">'&#123;% asset_img '</span>+os.path.basename(new_file_path)+<span class="string">' %&#125;'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      print(<span class="string">"This file hasn't been saved"</span>)</span><br></pre></td></tr></table></figure><br>绑定快捷键<img src="icw4h7bn.png" width="30%" height="%30"><br><img src="/2018/07/30/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/JGhTRl9O.png" class=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123; &quot;keys&quot;: [&quot;ctrl+super+v&quot;], &quot;command&quot;: &quot;pasteimage&quot; &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br>之后开启Sublime这个插件就自动加载了</p>
<ol start="7">
<li>未来可能会设置标签云以及思维导图</li>
</ol>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
        <tag>Sublime Text3</tag>
      </tags>
  </entry>
  <entry>
    <title>Tensorflow</title>
    <url>/2018/07/26/Tensorflow/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc -->
<h1 id="Tensorflow基本指南"><a href="#Tensorflow基本指南" class="headerlink" title="Tensorflow基本指南"></a>Tensorflow基本指南</h1><ol>
<li>使用Anaconda安装，运行更快，参见</li>
<li>会话注册<code>sess=tf.InteractivateSession()</code><br>表示将是这个创建的session作为随后默认的session，之后的运行也运算也在这里面进行</li>
<li>列出当前每个节点使用的device，使用的是<code>tf.Session(config=tf.ConfigProto(log_device_placement=True))</code></li>
</ol>
<a id="more"></a>
<h1 id="Tensorflow如何处理训练模式和测试模式"><a href="#Tensorflow如何处理训练模式和测试模式" class="headerlink" title="Tensorflow如何处理训练模式和测试模式"></a>Tensorflow如何处理训练模式和测试模式</h1><p>DropOut层和BN层都有训练模式、测试模式。<br>DropOut层：设立一个placeholder，设置训练时一个数，测试时设置为0<br><code>phase = tf.placeholder(tf.bool, name=&#39;phase&#39;)</code><br>BN层：未知</p>
<h1 id="模型的导入导出"><a href="#模型的导入导出" class="headerlink" title="模型的导入导出"></a>模型的导入导出</h1><h2 id="载入模型"><a href="#载入模型" class="headerlink" title="载入模型"></a>载入模型</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">trainable = tf.trainable_variables()</span><br><span class="line">optim = optimizer.minimize(loss, global_step=global_step, var_list=trainable)</span><br><span class="line">saver = tf.train.Saver(trainable)</span><br><span class="line">saver.restore(sess, <span class="string">'./logdir/model.ckpt'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="载入多模型-交替循环不同部分"><a href="#载入多模型-交替循环不同部分" class="headerlink" title="载入多模型 交替循环不同部分"></a>载入多模型 交替循环不同部分</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">trainable = tf.trainable_variables()</span><br><span class="line">trainable_DNN = tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES,<span class="string">"DNN_part"</span>)</span><br><span class="line">trainable_WaveNet = tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES,<span class="string">"wavenet_part"</span>)</span><br><span class="line"></span><br><span class="line">optim = optimizer.minimize(loss, global_step=global_step, var_list=trainable)</span><br><span class="line">optim_DNN = optimizer.minimize(loss, global_step=global_step, var_list=trainable_DNN)</span><br><span class="line">optim_WaveNet = optimizer.minimize(loss, global_step=global_step, var_list=trainable_WaveNet)</span><br><span class="line"></span><br><span class="line">saver = tf.train.Saver(trainable)</span><br><span class="line">saver.restore(sess, <span class="string">'./logdir/model.ckpt'</span>)</span><br><span class="line">DNN_saver = tf.train.Saver(trainable_DNN)</span><br><span class="line">DNN_saver .restore(sess, <span class="string">'./logdir/DNN_part/Unit2Vec.ckpt'</span>)</span><br><span class="line">WaveNet_saver = tf.train.Saver(trainable_WaveNet)</span><br><span class="line">WaveNet_saver.restore(sess, <span class="string">'./logdir/WaveNet_part/Unit2Vec.ckpt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#part 1-&gt;3-&gt;2-&gt;3-&gt;2-&gt;3...</span></span><br><span class="line"><span class="keyword">if</span> step &lt; <span class="number">10</span>: <span class="comment">#turn round every 10 steps  #part 1</span></span><br><span class="line">    summary, loss_value, acc_value, _ = sess.run([summaries, loss, acc, optim])</span><br><span class="line"><span class="keyword">elif</span> int(step/<span class="number">10</span>) % <span class="number">2</span> == <span class="number">0</span>:               <span class="comment">#part 2</span></span><br><span class="line">    summary, loss_value, acc_value, _ = sess.run([summaries, loss, acc, optim_WaveNet])</span><br><span class="line"><span class="keyword">elif</span> int(step/<span class="number">10</span>) % <span class="number">2</span> == <span class="number">1</span>:               <span class="comment">#part 3</span></span><br><span class="line">    summary, loss_value, acc_value, _ = sess.run([summaries, loss, acc, optim_DNN])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(x)</span><br></pre></td></tr></table></figure>
<h1 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h1><h2 id="Boardcasting机制"><a href="#Boardcasting机制" class="headerlink" title="Boardcasting机制"></a>Boardcasting机制</h2><p>可以看到b的维度竟然和a的最后一维一致，使用了boardcasting</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">a=tf.constant(<span class="number">1</span>,shape=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>])</span><br><span class="line">b=tf.constant(range(<span class="number">5</span>))</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    tf.global_variables_initializer().run()</span><br><span class="line">    <span class="keyword">print</span> sess.run(a+b)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>[[[1 2 3 4 5]<br>    [1 2 3 4 5]<br>    [1 2 3 4 5]]<br>   [[1 2 3 4 5]<br>    [1 2 3 4 5]<br>    [1 2 3 4 5]]]</p>
</blockquote>
<h2 id="tf-one-hot"><a href="#tf-one-hot" class="headerlink" title="tf.one_hot()"></a>tf.one_hot()</h2><p><code>tf.one_hot([[0,1],[2,3]],depth=5)</code>得到的数据维度是(2,2,5)<br><code>tf.one_hot([[[0,1],[2,3]],[[0,1],[2,3]]],depth=5)</code>得到的数据维度是(2,2,2,5)</p>
<h2 id="tf-unique和tf-unique-with-counts函数"><a href="#tf-unique和tf-unique-with-counts函数" class="headerlink" title="tf.unique和tf.unique_with_counts函数"></a>tf.unique和tf.unique_with_counts函数</h2><p>类似于mma的<code>{1, 1, 1, 1, 5, 5, 3, 3, 3, 2, 2, 2, 2, 4} // Counts</code>功能<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">Y1 = tf.constant([<span class="number">5</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>])</span><br><span class="line">Y2 = tf.unique(Y1)</span><br><span class="line">Y3 = tf.unique_with_counts(Y1) <span class="comment">#Can Count value</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    [Y2,Y3] = sess.run([Y2,Y3])</span><br><span class="line">    <span class="keyword">print</span> Y2</span><br><span class="line">    <span class="comment"># Unique(y=array([5, 1, 2, 4, 3], dtype=int32),idx=array([0, 0, 1, 2, 2, 3, 3, 3, 4, 4], dtype=int32))</span></span><br><span class="line">    <span class="keyword">print</span> Y3</span><br><span class="line">    <span class="comment"># UniqueWithCounts(y=array([5, 1, 2, 4, 3], dtype=int32), idx=array([0, 0, 1, 2, 2, 3, 3, 3, 4, 4], dtype=int32), count=array([2, 1, 2, 3, 2], dtype=int32))</span></span><br></pre></td></tr></table></figure></p>
<h2 id="实现左移一个数，最右补零"><a href="#实现左移一个数，最右补零" class="headerlink" title="实现左移一个数，最右补零"></a>实现左移一个数，最右补零</h2><p>将<code>[[0],[1],[2],[3]]</code>-&gt;<code>[[1],[2],[3],[0]]</code><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">encoded = tf.reshape(tf.constant(range(<span class="number">4</span>)),[<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>])</span><br><span class="line">shifted = tf.slice(encoded, [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],[<span class="number">-1</span>, tf.shape(encoded)[<span class="number">1</span>] - <span class="number">1</span>, <span class="number">-1</span>])</span><br><span class="line">shifted = tf.pad(shifted, [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="keyword">print</span> sess.run([encoded,shifted])</span><br></pre></td></tr></table></figure></p>
<h2 id="各种loss函数"><a href="#各种loss函数" class="headerlink" title="各种loss函数"></a>各种loss函数</h2><h3 id="tf-losses-mean-squared-error理解"><a href="#tf-losses-mean-squared-error理解" class="headerlink" title="tf.losses.mean_squared_error理解"></a>tf.losses.mean_squared_error理解</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">shape_obj = (<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>)</span><br><span class="line">Y1 = tf.random_normal(shape=shape_obj)</span><br><span class="line">Y2 = tf.random_normal(shape=shape_obj)</span><br><span class="line"></span><br><span class="line">loss1 = tf.reduce_sum(tf.pow(Y1 - Y2, <span class="number">2</span>)) / (reduce(<span class="keyword">lambda</span> x, y: x*y, shape_obj))</span><br><span class="line">loss2 = tf.reduce_mean(tf.squared_difference(Y1, Y2))</span><br><span class="line">loss3 = tf.losses.mean_squared_error(predictions=Y1, labels=Y2)</span><br><span class="line">loss4 = tf.nn.l2_loss(Y1 - Y2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="comment">#不需要初始化</span></span><br><span class="line">    lis = sess.run([Y1, Y2, loss1, loss2, loss3, loss4])</span><br><span class="line">    Y1, Y2 = lis[:<span class="number">2</span>] <span class="comment">#Y1, Y2</span></span><br><span class="line">    <span class="keyword">print</span> lis[<span class="number">2</span>:]  <span class="comment">#loss1, loss2, loss3, loss4</span></span><br><span class="line">    lis=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(shape_obj[<span class="number">-1</span>]):</span><br><span class="line">        lis.append(np.mean(np.square((Y1[:,:,i]-Y2[:,:,i]))))</span><br><span class="line">    <span class="keyword">print</span> np.mean(lis)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>[2.0185342, 2.0185342, 2.0185342, 90.83404]<br>2.018534</p>
</blockquote>
<p>可以看到tf把最后一维（shape_obj 是二维也是一样）当做batch_axis，而且loss没有除以2<br>在Gluon里就相当于：<code>loss1=gluon.loss.L2Loss(batch_axis=-1)*2</code><br>还发现一个问题就是<code>sess.run(想要的必须写在一起)</code>，如果<code>sess.run(loss1);sess.run(loss1)</code>结果也会不一样，因为每运行一次run计算图就运行一次，因为每次运行的随机数不一样，结果自然也不一样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#Indicate 2-th dims as batch_axis</span></span><br><span class="line">loss1=gluon.loss.L2Loss(batch_axis=<span class="number">1</span>)</span><br><span class="line">a=mx.nd.random.uniform(<span class="number">0</span>, <span class="number">10</span>,shape=(<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>))</span><br><span class="line">b=mx.nd.random.uniform(<span class="number">0</span>, <span class="number">10</span>,shape=(<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> loss1(a,b)</span><br><span class="line"><span class="comment">#[  4.95132017  11.42089748   7.28211212   6.8867259    6.93179274]</span></span><br><span class="line"><span class="comment">#&lt;NDArray 5 @cpu(0)&gt;</span></span><br><span class="line">lis=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    lis.append(<span class="number">1.</span>/<span class="number">2</span>*np.mean(np.square((a[:,i,:]-b[:,i,:]).asnumpy())))</span><br><span class="line"><span class="keyword">print</span> lis</span><br><span class="line"><span class="comment">#[4.9513201713562012, 11.420897483825684, 7.282111644744873, 6.886725902557373, 6.9317927360534668]</span></span><br></pre></td></tr></table></figure>
<h3 id="tf-losses-sparse-softmax-cross-entropy理解"><a href="#tf-losses-sparse-softmax-cross-entropy理解" class="headerlink" title="tf.losses.sparse_softmax_cross_entropy理解"></a>tf.losses.sparse_softmax_cross_entropy理解</h3><p>sparse_softmax_cross_entropy要求labels是一个整数列表形式，范围是[0, num_classes], logits是一个浮点数据，存储的是网络输出的值</p>
<p>MXNet和tf结果一样，说明在二维数据的时候，都是将第一维作为batch_axis,类别总数可以从<code>Y1.shape[1]</code>知道<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">Y1 = tf.constant(np.arange(<span class="number">50</span>).reshape((<span class="number">5</span>,<span class="number">10</span>)),dtype=tf.float32)</span><br><span class="line">Y2 = tf.constant([<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">1</span>])</span><br><span class="line">Y3 = tf.one_hot(Y2, depth = Y1.shape[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">loss1 = tf.losses.sparse_softmax_cross_entropy(logits=Y1, labels=Y2)</span><br><span class="line">loss2 = tf.losses.softmax_cross_entropy(logits=Y1, onehot_labels=Y3)</span><br><span class="line">loss3 = tf.nn.softmax_cross_entropy_with_logits(logits=Y1, labels=Y3)</span><br><span class="line">loss4 = tf.reduce_mean(loss3)</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    [loss1,loss2,loss3,loss4] = sess.run([loss1,loss2,loss3,loss4])</span><br><span class="line">    <span class="keyword">print</span> loss1,loss2    <span class="comment">#5.4586296, 5.4586296</span></span><br><span class="line">    <span class="keyword">print</span> loss3.shape    <span class="comment">#(5,)</span></span><br><span class="line">    <span class="keyword">print</span> np.mean(loss3) <span class="comment">#5.4586296</span></span><br><span class="line">    <span class="keyword">print</span> loss4          <span class="comment">#5.4586296</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><br>用MXNet来验证<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">loss=mx.gluon.loss.SoftmaxCrossEntropyLoss()</span><br><span class="line">a=mx.nd.array(np.arange(<span class="number">50</span>).reshape((<span class="number">5</span>,<span class="number">10</span>)))</span><br><span class="line">b=mx.nd.array([<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">1</span>])</span><br><span class="line"><span class="keyword">print</span> loss(a,b)</span><br><span class="line"><span class="keyword">print</span> mx.nd.mean(loss(a,b))<span class="comment">#5.45862961</span></span><br></pre></td></tr></table></figure></p>
<h2 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h2><h3 id="完整范例"><a href="#完整范例" class="headerlink" title="完整范例"></a>完整范例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img = Image.open(<span class="string">"1620.jpg"</span>)</span><br><span class="line">img.show()</span><br><span class="line">w, h = img.size</span><br><span class="line">img = np.expand_dims(img, <span class="number">0</span>)</span><br><span class="line">bi_image_bilinear = tf.image.resize_bilinear(img, size=(int(h*<span class="number">3</span>), int(w*<span class="number">3</span>)))</span><br><span class="line"></span><br><span class="line">bi_image_bilinear = tf.squeeze(bi_image_bilinear)</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    bi_result = sess.run(bi_image_bilinear)</span><br><span class="line">Image.fromarray(np.uint8(bi_result)).show()</span><br></pre></td></tr></table></figure>
<h3 id="tf-image-resize"><a href="#tf-image-resize" class="headerlink" title="tf.image.resize*"></a>tf.image.resize*</h3><p>tf.image.resize_nearest_neighbor  [0  1  2] -&gt; [0  0  1  1  2  2]<br>tf.image.resize_bilinear  [0  1  2] -&gt; [0  0.5 1  1.5 2  2 ]<br>tf.image.resize_bicubic  [0  0.40625 1  1.59375 2  2.09375]<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = np.arange(<span class="number">3</span>).reshape((<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>))</span><br><span class="line">bi_image_bilinear = tf.image.resize_bilinear(img, size=(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">bi_image_bilinear = tf.squeeze(bi_image_bilinear)</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="keyword">print</span> sess.run(bi_image_bilinear)</span><br></pre></td></tr></table></figure></p>
<h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>tf.map_fn 类似于map函数，一个迭代器，将函数作用于指定变量上<br>这是例子1：<br>因为elems是(a,b)，lambda的变量必须与其保持一致，所以也是tuple的。因为a,b分别是int32和float32，返回值也是int32和float32的tuple，与elms一致，所以dtype可以省略。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mean</span><span class="params">(lis,num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (tf.reduce_mean(lis[:num]), num)</span><br><span class="line"></span><br><span class="line">a = tf.constant(np.arange(<span class="number">30</span>).reshape((<span class="number">3</span>,<span class="number">10</span>)), dtype=<span class="string">'float32'</span>)</span><br><span class="line">b = tf.constant([<span class="number">3</span>,<span class="number">6</span>,<span class="number">2</span>],dtype=<span class="string">'int32'</span>)</span><br><span class="line">c = tf.map_fn(fn=<span class="keyword">lambda</span> (i,j):mean(i,j), elems=(a,b))</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="keyword">print</span> sess.run(c)</span><br></pre></td></tr></table></figure></p>
<p>例子2：此时返回值与elms结构不一样，需要明确指明返回值类型<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mean</span><span class="params">(lis,num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.reduce_mean(lis[:num])</span><br><span class="line"></span><br><span class="line">a = tf.constant(np.arange(<span class="number">30</span>).reshape((<span class="number">3</span>,<span class="number">10</span>)), dtype=<span class="string">'float32'</span>)</span><br><span class="line">b = tf.constant([<span class="number">3</span>,<span class="number">6</span>,<span class="number">2</span>],dtype=<span class="string">'int32'</span>)</span><br><span class="line">c = tf.map_fn(fn=<span class="keyword">lambda</span> (i,j):mean(i,j), elems=(a,b), dtype=<span class="string">'float32'</span>)</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="keyword">print</span> sess.run(c)</span><br></pre></td></tr></table></figure></p>
<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="tf-conv1D"><a href="#tf-conv1D" class="headerlink" title="tf.conv1D"></a>tf.conv1D</h2><p>输入的shape是（batch_size, width1, in_channel）<br>卷积核的shape是 （filter_width, in_channel, out_channel）<br>输出是（batch_size, width2, out_channel）<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = tf.Variable(np.arange(<span class="number">320</span>).reshape(<span class="number">8</span>,<span class="number">10</span>,<span class="number">4</span>).astype(np.float32))</span><br><span class="line">k = tf.Variable(tf.contrib.layers.xavier_initializer_conv2d()(shape=[<span class="number">5</span>,<span class="number">4</span>,<span class="number">16</span>]))</span><br><span class="line">conv = tf.nn.conv1d(x, k, stride=<span class="number">1</span>, padding=<span class="string">'VALID'</span>, data_format=<span class="string">'NWC'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line">    [a, b] = sess.run([x, conv])</span><br><span class="line">    <span class="keyword">print</span> a.shape, b.shape</span><br><span class="line">    <span class="comment">#(8, 10, 4) -&gt; (8, 6, 16)</span></span><br></pre></td></tr></table></figure></p>
<h1 id="队列机制"><a href="#队列机制" class="headerlink" title="队列机制"></a>队列机制</h1><p>入队的方式有两种，enqueue和enqueue_many。一般采取第一种<br>出队的方式有两种，dequeue和dequeue_many。一般采取第二种，这相当于dequeue出来的数据是一个batch</p>
<h2 id="RandomShuffleQueue"><a href="#RandomShuffleQueue" class="headerlink" title="RandomShuffleQueue"></a>RandomShuffleQueue</h2><p>创建一个随机队列，表示出队的是随机的，但是当使用RandomShuffleQueue时如果shape不明确指定具体大小，dequeue_many是禁用的。</p>
<h3 id="enqueue"><a href="#enqueue" class="headerlink" title="enqueue"></a>enqueue</h3><p>这里首先创建了一个10个箱子（每个箱子可以放两个物品，第一种物品是<code>5*2</code>的矩阵，第二种是<code>5*3</code>的矩阵）的队列，要求min_after_dequeue为7个箱子，也就是最多只可以deque出三个箱子。循环中入队了十次，使得队列为满箱状态，所以dequeue_many(3)刚好不阻塞。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">input_queue = tf.RandomShuffleQueue(capacity=<span class="number">10</span>, min_after_dequeue=<span class="number">7</span>, </span><br><span class="line">                                dtypes=[tf.int32, tf.int32], shapes=[(<span class="number">5</span>,<span class="number">2</span>),(<span class="number">5</span>,<span class="number">3</span>)])</span><br><span class="line"></span><br><span class="line">placeholder1 = tf.placeholder(dtype=tf.int32, shape=[<span class="number">5</span>,<span class="number">2</span>])</span><br><span class="line">placeholder2 = tf.placeholder(dtype=tf.int32, shape=[<span class="number">5</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">enqueue_op = input_queue.enqueue([placeholder1, placeholder2])</span><br><span class="line">dequeue = input_queue.dequeue_many(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="comment">#filled the queue</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        data1 = np.arange(i,i+<span class="number">10</span>).reshape(<span class="number">-1</span>,<span class="number">2</span>)</span><br><span class="line">        data2 = np.arange(i,i+<span class="number">15</span>).reshape(<span class="number">-1</span>,<span class="number">3</span>)</span><br><span class="line">        sess.run(enqueue_op,feed_dict=&#123;placeholder1:data1, </span><br><span class="line">                                       placeholder2:data2&#125;)</span><br><span class="line">    <span class="keyword">print</span> sess.run(dequeue)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>[array([[[ 3,  4], [ 5,  6],[ 7,  8], [ 9, 10], [11, 12]],<br>         [[ 9, 10],[11, 12],[13, 14], [15, 16], [17, 18]],<br>         [[ 5,  6],[ 7,  8], [ 9, 10], [11, 12], [13, 14]]], dtype=int32),<br> array([[[ 3,  4,  5],[ 6,  7,  8],[ 9, 10, 11],[12, 13, 14],[15, 16, 17]],<br>          [[ 9, 10, 11],[12, 13, 14],[15, 16, 17],[18, 19, 20],[21, 22, 23]],<br>         [[ 5,  6,  7],[ 8,  9, 10],[11, 12, 13],[14, 15, 16],[17, 18, 19]]], dtype=int32)]</p>
</blockquote>
<p>可以看到返回两种箱子，一般我们会将这个返回值赋值给tuples,比如把代码最后一句改为<code>(col2,col3) = sess.run(dequeue)</code>。这样col2和col3就可以作为数据供给网络使用</p>
<h3 id="enqueue-many"><a href="#enqueue-many" class="headerlink" title="enqueue_many"></a>enqueue_many</h3><p>这里首先创建了一个10个箱子（每个箱子放两种物品，第一个物品是一个长度为2的数组，第二个物品是长度为3的数组）的随机队列。使用enqueue_many相当于一次性填充多个箱子。现在一次性填充10个箱子让队列满箱，因为min_after_dequeue是7所以最多只能弹出3个箱子,否则阻塞。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">input_queue = tf.RandomShuffleQueue(capacity=<span class="number">10</span>, min_after_dequeue=<span class="number">7</span>, </span><br><span class="line">                          dtypes=[tf.int32, tf.int32], shapes=[(<span class="number">2</span>,),(<span class="number">3</span>,)])</span><br><span class="line"></span><br><span class="line">placeholder1 = tf.placeholder(dtype=tf.int32, shape=[<span class="number">10</span>,<span class="number">2</span>])</span><br><span class="line">placeholder2 = tf.placeholder(dtype=tf.int32, shape=[<span class="number">10</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">enqueue_op = input_queue.enqueue_many([placeholder1, placeholder2])</span><br><span class="line">dequeue = input_queue.dequeue_many(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="comment">#filled the queue</span></span><br><span class="line">    data1 = np.arange(<span class="number">20</span>).reshape(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">    data2 = np.arange(<span class="number">30</span>).reshape(<span class="number">10</span>,<span class="number">3</span>)</span><br><span class="line">    sess.run(enqueue_op,feed_dict=&#123;placeholder1:data1, </span><br><span class="line">                                   placeholder2:data2&#125;)</span><br><span class="line">    <span class="keyword">print</span> sess.run(dequeue)</span><br></pre></td></tr></table></figure>
<h2 id="PaddingFIFOQueue"><a href="#PaddingFIFOQueue" class="headerlink" title="PaddingFIFOQueue"></a>PaddingFIFOQueue</h2><p>支持变化的shape，同时支持dequeue_many!<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">input_queue = tf.PaddingFIFOQueue(capacity=<span class="number">10</span>,</span><br><span class="line">                                  dtypes=[tf.int32, tf.int32], shapes=[(<span class="literal">None</span>,<span class="number">2</span>),(<span class="literal">None</span>,<span class="number">3</span>)])</span><br><span class="line"></span><br><span class="line">placeholder1 = tf.placeholder(dtype=tf.int32, shape=[<span class="literal">None</span>,<span class="number">2</span>])</span><br><span class="line">placeholder2 = tf.placeholder(dtype=tf.int32, shape=[<span class="literal">None</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">enqueue_op = input_queue.enqueue([placeholder1, placeholder2])</span><br><span class="line">dequeue = input_queue.dequeue_many(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="comment">#filled the queue</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        data1 = np.arange(<span class="number">2</span>*(i+<span class="number">1</span>)).reshape(<span class="number">-1</span>,<span class="number">2</span>)+i</span><br><span class="line">        data2 = np.arange(<span class="number">3</span>*(i+<span class="number">1</span>)).reshape(<span class="number">-1</span>,<span class="number">3</span>)+i</span><br><span class="line">        sess.run(enqueue_op,feed_dict=&#123;placeholder1:data1, </span><br><span class="line">                                       placeholder2:data2&#125;)</span><br><span class="line">    <span class="keyword">print</span> sess.run(dequeue)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>[array([[[0, 1],[0, 0],[0, 0]],<br>        [[1, 2],[3, 4],[0, 0]],<br>        [[2, 3],[4, 5],[6, 7]]], dtype=int32),<br> array([[[ 0,  1,  2],[ 0,  0,  0],[ 0,  0,  0]],<br>          [[ 1,  2,  3],[ 4,  5,  6],[ 0,  0,  0]],<br>          [[ 2,  3,  4],[ 5,  6,  7],[ 8,  9, 10]]], dtype=int32)]</p>
</blockquote>
<p>发现了什么吧，就是它补零了。小小说些题外话，你见过<code>np.array([[1],[1,2],[1,2,3]])</code>的返回值吗？没吧，是Object而不是int64。因为numpy不支持，但是python本身支持<code>[[1],[1,2],[1,2,3]]</code>。这就不如Mathematica了,表扬一下顺便推荐这个语言！</p>
<p>如果改成<code>dequeue = input_queue.dequeue_many(1)</code>，一次只出一个箱子那么就不会出现补零情况了。所以补零发生在<code>sess.run(dequeue)</code>的时候</p>
<p>甚至它还支持shape完全不定的情况<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">input_queue = tf.PaddingFIFOQueue(capacity=<span class="number">10</span>,dtypes=[tf.int32],</span><br><span class="line">                                  shapes=[(<span class="literal">None</span>,<span class="literal">None</span>)])</span><br><span class="line"></span><br><span class="line">placeholder = tf.placeholder(dtype=tf.int32, shape=[<span class="literal">None</span>,<span class="literal">None</span>])</span><br><span class="line"></span><br><span class="line">enqueue_op = input_queue.enqueue([placeholder])</span><br><span class="line">dequeue = input_queue.dequeue_many(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="comment">#filled the queue</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        data = np.arange((i+<span class="number">1</span>)**<span class="number">2</span>).reshape(i+<span class="number">1</span>,i+<span class="number">1</span>)+i</span><br><span class="line">        sess.run(enqueue_op,feed_dict=&#123;placeholder:data&#125;)</span><br><span class="line">    <span class="keyword">print</span> sess.run(dequeue)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>[[[ 0  0  0] [ 0  0  0] [ 0  0  0]]<br>  [[ 1  2  0] [ 3  4  0] [ 0  0  0]]<br>  [[ 2  3  4] [ 5  6  7] [ 8  9 10]]]</p>
</blockquote>
<h1 id="Tensorflow与其他框架联动"><a href="#Tensorflow与其他框架联动" class="headerlink" title="Tensorflow与其他框架联动"></a>Tensorflow与其他框架联动</h1><h2 id="Keras与Tensorflow联动"><a href="#Keras与Tensorflow联动" class="headerlink" title="Keras与Tensorflow联动"></a>Keras与Tensorflow联动</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"></span><br><span class="line">mnist_data = input_data.read_data_sets(<span class="string">'MNIST_data/'</span>, one_hot=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Building model</span></span><br><span class="line">img = tf.placeholder(tf.float32, shape=(<span class="literal">None</span>, <span class="number">784</span>))</span><br><span class="line">labels = tf.placeholder(tf.float32, shape=(<span class="literal">None</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">x = tf.keras.layers.Dense(<span class="number">128</span>, activation=<span class="string">'relu'</span>)(img)</span><br><span class="line">x = tf.keras.layers.Dense(<span class="number">128</span>, activation=<span class="string">'relu'</span>)(x)</span><br><span class="line">prediction = tf.keras.layers.Dense(<span class="number">10</span>)(x)</span><br><span class="line"></span><br><span class="line">loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=prediction, labels=labels))</span><br><span class="line">train_optim = tf.train.AdamOptimizer().minimize(loss)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Print model name and shape</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tf.trainable_variables():</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'&#123;&#125;\t&#123;&#125;\t&#123;&#125;'</span>.format(i.name,i.shape,i.dtype)</span><br><span class="line"><span class="comment">#dense/kernel:0 (784, 128)  &lt;dtype: 'float32_ref'&gt;</span></span><br><span class="line"><span class="comment">#dense/bias:0   (128,)  &lt;dtype: 'float32_ref'&gt;</span></span><br><span class="line"><span class="comment">#dense_1/kernel:0   (128, 128)  &lt;dtype: 'float32_ref'&gt;</span></span><br><span class="line"><span class="comment">#dense_1/bias:0 (128,)  &lt;dtype: 'float32_ref'&gt;</span></span><br><span class="line"><span class="comment">#dense_2/kernel:0   (128, 10)   &lt;dtype: 'float32_ref'&gt;</span></span><br><span class="line"><span class="comment">#dense_2/bias:0 (10,)   &lt;dtype: 'float32_ref'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Train model</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line">    sess.run(init)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">        batch_x, batch_y = mnist_data.train.next_batch(<span class="number">50</span>)</span><br><span class="line">        sess.run(train_optim, feed_dict=&#123;img: batch_x, labels: batch_y&#125;)</span><br><span class="line">        acc_pred = tf.keras.metrics.categorical_accuracy(labels, prediction)</span><br><span class="line">        pred = sess.run(acc_pred, feed_dict=&#123;labels: mnist_data.test.labels, img: mnist_data.test.images&#125;)</span><br><span class="line">        print(<span class="string">'accuracy: %.3f'</span> % (sum(pred)/len(mnist_data.test.labels)))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>学习D3.js可视化</title>
    <url>/2018/08/03/%E5%AD%A6%E4%B9%A0D3-js%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc -->
<p>之前D3.js所学知识可以从我的博客的<a href="https://xiaozhah.github.io/2018/07/31/%E9%80%90%E6%B8%90%E5%AE%8C%E5%96%84%E8%81%9A%E7%B1%BB%E6%95%88%E6%9E%9C%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96/" target="_blank" rel="noopener">逐渐完善聚类效果的可视化</a>中找到<br>因此基础的一些不在此教程中了，以下的一些将参考书本以及网站</p>
<h1 id="数据可视化-使用D3设计交互式图表"><a href="#数据可视化-使用D3设计交互式图表" class="headerlink" title="数据可视化-使用D3设计交互式图表"></a>数据可视化-使用D3设计交互式图表</h1><p>D3版本4.5.0。目前是5.5.0，在这里暂时不考虑向高版本升级</p>
<p>书本采用人民邮电出版社的《数据可视化-使用D3设计交互式图表》（作者Scott Murray），我的D3入门书也是JavaScript的入门教材。</p>
<a id="more"></a>
<h2 id="第五章-读取数据"><a href="#第五章-读取数据" class="headerlink" title="第五章 读取数据"></a>第五章 读取数据</h2><p>rowConverter作为一个新参数，可以进行逐行的数据预处理 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rowConverter = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        Food: d.Food, <span class="comment">//No conversion</span></span><br><span class="line">        Deliciousness: <span class="built_in">parseFloat</span>(d.Deliciousness)</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;</span><br><span class="line">d3.csv(<span class="string">"food.csv"</span>, rowConverter, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123; <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="第八章-数轴"><a href="#第八章-数轴" class="headerlink" title="第八章 数轴"></a>第八章 数轴</h2><h3 id="第一版内容"><a href="#第一版内容" class="headerlink" title="第一版内容"></a>第一版内容</h3><p>首先建立了两个比例尺，又根据数据范围建立相应的坐标轴（ticks是5，但是D3会为了美观而在5附近取值，tickFormat用于格式化坐标轴标签尺度的数据格式，这里是保留一位有效数组）。<br>紧接着创建了g分组，并将它传递给坐标轴（call函数），可以认为这时候坐标轴函数相当于一个魔法师开始打造不一样的g分组了！设置g分组属于类.axis是为了可以在CSS样式表中统一对坐标轴的视觉格式进行管理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xScale = d3.scaleLinear()</span><br><span class="line">             .domain([<span class="number">0</span>, d3.max(dataset, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d[<span class="number">0</span>]; &#125;)])</span><br><span class="line">             .range([padding, w - padding * <span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> yScale = d3.scaleLinear()</span><br><span class="line">             .domain([<span class="number">0</span>, d3.max(dataset, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d[<span class="number">1</span>]; &#125;)])</span><br><span class="line">             .range([h - padding, padding]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> formatAsPercentage = d3.format(<span class="string">".1%"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xAxis = d3.axisBottom()</span><br><span class="line">              .scale(xScale)</span><br><span class="line">              .ticks(<span class="number">5</span>)</span><br><span class="line">              .tickFormat(formatAsPercentage);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> yAxis = d3.axisLeft()</span><br><span class="line">              .scale(yScale)</span><br><span class="line">              .ticks(<span class="number">5</span>)</span><br><span class="line">              .tickFormat(formatAsPercentage);</span><br><span class="line"></span><br><span class="line">svg.append(<span class="string">"g"</span>)</span><br><span class="line">    .attr(<span class="string">"class"</span>, <span class="string">"axis"</span>)</span><br><span class="line">    .attr(<span class="string">"transform"</span>, <span class="string">"translate(0,"</span> + (h - padding) + <span class="string">")"</span>)</span><br><span class="line">    .call(xAxis);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Create Y axis</span></span><br><span class="line">svg.append(<span class="string">"g"</span>)</span><br><span class="line">    .attr(<span class="string">"class"</span>, <span class="string">"axis"</span>)</span><br><span class="line">    .attr(<span class="string">"transform"</span>, <span class="string">"translate("</span> + padding + <span class="string">",0)"</span>)</span><br><span class="line">    .call(yAxis);</span><br></pre></td></tr></table></figure>
<h3 id="第二版增加的内容"><a href="#第二版增加的内容" class="headerlink" title="第二版增加的内容"></a>第二版增加的内容</h3><p>可以增加时间比例尺<br>d3.extent等于mma的MinMax函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> parseTime = d3.timeParse(<span class="string">"%m/%d/%y"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Function for converting CSV values from strings to Dates and numbers</span></span><br><span class="line"><span class="comment">//parseInt是JavaScript的函数</span></span><br><span class="line"><span class="keyword">var</span> rowConverter = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="built_in">Date</span>: parseTime(d.Date),</span><br><span class="line">        Amount: <span class="built_in">parseInt</span>(d.Amount)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xScale = d3.scaleTime()</span><br><span class="line">           .domain(</span><br><span class="line">                d3.extent(dataset, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d.Date; &#125;),</span><br><span class="line">            )</span><br><span class="line">           .range([padding, w - padding]);</span><br></pre></td></tr></table></figure>
<h2 id="第九章-更新、过渡和动画"><a href="#第九章-更新、过渡和动画" class="headerlink" title="第九章 更新、过渡和动画"></a>第九章 更新、过渡和动画</h2>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>可视化</tag>
        <tag>JavaScript</tag>
        <tag>D3.js</tag>
      </tags>
  </entry>
  <entry>
    <title>印度之行</title>
    <url>/2018/08/28/%E5%8D%B0%E5%BA%A6%E4%B9%8B%E8%A1%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc -->
<p>即将飞往印度海得拉巴参加<a href="http://interspeech2018.org/" target="_blank" rel="noopener">Interspeech2018</a>会议，这个会议是语音语言方面的顶级会议。</p>
<p>这次提交的论文是基于单元挑选的语音合成，主要是通过Embedding(一个固定长向量)表示音素特征从而在路径搜索时可以给予代价函数更多的声学表示，并且改进连接代价有助于提升语音连续性，从而提升传统HMM方法的效果。可参见<a href="http://home.ustc.edu.cn/~xiaozh/Interspeech2018/pdf/paper.pdf" target="_blank" rel="noopener">论文</a>或<a href="http://home.ustc.edu.cn/~xiaozh/Interspeech2018/pdf/poster.pdf" target="_blank" rel="noopener">海报</a></p>
<p>这个方法也被应用在今年的语音合成比赛<a href="https://www.synsig.org/index.php/Blizzard_Challenge" target="_blank" rel="noopener">Blizzard Challenge</a>中，这个提升了系统的的合成表现力，不过造成了语音稳定性的轻微下降。相比较而言，提升占主要部分，可参见论文<a href="http://festvox.org/blizzard/bc2018/USTC_BlizzardChallenge2018.pdf" target="_blank" rel="noopener">The USTC System for Blizzard Challenge 2018</a></p>
<h1 id="2018年8月31日-周五"><a href="#2018年8月31日-周五" class="headerlink" title="2018年8月31日 周五"></a>2018年8月31日 周五</h1><p>合肥-&gt;广州<br><a id="more"></a><br>广州一晚就住了3个小时，188元，真贵呀！</p>
<h1 id="2018年9月1日-周六"><a href="#2018年9月1日-周六" class="headerlink" title="2018年9月1日 周六"></a>2018年9月1日 周六</h1><p>广州-&gt;新德里<br><img src="/2018/08/28/%E5%8D%B0%E5%BA%A6%E4%B9%8B%E8%A1%8C/ZW2Kaf4k.jpg" class=""><br>新德里机场很漂亮，很现代化，各种设施都是国际标准<br><img src="/2018/08/28/%E5%8D%B0%E5%BA%A6%E4%B9%8B%E8%A1%8C/1f0alskW.jpg" class=""><br>飞机晚上是晚上八点多到的海得拉巴，飞机上的晚餐是传统的印度式餐，芹菜酱做的土豆泥，和合肥1912街区的塔吉餐厅类似，不过更辣一些，也不是国内的那种辣嘴的辣。还看到了双🌈，一个完整的圆形。<br><img src="/2018/08/28/%E5%8D%B0%E5%BA%A6%E4%B9%8B%E8%A1%8C/IZF1SURb.jpg" class=""><br>海得拉巴机场也不错，佛教文化在这盛行，机场里有关于佛，瑜伽的雕塑和艺术品。<br><img src="/2018/08/28/%E5%8D%B0%E5%BA%A6%E4%B9%8B%E8%A1%8C/plBZfFmq.jpg" class=""><br>不过在海得拉巴打的时直接坐在了副驾驶位，才发现这里是靠左行驶，原来是驾驶位尴尬。。。<br>住的四星级酒店离HICC会议地点很近，是85美元一天，住的和国内的快捷酒店类似。不过因为买水走出酒店才发现，比想象的印度还要差，由于大雨下的很急，水往往无法通过下水道排走，全部漫在地上。城市市镇建设非常糟糕，没有人行道和机车道的概念，污水横流，井水外喷，公交车没有门随意上人，估计印度人已经习以为常。<br><img src="/2018/08/28/%E5%8D%B0%E5%BA%A6%E4%B9%8B%E8%A1%8C/OTYEKDHv.jpg" class=""><br>看来印度缺的不仅仅是啥《厕所英雄》，也缺下水道英雄。好在印度人比较乐观，也乐于助人，这是不是和信教分不开呢。卖完水就立刻回酒店了，睡觉~</p>
<h1 id="2018年9月2日-周日"><a href="#2018年9月2日-周日" class="headerlink" title="2018年9月2日 周日"></a>2018年9月2日 周日</h1><p>今天是Interspeech报道的第一天，上午就去领了会议册，论文集U盘，印度风格的包包，还有属于自己的代表牌等等（可以在Google Play上下载Interspeech2018 App,可以直接看论文）</p>
<p>中午在附近的mainland China吃中国菜,还蛮好吃不过风味还是和中国不完全一样，也不是印度风味，那可以说是混搭吧</p>
<p>下午去参观了葛康达古城遗迹。印度和中国的景点附件不一样，第一不是那种圈地收门票那种、景区外熙熙攘攘没有景点的感觉；第二门票价格不贵（相对于中国而不是印度本地人），300卢比大概30人民币；第三是景区不是分地区收费，而是整个景区就收300卢比，要是鸟巢嘛进去逛一圈一个钱，看天台又是一个钱。。。<br><img src="/2018/08/28/%E5%8D%B0%E5%BA%A6%E4%B9%8B%E8%A1%8C/c6Nf7o2B.jpg" class=""><br>景区内部本地人比较多，大部分是断壁残垣，以前是皇帝的寝宫，虽然只有500多年但是历经风吹雨打，已经成为不复当时的盛景。<br><img src="/2018/08/28/%E5%8D%B0%E5%BA%A6%E4%B9%8B%E8%A1%8C/Hg9UlMXT.jpg" class=""><br>但是在🇫🇷埃克斯住的也是500多年历史的房子，外表干净整洁，里面现代化设施俱全。印度🇮🇳还是发展中国家嘛<br>不过海得拉巴这里变天特别快，瞬间就能下起大雨，我没打伞只好躲在岩石下，特别简陋的”雨棚“呀。雨停了还是阴天就接着上山，路上还是挺泥泞的，鞋子上都是泥沙。不过上山之后风景独好，整个海得拉巴都能尽收眼底。<br><img src="/2018/08/28/%E5%8D%B0%E5%BA%A6%E4%B9%8B%E8%A1%8C/TSMFh6A1.jpg" class=""><br>虽然淋了一身雨不过雨过天晴后衣服干的也快，阳光照在山下特别美丽。断壁残垣也很美。</p>
<h1 id="2018年9月3日-周一"><a href="#2018年9月3日-周一" class="headerlink" title="2018年9月3日 周一"></a>2018年9月3日 周一</h1><p>这是Interspeech2018正式开始的第一天，上午参加了开幕仪式，先介绍印度国家的地理状况，接着介绍主办城市海得拉巴，然后是今年会议的接收情况，比如论文接受率呀（今年是50%）、哪个领域投稿论文最多最少呀、每天提交的论文数量呀、每篇文章的修改次数的统计呀等等一些比较好玩的结果。接着是授予ISCA的奖项，一般是对某些领域有特别贡献的专家学者，以及某些领域的开拓者先驱们。所以上午就是感受会场氛围</p>
<img src="/2018/08/28/%E5%8D%B0%E5%BA%A6%E4%B9%8B%E8%A1%8C/75pwR4jr.jpg" class="">
<img src="/2018/08/28/%E5%8D%B0%E5%BA%A6%E4%B9%8B%E8%A1%8C/fwStugcF.jpg" class="">
<p>吃完饭之后就是再去会场听口头报告，oral是语音识别方向的，并不是我研究的领域。不过有一篇文章是说用四元数(n = a + bI + cJ + dK)来代替神经网络参数，似乎还有不错的效果，有意思。之后看了海报是关于语音验证的攻击的，之前也不怎么了解，看了海报和交流之后感觉这个领域还是新兴领域，用的方法还不是那么复杂，也蛮有意思的。语音合成只有主观指标才是硬道理，但是识别和这个攻击验证都是可以用客观指标说话的那就改进网络模型获得更小的错误率呗，语音合成（单元挑选方式的）即使客观指标好主观也不一定听出差异。。。</p>
<p>晚上是印度文化汇演，地点就是在开幕式的Hall3。感觉音乐不如我在三傻大闹宝莱坞那段音乐悠扬婉转好听，不过有些音乐的节奏感还是很不错的。</p>
<p>晚上逛了下超市买到了我一直心心念念的印度神调料-芹菜酱(celery sauce)。但是刚开始自己找不到问了当地人（都挺热情）才发现自己找的不对，应该是mint sauce。看起来这就对了，下次可以用这个酱坑人，哈哈哈~</p>
<p>总共买了芹菜酱225卢布 + 养乐多红蓝两包装（每包5罐）70*2 == 365卢布。哦对了印度🍆也是奇葩还有这样的，就像小圆球一样。。。</p>
<h1 id="2018年9月4日-周二"><a href="#2018年9月4日-周二" class="headerlink" title="2018年9月4日 周二"></a>2018年9月4日 周二</h1><p>今天已经是出发的第五天了，上午去了会议中心一趟，听的是统计参数语音合成的口头报告。里面关于这个领域的最新成果可以阅读下。</p>
<p>中午一样在mainland China吃饭，之后去玩了Interspeech会标的所在地，加尔塔(300卢比)。<br><img src="/2018/08/28/%E5%8D%B0%E5%BA%A6%E4%B9%8B%E8%A1%8C/abGMuYxq.jpg" class=""><br>附近人太太多了，然后就是登塔。也是和欧洲很多教堂宫殿一样（比如巴黎香榭丽舍大街的凯旋门）是盘旋向上的，但是规模肯定是不如那个凯旋门大。塔顶可以俯瞰周围<br><img src="/2018/08/28/%E5%8D%B0%E5%BA%A6%E4%B9%8B%E8%A1%8C/i9SbZx0v.jpg" class=""><br>然后去了Chowmahalla Palace这个宫殿（200卢比，特别值），和外面完全两个世界，人家是世外桃源这里是壁画秀月？？？，待续<br><img src="/2018/08/28/%E5%8D%B0%E5%BA%A6%E4%B9%8B%E8%A1%8C/UJCKo4Vf.jpg" class=""><br><img src="/2018/08/28/%E5%8D%B0%E5%BA%A6%E4%B9%8B%E8%A1%8C/qyne0li5.jpg" class=""><br><img src="/2018/08/28/%E5%8D%B0%E5%BA%A6%E4%B9%8B%E8%A1%8C/q8k5orVd.jpg" class=""></p>
<h1 id="2018年9月5日-周三"><a href="#2018年9月5日-周三" class="headerlink" title="2018年9月5日 周三"></a>2018年9月5日 周三</h1><p>今天是我的poster时间，因此上午主要的事情就是看别人的海拔。<br><img src="/2018/08/28/%E5%8D%B0%E5%BA%A6%E4%B9%8B%E8%A1%8C/6u8yverP.jpg" class=""><br>因为上午有一场是关于Voice Conversion and Speech Synthesis。其中Exemplar-based Speech Waveform Genaration和我做的单元挑选有关，还提供了Github地址，同时也是BC比赛CSTR的混合单元挑选系统。<br>顾宇师兄的多任务WaveNet和讯飞源哥的论文也在展示之列。谷歌也有一篇文章说的是TTS系统的一些实验。</p>
<p>下午是我讲poster的时候，围观很多人，感兴趣的也多。</p>
<p>晚上是“百度之夜”，请客在意大利餐厅吃饭，非常高级，看来花费了不少心思，据说和前一天的京东晚宴形成对比，那顿致辞冗长而且还是天天吃的印度餐，没有创意。</p>
<h1 id="2018年9月6日-周四"><a href="#2018年9月6日-周四" class="headerlink" title="2018年9月6日 周四"></a>2018年9月6日 周四</h1><p>早上去了河边的博物馆，外国人是500卢比，门口看见了一种花很是神奇，叶片竟然是红色的。<br><img src="/2018/08/28/%E5%8D%B0%E5%BA%A6%E4%B9%8B%E8%A1%8C/4KQ6kySg.jpg" class=""><br>博物馆总体还是不错的，藏品丰富但是博物馆老旧。<br>晚上去了最大的购物中心，吃了肉卷还有肯德基。买了一个贾尔塔的木版画。</p>
<h1 id="2018年9月7日-周五"><a href="#2018年9月7日-周五" class="headerlink" title="2018年9月7日 周五"></a>2018年9月7日 周五</h1><p>花了一个上午半个下午参观宝莱坞。非常不错。<br><img src="/2018/08/28/%E5%8D%B0%E5%BA%A6%E4%B9%8B%E8%A1%8C/ViaGgh79.jpg" class=""><br><img src="/2018/08/28/%E5%8D%B0%E5%BA%A6%E4%B9%8B%E8%A1%8C/4SoLJdsh.jpg" class=""><br>然后顺便去了一个印度人家，换了摩的还体验了新交通方式。<br>最后去了药店。</p>
<h1 id="2018年9月8日-周六"><a href="#2018年9月8日-周六" class="headerlink" title="2018年9月8日 周六"></a>2018年9月8日 周六</h1><p>今天上午去微软参加Blizzard Challenge比赛的Workshop<br><img src="/2018/08/28/%E5%8D%B0%E5%BA%A6%E4%B9%8B%E8%A1%8C/iB1JcvG9.jpg" class=""><br>这次USTC系统是第一，然后我来介绍我们系统。可是我当时应该注意两点，也是以后需要注意的。</p>
<ul>
<li>会议地点的空间很小，并不足以形成会场那种巨大的Hall，因此当时应该背下来ppt</li>
<li>ppt不应该详细介绍以前的系统，应当以这次新的内容和demo为主</li>
<li>Mac需要搭配一个HDMI转接线，我没带。以及如何投屏事先没有充分了解</li>
</ul>
<p>造成了几个问题</p>
<ul>
<li>无法点亮屏幕和音响。</li>
<li>不是站立不够正式</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>旅行</category>
      </categories>
      <tags>
        <tag>印度</tag>
        <tag>会议</tag>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>大连之行</title>
    <url>/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <div id="aplayer-pmlBCqZM" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-pmlBCqZM"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "单车练习曲",
              author: "王雁盟",
              url: "单车练习曲.mp3",
              pic: "/2018/07/25/大连之行/单车练习曲.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>
<!-- toc -->
<h1 id="2018年7月20日-周五"><a href="#2018年7月20日-周五" class="headerlink" title="2018年7月20日 周五"></a>2018年7月20日 周五</h1><p>上午十点飞机，11.40到达大连</p>
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180720_105107.jpg" class="">
<a id="more"></a>
<p>凯宁来机场接我，中午吃了蒸汽海鲜，海胆海螺海参。</p>
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180720_134852.jpg" class="">
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180720_135143.jpg" class="">
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180720_142216.jpg" class="">
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180720_134844__01.jpg" class="">
<p>吃完饭打的回去，就连蝉也和合肥到不同，不是吱吱吱叫很久，而是断断续续的，也许是气温不像我们这里这么炎热吧</p>
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180720_145852.jpg" class="">
<p>下午从海军大连舰艇学院出来后沿着海边一直走</p>
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180720_160432.jpg" class="">
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180720_161450.jpg" class="">
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180720_162321.jpg" class="">
<p>先路过老虎滩(老虎抽象的雕塑位于广场正中）</p>
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180720_164502.jpg" class="">
<p>接着路过了滨海路还有北大桥，把他家小狗牛牛也带出来遛了。晚上找了家东北菜吃，有特色菜焖子(就是炸过的地瓜粉做的)<br><img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180720_191511.jpg" class=""></p>
<p>还有锅包肉(吃起来像厦门的拔丝，酸甜口的)，都吃不完，分量很足也不贵。吃完饭去了东港，有音乐喷泉!</p>
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180720_204526.jpg" class="">
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180720_204906.jpg" class="">
<p>还有欧洲风情街比如凯旋门威尼斯啥的，人头攒动</p>
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180720_210143.jpg" class="">
<h1 id="2018年7月21日-周六"><a href="#2018年7月21日-周六" class="headerlink" title="2018年7月21日 周六"></a>2018年7月21日 周六</h1><p>早晨去了吃鲜肉小笼包 甜口的好吃些江浙口味，鲜虾饺子。之后去北广场坐车去旅顺,主要去了两个景点一个是旅顺军港，不大，但是有很多海鸥。</p>
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180721_115917.jpg" class="">
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180721_120511.jpg" class="">
<p>另一个是日俄旅顺监狱，一个爱国主义基地，可看到当时监狱条件是多差（监狱嘛照片就不拍了）。</p>
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180721_123907.jpg" class="">
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180721_124020.jpg" class="">
<p>回市里已经是下午三点，我吃了顿铁板后看了电影《邪不压正》，也许是喝了咖啡的原因真是特别想上厕所呀，而且姜文的这部电影很难懂。晚上去了星海广场和附近的沙滩</p>
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180721_204032.jpg" class="">
<p>晚上从游乐园出来后去了烧烤店，第一次大胆从容吃蚕蛹，很好吃，只有微微苦味，中间一个小心心不能吃。</p>
<h1 id="2018年7月22日-周日"><a href="#2018年7月22日-周日" class="headerlink" title="2018年7月22日 周日"></a>2018年7月22日 周日</h1><p>去了老虎滩海洋公园还有鸟语林，感受就是海洋公园里头太阳那么大，极地动物还要表演也是一种折磨。鸟语林不错，各种鸟可以凑近你，喂了它们巧克力面包。</p>
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180722_153231.jpg" class="">
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180722_153316_006.jpg" class="">
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180722_154149_01.jpg" class="">
<p>老虎滩公园里的沙滩比星海广场的软，白天能看见细长的小鱼在浅滩处（所以钓鱼抓鱼的都能见到）</p>
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180722_124045.jpg" class="">
<p>之后我又去老虎滩广场了，喂食海鸥，基本上刚开始都不过来都离我很远在天上飞，不过只要象征性的撒几次，海鸥都过来了，他们空中接食很厉害。<br>然后去见了凯宁朋友一起吃了饭喝了点酒，晚上去了凯宁家吃的饭，饭菜主打海鲜，但是吃不掉有些多，第一次吃知了猴，味道不错哦，高蛋白，别人都是把知了当主食吃。</p>
<p>傍晚走在老虎滩的海边大道上一种夏日的宁静。</p>
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180722_163852.jpg" class="">
<p>晚上在大院散步是凯宁不知怎么说到了法国对应于中国难忘春宵的曲子是Les demons De Minuit，二三十年的老歌，每当什么活动大家就唱这个，所以他也顺便学学。节奏感很好听</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=28582962&auto=1&height=66"></iframe>

<p>接着就外放着这首歌晚上去了星海广场，顺便也踩沙滩了，不过很硌脚。</p>
<p>晚上的星海湾大桥开灯了，很长，打通了开发区与星海广场的距离。</p>
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180722_211210.jpg" class="">
<h1 id="2018年7月23日-周一"><a href="#2018年7月23日-周一" class="headerlink" title="2018年7月23日 周一"></a>2018年7月23日 周一</h1><p>今天早上随便吃了一点后就先去了造船厂看到了辽宁号航空母舰，只能远望<br><img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180723_102743.jpg" class=""></p>
<p>去了金石滩公园，做轻轨3号线花了一个小时(8元)才到，够远的。中午吃了肯德基，直接坐车(20元)坐到了地质公园入口处。然后就又走回了三号线终点，一路上风景很好，都是礁石海滩，穿行在林间感觉特别不错。</p>
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180723_132218.jpg" class="">
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180723_133736.jpg" class="">
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180723_133748.jpg" class="">
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180723_134736.jpg" class="">
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180723_135548.jpg" class="">
<p>就是太热了我们把衣服套头上，好一副沙特王子的样子。下午买了水特产，还看到了鳐鱼</p>
<img src="/2018/07/25/%E5%A4%A7%E8%BF%9E%E4%B9%8B%E8%A1%8C/IMG_20180723_161332.jpg" class="">
<p>晚上吃了鲅鱼鲜饺等，这是北方特产（听说山东人也爱吃）</p>
<h1 id="2018年7月24日-周二"><a href="#2018年7月24日-周二" class="headerlink" title="2018年7月24日 周二"></a>2018年7月24日 周二</h1><p>坐飞机回合肥</p>
]]></content>
      <categories>
        <category>旅行</category>
      </categories>
      <tags>
        <tag>旅行</tag>
        <tag>大连</tag>
      </tags>
  </entry>
  <entry>
    <title>素材网站</title>
    <url>/2018/07/26/%E7%B4%A0%E6%9D%90%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc -->
<h1 id="可视化算法"><a href="#可视化算法" class="headerlink" title="可视化算法"></a>可视化算法</h1><ol>
<li><a href="https://www.quora.com/How-can-you-visualize-algorithms" target="_blank" rel="noopener">可视化算法网站</a></li>
<li><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html" target="_blank" rel="noopener">旧金山大学的算法课程的可视化</a></li>
<li><a href="https://visualgo.net/en" target="_blank" rel="noopener">VisuAlgo</a></li>
<li><a href="https://bost.ocks.org/mike/algorithms/" target="_blank" rel="noopener">极其绚丽，艺术效果似的可视化，用了D3</a>     <a href="https://bindog.github.io/blog/2014/08/09/visualizing-algorithms/" target="_blank" rel="noopener">相应中文版</a></li>
<li><a href="https://github.com/parkjs814/AlgorithmVisualizer" target="_blank" rel="noopener">算法的互动可视化 github 网页版</a></li>
<li><a href="http://setosa.io/ev/principal-component-analysis/" target="_blank" rel="noopener">PCA</a></li>
<li><a href="https://distill.pub/" target="_blank" rel="noopener">介绍算法的Distill 可视化形式的论文</a></li>
<li><a href="https://www.naftaliharris.com/blog/visualizing-k-means-clustering/" target="_blank" rel="noopener">可视化K-Means 还有其他很多算法 交互的</a></li>
</ol>
<a id="more"></a>
<h1 id="JavaScript可视化"><a href="#JavaScript可视化" class="headerlink" title="JavaScript可视化"></a>JavaScript可视化</h1><p>好想学HTML5 Canvas呀 好漂亮 比如<a href="http://www.mokafolio.de/#!project=21" target="_blank" rel="noopener">全是计算机生成的呀</a></p>
<ol>
<li><a href="https://d3js.org/" target="_blank" rel="noopener">D3</a></li>
<li><a href="http://paperjs.org/" target="_blank" rel="noopener">paper.js</a></li>
</ol>
<h1 id="各种可视化方案讲解"><a href="#各种可视化方案讲解" class="headerlink" title="各种可视化方案讲解"></a>各种可视化方案讲解</h1><ol>
<li><a href="http://antv.alipay.com/zh-cn/vis/chart" target="_blank" rel="noopener">阿里巴巴的墨者学院</a></li>
<li></li>
</ol>
<h1 id="可视化神经网络"><a href="#可视化神经网络" class="headerlink" title="可视化神经网络"></a>可视化神经网络</h1><ol>
<li><a href="https://github.com/Nikasa1889/HistoryObjectRecognition" target="_blank" rel="noopener">计算机视觉历史-The Modern History of Object Recognition</a></li>
<li><a href="http://scs.ryerson.ca/~aharley/vis/" target="_blank" rel="noopener">可视化DNN CNN</a></li>
</ol>
<h2 id="简易声音素材网站"><a href="#简易声音素材网站" class="headerlink" title="简易声音素材网站"></a>简易声音素材网站</h2><ol>
<li><a href="https://www.soundsnap.com/" target="_blank" rel="noopener">Find the perfect sound. - soundsnap</a> </li>
<li><a href="http://freesound.org/" target="_blank" rel="noopener">freesound</a></li>
</ol>
<h1 id="WebGL"><a href="#WebGL" class="headerlink" title="WebGL"></a>WebGL</h1><ol>
<li><a href="https://www.cnblogs.com/lhb25/p/20-webgl-demo-and-examples.html" target="_blank" rel="noopener">20个不可思议的 WebGL 示例和演示</a></li>
</ol>
]]></content>
      <categories>
        <category>收藏</category>
      </categories>
      <tags>
        <tag>可视化</tag>
        <tag>网站</tag>
      </tags>
  </entry>
  <entry>
    <title>逐渐完善聚类效果的可视化</title>
    <url>/2018/07/31/%E9%80%90%E6%B8%90%E5%AE%8C%E5%96%84%E8%81%9A%E7%B1%BB%E6%95%88%E6%9E%9C%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc -->
<p>我的目标是可视化一个Embedding矩阵的聚类效果，但是矩阵极大，维数也高。</p>
<p>具体来说就是矩阵是一个矩阵维度是459753*32，每一行对应一个向量，代表单元对应的UnitVector；矩阵对应的标签是459753个，每一个标签记录当前单元对应的其他信息（例如单元的时长、单元所属类别、单元对应的音频文件名），其中最关注的是UnitVector与单元所属类别的关系</p>
<a id="more"></a>
<p>也就是已知二进制文件UnitVector矩阵与标签文件</p>
<h1 id="Mathematica"><a href="#Mathematica" class="headerlink" title="Mathematica"></a>Mathematica</h1><p>最开始采用的方法是Mathematica</p>
<h2 id="tSNE"><a href="#tSNE" class="headerlink" title="tSNE"></a>tSNE</h2><h3 id="降维"><a href="#降维" class="headerlink" title="降维"></a>降维</h3><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">data=<span class="keyword">Import</span>[<span class="string">"../phone_name_frame_id.csv"</span>,<span class="string">"Table"</span>];</span><br><span class="line">features=<span class="keyword">Partition</span>[<span class="keyword">Import</span>[<span class="string">"Unit2Vec_UnitVector.dat"</span>,<span class="string">"Real32"</span>],<span class="number">32</span>];</span><br><span class="line">features=<span class="keyword">DimensionReduce</span>[features,<span class="number">2</span>,<span class="keyword">Method</span>-&gt;<span class="string">"TSNE"</span>];</span><br><span class="line"><span class="keyword">Export</span>[<span class="string">"./explain/Unit2Vec_tSNE.dat"</span>,features,<span class="string">"Real32"</span>];</span><br><span class="line">byspecies=<span class="keyword">GroupBy</span>[<span class="keyword">Thread</span>[features-&gt;data[[<span class="keyword">All</span>,<span class="number">2</span>]]],<span class="keyword">Last</span>-&gt;<span class="keyword">First</span>];</span><br><span class="line">file=<span class="string">"./explain/Visualization Phone Unit2Vec.wl"</span>;</span><br><span class="line"><span class="keyword">If</span>[<span class="keyword">FileExistsQ</span>[file],<span class="keyword">DeleteFile</span>@file];</span><br><span class="line"><span class="keyword">Save</span>[file,byspecies]</span><br></pre></td></tr></table></figure>
<p>其中data[[All,2]]就是音素所属类别信息，Unit2Vec_UnitVector.dat是Embedding矩阵。<br>会输出两个文件</p>
<ul>
<li>第一个Unit2Vec_tSNE.dat是459753*2的已经降维得到的矩阵，这在Javascript才用到的</li>
<li>第二个便于Mathematica可视化</li>
</ul>
<h3 id="可视化降维的分布"><a href="#可视化降维的分布" class="headerlink" title="可视化降维的分布"></a>可视化降维的分布</h3><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">byspecies=<span class="keyword">KeySort</span>@<span class="keyword">Import</span>[<span class="string">"Visualization Phone Unit2Vec.wl"</span>];</span><br><span class="line"></span><br><span class="line">$scheme=<span class="string">"Rainbow"</span>;</span><br><span class="line"><span class="keyword">ListPlot</span>[<span class="keyword">Values</span>[byspecies],<span class="keyword">PlotLegends</span>-&gt;<span class="keyword">PointLegend</span>[$scheme,<span class="keyword">Keys</span>[byspecies],<span class="keyword">LegendMarkerSize</span>-&gt;<span class="number">15</span>],<span class="keyword">PlotStyle</span>-&gt;<span class="keyword">Map</span>[(<span class="keyword">Directive</span>[<span class="keyword">PointSize</span>[<span class="number">0.0015</span>],<span class="keyword">ColorData</span>[$scheme][#]]&amp;),<span class="keyword">Rescale</span>@<span class="keyword">Range</span>@<span class="keyword">Length</span>@<span class="keyword">Keys</span>@byspecies],<span class="keyword">ImageSize</span>-&gt;<span class="number">650</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">Export</span>[<span class="string">"UnitVector_vis.pdf"</span>,<span class="keyword">Rasterize</span>[<span class="keyword">Magnify</span>[%,<span class="number">4</span>],<span class="string">"Image"</span>]]<span class="comment">(*因为点数太多只能先转化为图像后再导出，不然PDF有几百兆*)</span></span><br></pre></td></tr></table></figure>
<img src="/2018/07/31/%E9%80%90%E6%B8%90%E5%AE%8C%E5%96%84%E8%81%9A%E7%B1%BB%E6%95%88%E6%9E%9C%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96/mma_tsne.png" class="">
<h2 id="可视化混淆矩阵"><a href="#可视化混淆矩阵" class="headerlink" title="可视化混淆矩阵"></a>可视化混淆矩阵</h2><p>在原始空间计算距离<br>即针对欧式距离最近的单元观察对应的所属类别是否相同来进行可视化</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">data=<span class="keyword">Partition</span>[<span class="keyword">Import</span>[<span class="string">"Unit2Vec_UnitVector.dat"</span>,<span class="string">"Real32"</span>],<span class="number">32</span>];</span><br><span class="line">phoneid=<span class="keyword">Import</span>[<span class="string">"../phone_name_frame_id.csv"</span>,<span class="string">"Table"</span>];</span><br><span class="line">nearstData=<span class="keyword">Nearest</span>[data,<span class="keyword">DistanceFunction</span>-&gt;<span class="keyword">EuclideanDistance</span>];</span><br><span class="line">Assodata=<span class="keyword">Association</span>@<span class="keyword">Thread</span>[data-&gt;<span class="keyword">Range</span>[<span class="keyword">Length</span>@data]];</span><br><span class="line">ReplaceiablePhone=<span class="keyword">Table</span>[phoneid[[x]]-&gt;phoneid[[Assodata[nearstData[data[[phoneid[[x,<span class="number">1</span>]]+<span class="number">1</span>]],<span class="number">2</span>][[<span class="number">2</span>]]]]],&#123;x,<span class="keyword">Length</span>@phoneid&#125;];</span><br><span class="line">fileName=<span class="string">"./explain/ReplaceiablePhone Unit2Vec_64_epochs50.wl"</span>;</span><br><span class="line"><span class="keyword">If</span>[<span class="keyword">FileExistsQ</span>[fileName],<span class="keyword">DeleteFile</span>[fileName]];</span><br><span class="line"><span class="keyword">Save</span>[fileName,ReplaceiablePhone]</span><br></pre></td></tr></table></figure>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">ReplaceiablePhoneDir=<span class="string">"\\\\172.16.46.88\\xzhou\\project\\Yanping13k\\Unit2VecAddDur\\Unit2Vec_64_epochs50\\explain\\ReplaceiablePhone Unit2Vec_64_epochs50.wl"</span>;</span><br><span class="line">ReplaceiablePhone=<span class="keyword">Get</span>[ReplaceiablePhoneDir];</span><br><span class="line">confusionMatrixData=#[[<span class="number">1</span>,<span class="number">2</span>]]-&gt;#[[<span class="number">2</span>,<span class="number">2</span>]]&amp;/@ReplaceiablePhone;</span><br><span class="line">phone=<span class="keyword">Union</span>@confusionMatrixData[[<span class="keyword">All</span>,<span class="number">1</span>]];</span><br><span class="line">m=<span class="keyword">Normal</span>@<span class="keyword">SparseArray</span>@<span class="keyword">Normal</span>@<span class="keyword">Counts</span>[&#123;#[[<span class="number">1</span>]],#[[<span class="number">2</span>]]&#125;&amp;/@(confusionMatrixData/.<span class="keyword">Thread</span>[phone-&gt;<span class="keyword">Range</span>[<span class="keyword">Length</span>@phone]])];</span><br><span class="line">mNorm=N[m/<span class="keyword">Total</span>[m,&#123;<span class="number">2</span>&#125;]];</span><br><span class="line">t=<span class="keyword">Transpose</span>@<span class="keyword">Map</span>[<span class="keyword">Flatten</span>,&#123;#,<span class="keyword">Reverse</span>@<span class="keyword">Transpose</span>@#&#125;&amp;[<span class="keyword">Table</span>[<span class="keyword">Range</span>[<span class="number">1</span>,<span class="number">2</span> #<span class="number">-1</span>,<span class="number">2</span>],&#123;#&#125;]]&amp;[<span class="keyword">Length</span>@mNorm]]/<span class="number">2</span>;</span><br><span class="line">p=<span class="keyword">MatrixPlot</span>[mNorm,<span class="keyword">Epilog</span>-&gt;<span class="keyword">Text</span>@@@<span class="keyword">Transpose</span>[&#123;<span class="keyword">Catenate</span>@m,t&#125;],<span class="keyword">FrameTicks</span>-&gt;&#123;<span class="keyword">Transpose</span>@&#123;<span class="keyword">Range</span>[<span class="keyword">Length</span>@phone],phone&#125;,<span class="keyword">Transpose</span>@&#123;<span class="keyword">Range</span>[<span class="keyword">Length</span>@phone],<span class="keyword">Total</span>[m,&#123;<span class="number">1</span>&#125;]&#125;,<span class="keyword">Transpose</span>@&#123;<span class="keyword">Range</span>[<span class="keyword">Length</span>@phone],<span class="keyword">Total</span>[m,&#123;<span class="number">2</span>&#125;]&#125;,<span class="keyword">Transpose</span>@&#123;<span class="keyword">Range</span>[<span class="keyword">Length</span>@phone],phone&#125;&#125;,<span class="keyword">ImageSize</span>-&gt;<span class="number">1700</span>];</span><br><span class="line"><span class="keyword">Column</span>[&#123;<span class="keyword">Row</span>[&#123;<span class="keyword">Rotate</span>[<span class="string">"actual class"</span>,<span class="number">90</span> <span class="keyword">Degree</span>],p&#125;,<span class="keyword">Alignment</span>-&gt;<span class="keyword">Center</span>],<span class="keyword">Spacer</span>@<span class="number">5</span>,<span class="string">"predicted class"</span>&#125;,<span class="keyword">Alignment</span>-&gt;<span class="keyword">Center</span>];<span class="keyword">Export</span>[<span class="keyword">FileNameJoin</span>@<span class="keyword">Flatten</span>[&#123;<span class="keyword">Most</span>@#,<span class="string">"ConfusionMatrixPlot "</span>&lt;&gt;<span class="keyword">StringSplit</span>[<span class="keyword">StringSplit</span>[<span class="keyword">Last</span>@#,<span class="string">" "</span>][[<span class="number">2</span>]],<span class="string">"."</span>][[<span class="number">1</span>]]&lt;&gt;<span class="string">".pdf"</span>&#125;&amp;@<span class="keyword">FileNameSplit</span>[ReplaceiablePhoneDir]],%];</span><br><span class="line"></span><br><span class="line">p=<span class="keyword">MatrixPlot</span>[mNorm,<span class="keyword">FrameTicks</span>-&gt;&#123;<span class="keyword">Transpose</span>@&#123;<span class="keyword">Range</span>[<span class="keyword">Length</span>@phone],<span class="keyword">Style</span>[#,<span class="number">13</span>]&amp;/@phone&#125;,<span class="keyword">Transpose</span>@&#123;<span class="keyword">Range</span>[<span class="keyword">Length</span>@phone],<span class="keyword">Rotate</span>[<span class="keyword">Style</span>[#,<span class="number">13</span>],<span class="number">30</span><span class="keyword">Degree</span>]&amp;/@<span class="keyword">Total</span>[m,&#123;<span class="number">1</span>&#125;]&#125;,<span class="keyword">Transpose</span>@&#123;<span class="keyword">Range</span>[<span class="keyword">Length</span>@phone],<span class="keyword">Style</span>[#,<span class="number">13</span>]&amp;/@<span class="keyword">Total</span>[m,&#123;<span class="number">2</span>&#125;]&#125;,</span><br><span class="line">     <span class="keyword">Transpose</span>@&#123;<span class="keyword">Range</span>[<span class="keyword">Length</span>@phone],<span class="keyword">Rotate</span>[<span class="keyword">Style</span>[#,<span class="number">13</span>],<span class="number">30</span><span class="keyword">Degree</span>]&amp;/@phone&#125;&#125;,<span class="keyword">ImageSize</span>-&gt;<span class="number">1700</span>];</span><br><span class="line"><span class="keyword">Column</span>[&#123;<span class="keyword">Row</span>[&#123;<span class="keyword">Rotate</span>[<span class="string">"actual class"</span>,<span class="number">90</span> <span class="keyword">Degree</span>],p&#125;,<span class="keyword">Alignment</span>-&gt;<span class="keyword">Center</span>],<span class="keyword">Spacer</span>@<span class="number">5</span>,<span class="string">"predicted class"</span>&#125;,<span class="keyword">Alignment</span>-&gt;<span class="keyword">Center</span>];<span class="keyword">SystemOpen</span>@<span class="keyword">Export</span>[<span class="keyword">FileNameJoin</span>@<span class="keyword">Flatten</span>[&#123;<span class="keyword">Most</span>@#,<span class="string">"ConfusionMatrixPlotBeautiful_"</span>&lt;&gt;<span class="keyword">StringSplit</span>[<span class="keyword">StringSplit</span>[<span class="keyword">Last</span>@#,<span class="string">" "</span>][[<span class="number">2</span>]],<span class="string">"."</span>][[<span class="number">1</span>]]&lt;&gt;<span class="string">".pdf"</span>&#125;&amp;@<span class="keyword">FileNameSplit</span>[ReplaceiablePhoneDir]],%];</span><br></pre></td></tr></table></figure>
<img src="/2018/07/31/%E9%80%90%E6%B8%90%E5%AE%8C%E5%96%84%E8%81%9A%E7%B1%BB%E6%95%88%E6%9E%9C%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96/1.png" class="">
<img src="/2018/07/31/%E9%80%90%E6%B8%90%E5%AE%8C%E5%96%84%E8%81%9A%E7%B1%BB%E6%95%88%E6%9E%9C%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96/2.png" class="">
<h1 id="使用Tensorboard"><a href="#使用Tensorboard" class="headerlink" title="使用Tensorboard"></a>使用Tensorboard</h1><p>优点</p>
<ul>
<li>可以交互</li>
<li>可以动态观察聚类情况</li>
<li>可以存储降维的结果</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"><span class="keyword">from</span> tensorflow.contrib.tensorboard.plugins <span class="keyword">import</span> projector</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BinaryRead</span><span class="params">(datafile,column)</span>:</span></span><br><span class="line">    data = np.fromfile(datafile,dtype=np.float32)</span><br><span class="line">    LengthOfFile=len(data)</span><br><span class="line">    <span class="keyword">assert</span>(LengthOfFile)</span><br><span class="line">    <span class="keyword">assert</span>((LengthOfFile%column)==<span class="number">0</span>)</span><br><span class="line">    data.shape = [int(LengthOfFile/column),column]</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">LOG_DIR = <span class="string">'logs'</span></span><br><span class="line">metadata = os.path.join(LOG_DIR, <span class="string">'metadata.tsv'</span>)</span><br><span class="line"></span><br><span class="line">data_path=<span class="string">'Unit2Vec_UnitVector.dat'</span></span><br><span class="line">name=<span class="string">'Unit2Vec'</span>a</span><br><span class="line">all_data=BinaryRead(data_path,<span class="number">32</span>)</span><br><span class="line">UnitVector = tf.Variable(all_data, name=name)</span><br><span class="line">txt = open(<span class="string">r"../phone_name_frame_id.csv"</span>).readlines()</span><br><span class="line">all_label = list(map(<span class="keyword">lambda</span> i:i.split(<span class="string">'\t'</span>)[<span class="number">1</span>],txt))</span><br><span class="line">all_dur = list(map(<span class="keyword">lambda</span> i:int(i.split(<span class="string">'\t'</span>)[<span class="number">3</span>]),txt))</span><br><span class="line">mydict=&#123;p:i <span class="keyword">for</span> i,p <span class="keyword">in</span> enumerate(sorted(list(set(all_label))))&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(metadata, <span class="string">'w'</span>) <span class="keyword">as</span> metadata_file:</span><br><span class="line">    metadata_file.write(<span class="string">'Index\tColorIndex\tPhoneme\tPhoneDur\n'</span>)</span><br><span class="line">    <span class="keyword">for</span> i,row <span class="keyword">in</span> enumerate(all_label):</span><br><span class="line">        metadata_file.write(<span class="string">'%d\t%d\t%s\t%d\n'</span> % (i,mydict[row],row,all_dur[i]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    saver = tf.train.Saver([UnitVector])</span><br><span class="line"></span><br><span class="line">    sess.run(UnitVector.initializer)</span><br><span class="line">    saver.save(sess, os.path.join(LOG_DIR, name+<span class="string">'.ckpt'</span>))</span><br><span class="line"></span><br><span class="line">    config = projector.ProjectorConfig()</span><br><span class="line">    <span class="comment"># One can add multiple embeddings.</span></span><br><span class="line">    embedding = config.embeddings.add()</span><br><span class="line">    embedding.tensor_name = UnitVector.name</span><br><span class="line">    <span class="comment"># Link this tensor to its metadata file (e.g. labels).</span></span><br><span class="line">    embedding.metadata_path = <span class="string">'metadata.tsv'</span></span><br><span class="line">    <span class="comment"># Saves a config file that TensorBoard will read during startup.</span></span><br><span class="line">    projector.visualize_embeddings(tf.summary.FileWriter(LOG_DIR), config)</span><br></pre></td></tr></table></figure>
<p>PCA<br><img src="/2018/07/31/%E9%80%90%E6%B8%90%E5%AE%8C%E5%96%84%E8%81%9A%E7%B1%BB%E6%95%88%E6%9E%9C%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96/pca.gif" class=""></p>
<p>隔离查看相同音素对应的点（使用了正则表达式）<br><img src="/2018/07/31/%E9%80%90%E6%B8%90%E5%AE%8C%E5%96%84%E8%81%9A%E7%B1%BB%E6%95%88%E6%9E%9C%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96/a.png" class=""></p>
<p>tSNE<br><img src="/2018/07/31/%E9%80%90%E6%B8%90%E5%AE%8C%E5%96%84%E8%81%9A%E7%B1%BB%E6%95%88%E6%9E%9C%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96/tsne.png" class=""></p>
<p>筛选点并可视化其他特征比如时长<br><img src="/2018/07/31/%E9%80%90%E6%B8%90%E5%AE%8C%E5%96%84%E8%81%9A%E7%B1%BB%E6%95%88%E6%9E%9C%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96/sel.gif" class=""></p>
<p>缺点在于</p>
<ul>
<li>不能听音素对应的声音</li>
<li>tSNE结果不如Mathematica好,而且mma也是完全不知道label信息去做降维的</li>
<li>不能在已经经过tSNE降维并显示所有音素类别的情况下，查看某个音素团的音素时长分布情况。也就是主图不能同时查看多种特征，自定义程度低</li>
</ul>
<h1 id="D3-js阶段"><a href="#D3-js阶段" class="headerlink" title="D3.js阶段"></a>D3.js阶段</h1><p>使用D3版本是5.5.0<br>因为我热爱可视化，所以决定学习D3.js，目前最流行的可视化库之一，不仅可以学习前端知识,Javascript还可以通过看别人的可视化项目培养艺术直觉</p>
<p>Github地址见我的<a href="https://github.com/xiaozhah/Vis-UnitVector" target="_blank" rel="noopener">Vis-UnitVector</a></p>
<p>在以下代码中，颜色渲染的方式和以前mathematica一样，只是背景色换成了黑色，更酷了是不是😁<br>之前Mathematica颜色是这样使用的, 就是第二个输出的61种颜色，现在把它转化为了十六进制形式<br><img src="/2018/07/31/%E9%80%90%E6%B8%90%E5%AE%8C%E5%96%84%E8%81%9A%E7%B1%BB%E6%95%88%E6%9E%9C%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96/scale.png" class=""></p>
<p>初期代码简单只能显示静态图<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vis UnitVector<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"d3/d3.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="comment">/* No style rules here yet */</span>       </span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//Width and height</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> w = <span class="number">1170</span>, h=<span class="number">680</span>;</span></span><br><span class="line">            </span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> dataset, cur_lab, selectQ = <span class="literal">false</span>; <span class="comment">// a global</span></span></span><br><span class="line"><span class="actionscript">            d3.json(<span class="string">"Unit2Vec_tSNE.json"</span>).then(<span class="function"><span class="keyword">function</span><span class="params">(json)</span> </span></span></span><br><span class="line">            &#123;</span><br><span class="line">              dataset = json;</span><br><span class="line">              visualize();</span><br><span class="line">            &#125;);</span><br><span class="line">    </span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">visualize</span><span class="params">()</span></span></span></span><br><span class="line">            &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">//Create SVG element</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> svg = d3.select(<span class="string">"body"</span>)</span></span><br><span class="line"><span class="actionscript">                .append(<span class="string">"svg"</span>)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"width"</span>, w)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"height"</span>, h);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">//创建背景用于触发点击事件（颜色复位）</span></span></span><br><span class="line"><span class="actionscript">                svg.append(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"x"</span>, <span class="number">0</span>)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"y"</span>, <span class="number">0</span>)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"width"</span>, w)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"height"</span>, h)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"fill"</span>,<span class="string">"black"</span>)</span></span><br><span class="line"><span class="actionscript">                .on(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//触发背景点击事件，复位颜色的事件</span></span></span><br><span class="line"><span class="actionscript">                    d3.selectAll(<span class="string">"circle"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"fill"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">return</span> color_map(d3.values(d)[<span class="number">0</span>].lab);</span></span><br><span class="line">                        &#125;);</span><br><span class="line"><span class="actionscript">                    <span class="comment">//给文本传空字符串，因为当前点击的是背景而没点击任何点</span></span></span><br><span class="line"><span class="actionscript">                    d3.select(<span class="string">"text"</span>).text(<span class="string">""</span>);</span></span><br><span class="line"><span class="actionscript">                    selectQ = <span class="literal">false</span>;</span></span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">//添加文本显示当前点击的点对应的音素类别</span></span></span><br><span class="line"><span class="actionscript">                svg.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"x"</span>,<span class="number">100</span>)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"y"</span>,<span class="number">80</span>)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"font-size"</span>,<span class="number">50</span>);</span></span><br><span class="line">                </span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> min_max_x = d3.extent(dataset,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> d3.values(d)[<span class="number">0</span>].pos[<span class="number">0</span>]&#125;);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> min_x = min_max_x[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> max_x = min_max_x[<span class="number">1</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> min_max_y = d3.extent(dataset,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> d3.values(d)[<span class="number">0</span>].pos[<span class="number">1</span>]&#125;);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> min_y = min_max_y[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> max_y = min_max_y[<span class="number">1</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">//创建映射点位置的比例尺</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> xScale = d3.scaleLinear().domain([min_x,max_x]).range([<span class="number">0</span>,w]);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> yScale = d3.scaleLinear().domain([min_y,max_y]).range([h,<span class="number">0</span>]);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> phoneme = [<span class="string">"a"</span>, <span class="string">"ai"</span>, <span class="string">"an"</span>, <span class="string">"ang"</span>, <span class="string">"ao"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"ch"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"ei"</span>, <span class="string">"en"</span>, <span class="string">"eng"</span>, <span class="string">"er"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>, <span class="string">"ia"</span>, <span class="string">"ian"</span>, <span class="string">"iang"</span>, <span class="string">"iao"</span>, <span class="string">"ie"</span>, <span class="string">"ii"</span>, <span class="string">"iii"</span>, <span class="string">"in"</span>, <span class="string">"ing"</span>, <span class="string">"iong"</span>, <span class="string">"iou"</span>, <span class="string">"j"</span>, <span class="string">"k"</span>, <span class="string">"l"</span>, <span class="string">"m"</span>, <span class="string">"n"</span>, <span class="string">"o"</span>, <span class="string">"ong"</span>, <span class="string">"ou"</span>, <span class="string">"p"</span>, <span class="string">"q"</span>, <span class="string">"r"</span>, <span class="string">"s"</span>, <span class="string">"sh"</span>, <span class="string">"sil"</span>, <span class="string">"sp"</span>, <span class="string">"t"</span>, <span class="string">"u"</span>, <span class="string">"ua"</span>, <span class="string">"uai"</span>, <span class="string">"uan"</span>, <span class="string">"uang"</span>, <span class="string">"uei"</span>, <span class="string">"uen"</span>, <span class="string">"ueng"</span>, <span class="string">"uo"</span>, <span class="string">"v"</span>, <span class="string">"van"</span>, <span class="string">"ve"</span>, <span class="string">"vn"</span>, <span class="string">"x"</span>, <span class="string">"z"</span>, <span class="string">"zh"</span>]</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> color = [<span class="string">"#781c86"</span>, <span class="string">"#6d1c90"</span>, <span class="string">"#621d99"</span>, <span class="string">"#571ea2"</span>, <span class="string">"#4e20ab"</span>, <span class="string">"#4a27b2"</span>,<span class="string">"#462eb9"</span>, <span class="string">"#4236c1"</span>, <span class="string">"#403ec6"</span>, <span class="string">"#3f47c9"</span>, <span class="string">"#3f51cc"</span>, <span class="string">"#3e5acf"</span>,<span class="string">"#3f63cf"</span>, <span class="string">"#416bce"</span>, <span class="string">"#4274ce"</span>, <span class="string">"#447ccd"</span>, <span class="string">"#4783c8"</span>, <span class="string">"#498ac4"</span>, <span class="string">"#4c90c0"</span>, <span class="string">"#4f97bb"</span>, <span class="string">"#539bb5"</span>, <span class="string">"#56a0ae"</span>, <span class="string">"#5aa5a8"</span>, <span class="string">"#5ea9a1"</span>, <span class="string">"#63ac9a"</span>, <span class="string">"#68af93"</span>, <span class="string">"#6cb28c"</span>, <span class="string">"#72b485"</span>, <span class="string">"#78b67e"</span>, <span class="string">"#7db877"</span>, <span class="string">"#83ba70"</span>, <span class="string">"#89bb6b"</span>, <span class="string">"#90bc65"</span>, <span class="string">"#96bd60"</span>, <span class="string">"#9dbe5a"</span>, <span class="string">"#a3be56"</span>, <span class="string">"#aabd52"</span>, <span class="string">"#b0bd4e"</span>, <span class="string">"#b7bd4b"</span>, <span class="string">"#bdbb48"</span>, <span class="string">"#c3ba46"</span>, <span class="string">"#c9b843"</span>, <span class="string">"#ceb541"</span>, <span class="string">"#d3b240"</span>, <span class="string">"#d8ae3e"</span>, <span class="string">"#dcab3c"</span>, <span class="string">"#dfa53b"</span>, <span class="string">"#e19f3a"</span>, <span class="string">"#e49938"</span>, <span class="string">"#e69237"</span>, <span class="string">"#e68a35"</span>, <span class="string">"#e68133"</span>, <span class="string">"#e67832"</span>, <span class="string">"#e56e30"</span>, <span class="string">"#e4632e"</span>, <span class="string">"#e2582c"</span>, <span class="string">"#e04e29"</span>, <span class="string">"#df4327"</span>, <span class="string">"#dd3726"</span>, <span class="string">"#dc2c24"</span>, <span class="string">"#db2122"</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">//创建音素与对应颜色的序数比例尺</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> color_map = d3.scaleOrdinal()</span></span><br><span class="line">                            .domain(phoneme)</span><br><span class="line">                            .range(color);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">//创建一个包含比例尺的字典，可以将音素时长映射在[-2,2]内</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> color_map_dict = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; phoneme.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> min_max_dur = d3.extent(</span></span><br><span class="line"><span class="actionscript">                        dataset.filter(<span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span></span></span><br><span class="line"><span class="actionscript">                        &#123;<span class="keyword">return</span> d3.values(d)[<span class="number">0</span>].lab == phoneme[i];&#125;),</span></span><br><span class="line"><span class="actionscript">                        <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> d3.values(d)[<span class="number">0</span>].dur&#125;);</span></span><br><span class="line"></span><br><span class="line">                    color_map_dict[phoneme[i]] = d3.scaleLinear()</span><br><span class="line">                                        .domain([min_max_dur[0],min_max_dur[1]])</span><br><span class="line">                                        .range([-2,2]);</span><br><span class="line">                &#125;                </span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">//设置点的相关事件属性</span></span></span><br><span class="line"><span class="actionscript">                svg.selectAll(<span class="string">"circle"</span>)</span></span><br><span class="line">                .data(dataset)</span><br><span class="line">                .enter()</span><br><span class="line"><span class="actionscript">                .append(<span class="string">"circle"</span>)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"cx"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> xScale(d3.values(d)[<span class="number">0</span>].pos[<span class="number">0</span>]);</span></span><br><span class="line">                &#125;)</span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"cy"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> yScale(d3.values(d)[<span class="number">0</span>].pos[<span class="number">1</span>]);</span></span><br><span class="line">                &#125;)</span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"r"</span>, <span class="number">3</span>)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"fill"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> color_map(d3.values(d)[<span class="number">0</span>].lab);</span></span><br><span class="line">                &#125;)</span><br><span class="line"><span class="actionscript">                .call(d3.zoom().on(<span class="string">"zoom"</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    svg.attr(<span class="string">"transform"</span>,d3.event.transform);</span></span><br><span class="line">                &#125;))</span><br><span class="line"><span class="actionscript">                .on(<span class="string">"mouseover"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> info = d3.values(d)[<span class="number">0</span>]</span></span><br><span class="line">                    if(selectQ)&#123;</span><br><span class="line">                        if(info.lab == cur_lab)</span><br><span class="line"><span class="actionscript">                            <span class="keyword">new</span> Audio(<span class="string">"wav_phone/"</span>+info.name+<span class="string">".wav"</span>).play();</span></span><br><span class="line">                    &#125;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">else</span></span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">new</span> Audio(<span class="string">"wav_phone/"</span>+info.name+<span class="string">".wav"</span>).play();</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//给文本传当前鼠标滑过的音素名</span></span></span><br><span class="line"><span class="actionscript">                    d3.select(<span class="string">"text"</span>)</span></span><br><span class="line">                    .text(info.lab)</span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"fill"</span>,<span class="string">"white"</span>);</span></span><br><span class="line">                &#125;)</span><br><span class="line"><span class="actionscript">                .on(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;</span></span><br><span class="line">                    cur_lab = d3.values(d)[0].lab;</span><br><span class="line"><span class="actionscript">                    <span class="comment">//给指定点上彩色，并根据每个单元时长不同上不一样的亮度</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//时长越小越按，越大越亮</span></span></span><br><span class="line"><span class="actionscript">                    d3.selectAll(<span class="string">"circle"</span>).filter(<span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">return</span> d3.values(d)[<span class="number">0</span>].lab == cur_lab;</span></span><br><span class="line">                    &#125;)</span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"fill"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">var</span> info = d3.values(d)[<span class="number">0</span>]</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">return</span> d3.rgb(color_map(info.lab)).darker(color_map_dict[info.lab](info.dur));</span></span><br><span class="line">                        &#125;)</span><br><span class="line"><span class="actionscript">                    <span class="comment">//给其余点上灰色</span></span></span><br><span class="line"><span class="actionscript">                    d3.selectAll(<span class="string">"circle"</span>).filter(<span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">return</span> d3.values(d)[<span class="number">0</span>].lab != cur_lab;</span></span><br><span class="line">                    &#125;)</span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"fill"</span>,<span class="string">"grey"</span>);</span></span><br><span class="line"><span class="actionscript">                    selectQ = <span class="literal">true</span>;</span></span><br><span class="line">                &#125;)</span><br><span class="line">                ;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>整体图的展示<br><img src="/2018/07/31/%E9%80%90%E6%B8%90%E5%AE%8C%E5%96%84%E8%81%9A%E7%B1%BB%E6%95%88%E6%9E%9C%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96/3.png" class=""><br>局部图的展示，选中某一个点之后<br><img src="/2018/07/31/%E9%80%90%E6%B8%90%E5%AE%8C%E5%96%84%E8%81%9A%E7%B1%BB%E6%95%88%E6%9E%9C%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96/4.png" class=""></p>
<p>没对比没伤害，为什么D3画的图颜色这么好看捏~</p>
<h1 id="继续探索…"><a href="#继续探索…" class="headerlink" title="继续探索…"></a>继续探索…</h1><h2 id="比如离某音素最近的音素们是什么样的分布呢？"><a href="#比如离某音素最近的音素们是什么样的分布呢？" class="headerlink" title="比如离某音素最近的音素们是什么样的分布呢？"></a>比如离某音素最近的音素们是什么样的分布呢？</h2><p>用Mathematica来探索</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SetDirectory</span>[<span class="keyword">NotebookDirectory</span>[]];</span><br><span class="line">color = <span class="keyword">ColorData</span>[<span class="string">"Rainbow"</span>];</span><br><span class="line"><span class="comment">(*导入数据*)</span></span><br><span class="line">data = </span><br><span class="line">  <span class="keyword">Partition</span>[<span class="keyword">Import</span>[<span class="string">"./data/Unit2Vec_ori_UnitVector.dat"</span>, <span class="string">"Real32"</span>], </span><br><span class="line">   <span class="number">32</span>];</span><br><span class="line">phones = <span class="keyword">Import</span>[<span class="string">"./data/phone_name_frame_id.csv"</span>, <span class="string">"Table"</span>][[<span class="keyword">All</span>, <span class="number">2</span>]];</span><br><span class="line"><span class="comment">(*构造最邻近对象，非常快的*)</span></span><br><span class="line">n = <span class="keyword">Nearest</span>[data];</span><br><span class="line"><span class="comment">(*建立vector\[Rule]对应的索引的字典，也是为了加速运算，不需要每次求Position*)</span></span><br><span class="line"></span><br><span class="line">asso = <span class="keyword">Association</span>[<span class="keyword">Thread</span>[data -&gt; <span class="keyword">Range</span>@<span class="keyword">Length</span>@data]];</span><br><span class="line"><span class="comment">(*画图，n[data[[i]],1000]代表求1000近邻*)</span></span><br><span class="line"><span class="keyword">SeedRandom</span>[<span class="number">23333</span>];</span><br><span class="line"><span class="keyword">Grid</span>@<span class="keyword">Table</span>[</span><br><span class="line">  <span class="keyword">Module</span>[&#123;nearps = phones[[asso[#]]] &amp; /@ n[data[[i]], <span class="number">1000</span>], v&#125;, </span><br><span class="line">   v = <span class="keyword">Normal</span>[<span class="keyword">Sort</span>[<span class="keyword">Counts</span>[nearps], <span class="keyword">Greater</span>]]; &#123;phones[[i]], </span><br><span class="line">    <span class="keyword">BarChart</span>[</span><br><span class="line">     <span class="keyword">MapIndexed</span>[</span><br><span class="line">      <span class="keyword">Tooltip</span>[<span class="keyword">Style</span>[#<span class="number">1</span>[[<span class="number">2</span>]], </span><br><span class="line">         color@<span class="keyword">Rescale</span>[<span class="keyword">First</span>@#<span class="number">2</span>, &#123;<span class="keyword">Length</span>@v, <span class="number">1</span>&#125;]], #<span class="number">1</span>[[<span class="number">1</span>]]] &amp;, v], </span><br><span class="line">     <span class="keyword">BarSpacing</span> -&gt; &#123;<span class="number">0</span>, <span class="number">0</span>&#125;, <span class="keyword">Frame</span> -&gt; <span class="keyword">False</span>, <span class="keyword">Axes</span> -&gt; <span class="keyword">False</span>, </span><br><span class="line">     <span class="keyword">BarOrigin</span> -&gt; <span class="keyword">Left</span>, <span class="keyword">ChartLayout</span> -&gt; <span class="string">"Stacked"</span>, </span><br><span class="line">     <span class="keyword">PlotRange</span> -&gt; &#123;<span class="keyword">All</span>, &#123;<span class="number">.5</span>, <span class="number">1.5</span>&#125;&#125;, <span class="keyword">AspectRatio</span> -&gt; <span class="number">1</span>/<span class="number">10</span>, </span><br><span class="line">     <span class="keyword">ImageSize</span> -&gt; <span class="number">500</span>]&#125;], &#123;i, <span class="keyword">RandomSample</span>[<span class="keyword">Range</span>@<span class="keyword">Length</span>[data], <span class="number">12</span>]&#125;]</span><br></pre></td></tr></table></figure>
<p>上色规则为：根据1000近邻内各个音素出现的次数从大到小排序，颜色按照这个次序渐进变化。<br>越靠近开头表示出现这个音素出现次数越多，可以看到偶尔一个音素的最近1000近邻中最多出现的音素竟然不是自己，这只能说聚类效果不好。因为这是随机从几十万的样本中抽出的12个例子，任意个体被抽中的概率是很低的<br><img src="/2018/07/31/%E9%80%90%E6%B8%90%E5%AE%8C%E5%96%84%E8%81%9A%E7%B1%BB%E6%95%88%E6%9E%9C%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96/DdQZKJ2I.jpg" class=""><br>可以看到音素的最近邻之间也是距离相近的音素，出现最多的还是自己，其次是与它较相近的音素</p>
<p>但是仅宏观表示但是细节不够，不能体现第N近是哪个音素以及可视化最近邻分布的趋势<br>因此修改为<br><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SeedRandom</span>[<span class="number">23333</span>];</span><br><span class="line"><span class="keyword">Grid</span>@<span class="keyword">Table</span>[</span><br><span class="line">  <span class="keyword">Module</span>[&#123;nearps = phones[[asso[#]]] &amp; /@ n[data[[i]], <span class="number">1000</span>], class, </span><br><span class="line">    col&#125;, class = <span class="keyword">Keys</span>@<span class="keyword">Sort</span>@<span class="keyword">Counts</span>[nearps];<span class="comment">(*建立颜色映射*)</span></span><br><span class="line">   col = <span class="keyword">Association</span>[<span class="keyword">Thread</span>[class -&gt; <span class="keyword">Rescale</span>@<span class="keyword">Range</span>[<span class="keyword">Length</span>@class]]];</span><br><span class="line">   &#123;phones[[i]], </span><br><span class="line">    <span class="keyword">BarChart</span>[</span><br><span class="line">     <span class="keyword">Tooltip</span>[<span class="keyword">Function</span>[&#123;val&#125;, </span><br><span class="line">          <span class="keyword">Style</span>[val, <span class="keyword">ColorData</span>[<span class="string">"Rainbow"</span>, col[<span class="keyword">First</span>@#]]]]@<span class="keyword">Length</span>@#, </span><br><span class="line">        <span class="keyword">First</span>@#] &amp; /@ <span class="keyword">Split</span>[nearps], <span class="keyword">BarSpacing</span> -&gt; &#123;<span class="number">0</span>, <span class="number">0</span>&#125;, </span><br><span class="line">     <span class="keyword">Frame</span> -&gt; <span class="keyword">False</span>, <span class="keyword">Axes</span> -&gt; <span class="keyword">False</span>, <span class="keyword">BarOrigin</span> -&gt; <span class="keyword">Left</span>, </span><br><span class="line">     <span class="keyword">ChartLayout</span> -&gt; <span class="string">"Stacked"</span>, <span class="keyword">PlotRange</span> -&gt; &#123;<span class="keyword">All</span>, &#123;<span class="number">.5</span>, <span class="number">1.5</span>&#125;&#125;, </span><br><span class="line">     <span class="keyword">AspectRatio</span> -&gt; <span class="number">1</span>/<span class="number">10</span>, <span class="keyword">ImageSize</span> -&gt; <span class="number">500</span>]&#125;], &#123;i, </span><br><span class="line">   <span class="keyword">RandomSample</span>[<span class="keyword">Range</span>@<span class="keyword">Length</span>[data], <span class="number">12</span>]&#125;]</span><br></pre></td></tr></table></figure><br>横轴是第1近邻、第2近邻直到第1000近邻。<br>上色规则为：颜色按照这个1000近邻中，音素所出现的的频率上色，出现越多的音素越偏红。<br><img src="/2018/07/31/%E9%80%90%E6%B8%90%E5%AE%8C%E5%96%84%E8%81%9A%E7%B1%BB%E6%95%88%E6%9E%9C%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96/MCuytZoP.jpg" class=""><br>可以看到细节，混叠严重的话，最N近邻会频繁被其他音素打断<br>尝试给UnitVector更多信息的话，混叠可以减小<br><img src="/2018/07/31/%E9%80%90%E6%B8%90%E5%AE%8C%E5%96%84%E8%81%9A%E7%B1%BB%E6%95%88%E6%9E%9C%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96/q0jJIWG1.jpg" class=""></p>
]]></content>
      <categories>
        <category>实验项目</category>
      </categories>
      <tags>
        <tag>Mathematica</tag>
        <tag>可视化</tag>
        <tag>Python</tag>
        <tag>JavaScript</tag>
        <tag>D3.js</tag>
      </tags>
  </entry>
</search>
